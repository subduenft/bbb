{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar promisify = require('util.promisify');\n/**\n * Promisified wrapper around [[StateManager]]\n * @ignore\n */\nvar PStateManager = /** @class */function () {\n  function PStateManager(wrapped) {\n    this._wrapped = wrapped;\n    // We cache these promisified function as they are called lots of times during the VM execution,\n    // and promisifying them each time has degrades its performance.\n    this.getAccount = promisify(this._wrapped.getAccount.bind(this._wrapped));\n    this.putAccount = promisify(this._wrapped.putAccount.bind(this._wrapped));\n    this.putContractCode = promisify(this._wrapped.putContractCode.bind(this._wrapped));\n    this.getContractCode = promisify(this._wrapped.getContractCode.bind(this._wrapped));\n    this.getContractStorage = promisify(this._wrapped.getContractStorage.bind(this._wrapped));\n    this.getOriginalContractStorage = promisify(this._wrapped.getOriginalContractStorage.bind(this._wrapped));\n    this.putContractStorage = promisify(this._wrapped.putContractStorage.bind(this._wrapped));\n    this.clearContractStorage = promisify(this._wrapped.clearContractStorage.bind(this._wrapped));\n    this.checkpoint = promisify(this._wrapped.checkpoint.bind(this._wrapped));\n    this.commit = promisify(this._wrapped.commit.bind(this._wrapped));\n    this.revert = promisify(this._wrapped.revert.bind(this._wrapped));\n    this.getStateRoot = promisify(this._wrapped.getStateRoot.bind(this._wrapped));\n    this.setStateRoot = promisify(this._wrapped.setStateRoot.bind(this._wrapped));\n    this.dumpStorage = promisify(this._wrapped.dumpStorage.bind(this._wrapped));\n    this.hasGenesisState = promisify(this._wrapped.hasGenesisState.bind(this._wrapped));\n    this.generateCanonicalGenesis = promisify(this._wrapped.generateCanonicalGenesis.bind(this._wrapped));\n    this.generateGenesis = promisify(this._wrapped.generateGenesis.bind(this._wrapped));\n    this.accountIsEmpty = promisify(this._wrapped.accountIsEmpty.bind(this._wrapped));\n    this.cleanupTouchedAccounts = promisify(this._wrapped.cleanupTouchedAccounts.bind(this._wrapped));\n  }\n  PStateManager.prototype.copy = function () {\n    return new PStateManager(this._wrapped.copy());\n  };\n  return PStateManager;\n}();\nexports.default = PStateManager;","map":null,"metadata":{},"sourceType":"script"}