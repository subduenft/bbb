{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/nicholasschepisi/Desktop/code/bbb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\nvar _classCallCheck = require(\"/Users/nicholasschepisi/Desktop/code/bbb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"/Users/nicholasschepisi/Desktop/code/bbb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SubscriptionManager = void 0;\nvar utils_1 = require(\"@0x/utils\");\nvar web3_wrapper_1 = require(\"@0x/web3-wrapper\");\nvar ethereum_types_1 = require(\"ethereum-types\");\nvar ethereumjs_blockstream_1 = require(\"ethereumjs-blockstream\");\nvar types_1 = require(\"./types\");\nvar filter_utils_1 = require(\"./utils/filter_utils\");\nvar DEFAULT_BLOCK_POLLING_INTERVAL = 1000;\nvar SubscriptionManager = /*#__PURE__*/function () {\n  function SubscriptionManager(abi, web3Wrapper) {\n    _classCallCheck(this, SubscriptionManager);\n    this.abi = abi;\n    this._web3Wrapper = web3Wrapper;\n    this._filters = {};\n    this._filterCallbacks = {};\n    this._blockAndLogStreamerIfExists = undefined;\n    this._onLogAddedSubscriptionToken = undefined;\n    this._onLogRemovedSubscriptionToken = undefined;\n  }\n  _createClass(SubscriptionManager, [{\n    key: \"unsubscribeAll\",\n    value: function unsubscribeAll() {\n      var _this = this;\n      var filterTokens = Object.keys(this._filterCallbacks);\n      filterTokens.forEach(function (filterToken) {\n        return _this.unsubscribe(filterToken);\n      });\n    }\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe(filterToken, err) {\n      if (this._filters[filterToken] === undefined) {\n        throw new Error(types_1.SubscriptionErrors.SubscriptionNotFound);\n      }\n      if (err !== undefined) {\n        var callback = this._filterCallbacks[filterToken];\n        callback(err, undefined);\n      }\n      delete this._filters[filterToken];\n      delete this._filterCallbacks[filterToken];\n      if (Object.keys(this._filters).length === 0) {\n        this._stopBlockAndLogStream();\n      }\n    }\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(address, eventName, indexFilterValues, abi, callback) {\n      var isVerbose = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n      var blockPollingIntervalMs = arguments.length > 6 ? arguments[6] : undefined;\n      var filter = filter_utils_1.filterUtils.getFilter(address, eventName, indexFilterValues, abi);\n      if (this._blockAndLogStreamerIfExists === undefined) {\n        this._startBlockAndLogStream(isVerbose, blockPollingIntervalMs);\n      }\n      var filterToken = filter_utils_1.filterUtils.generateUUID();\n      this._filters[filterToken] = filter;\n      this._filterCallbacks[filterToken] = callback; // tslint:disable-line:no-unnecessary-type-assertion\n      return filterToken;\n    }\n  }, {\n    key: \"getLogsAsync\",\n    value: function getLogsAsync(address, eventName, blockRange, indexFilterValues, abi) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var filter, logs, logsWithDecodedArguments;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              filter = filter_utils_1.filterUtils.getFilter(address, eventName, indexFilterValues, abi, blockRange);\n              _context.next = 3;\n              return this._web3Wrapper.getLogsAsync(filter);\n            case 3:\n              logs = _context.sent;\n              logsWithDecodedArguments = logs.map(this._tryToDecodeLogOrNoop.bind(this));\n              return _context.abrupt(\"return\", logsWithDecodedArguments);\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n    }\n  }, {\n    key: \"_tryToDecodeLogOrNoop\",\n    value: function _tryToDecodeLogOrNoop(log) {\n      var abiDecoder = new utils_1.AbiDecoder([this.abi]);\n      var logWithDecodedArgs = abiDecoder.tryToDecodeLogOrNoop(log);\n      return logWithDecodedArgs;\n    }\n  }, {\n    key: \"_onLogStateChanged\",\n    value: function _onLogStateChanged(isRemoved, blockHash, rawLogs) {\n      var _this2 = this;\n      // tslint:disable-next-line:no-unnecessary-type-assertion\n      var logs = rawLogs.map(function (rawLog) {\n        return web3_wrapper_1.marshaller.unmarshalLog(rawLog);\n      });\n      logs.forEach(function (log) {\n        Object.entries(_this2._filters).forEach(function (_ref) {\n          var _ref2 = _slicedToArray(_ref, 2),\n            filterToken = _ref2[0],\n            filter = _ref2[1];\n          if (filter_utils_1.filterUtils.matchesFilter(log, filter)) {\n            var decodedLog = _this2._tryToDecodeLogOrNoop(log);\n            var logEvent = {\n              log: decodedLog,\n              isRemoved: isRemoved\n            };\n            _this2._filterCallbacks[filterToken](null, logEvent);\n          }\n        });\n      });\n    }\n  }, {\n    key: \"_startBlockAndLogStream\",\n    value: function _startBlockAndLogStream(isVerbose, blockPollingIntervalMs) {\n      if (this._blockAndLogStreamerIfExists !== undefined) {\n        throw new Error(types_1.SubscriptionErrors.SubscriptionAlreadyPresent);\n      }\n      this._blockAndLogStreamerIfExists = new ethereumjs_blockstream_1.BlockAndLogStreamer(this._blockstreamGetBlockOrNullAsync.bind(this), this._blockstreamGetLogsAsync.bind(this), SubscriptionManager._onBlockAndLogStreamerError.bind(this, isVerbose));\n      var catchAllLogFilter = {};\n      this._blockAndLogStreamerIfExists.addLogFilter(catchAllLogFilter);\n      var _blockPollingIntervalMs = blockPollingIntervalMs === undefined ? DEFAULT_BLOCK_POLLING_INTERVAL : blockPollingIntervalMs;\n      this._blockAndLogStreamIntervalIfExists = utils_1.intervalUtils.setAsyncExcludingInterval(this._reconcileBlockAsync.bind(this), _blockPollingIntervalMs, SubscriptionManager._onBlockAndLogStreamerError.bind(this, isVerbose));\n      var isRemoved = false;\n      this._onLogAddedSubscriptionToken = this._blockAndLogStreamerIfExists.subscribeToOnLogsAdded(this._onLogStateChanged.bind(this, isRemoved));\n      isRemoved = true;\n      this._onLogRemovedSubscriptionToken = this._blockAndLogStreamerIfExists.subscribeToOnLogsRemoved(this._onLogStateChanged.bind(this, isRemoved));\n    } // This method only exists in order to comply with the expected interface of Blockstream's constructor\n  }, {\n    key: \"_blockstreamGetBlockOrNullAsync\",\n    value: function _blockstreamGetBlockOrNullAsync(hash) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var shouldIncludeTransactionData, blockOrNull;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              shouldIncludeTransactionData = false;\n              _context2.next = 3;\n              return this._web3Wrapper.sendRawPayloadAsync({\n                method: 'eth_getBlockByHash',\n                params: [hash, shouldIncludeTransactionData]\n              });\n            case 3:\n              blockOrNull = _context2.sent;\n              return _context2.abrupt(\"return\", blockOrNull);\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n    } // This method only exists in order to comply with the expected interface of Blockstream's constructor\n  }, {\n    key: \"_blockstreamGetLatestBlockOrNullAsync\",\n    value: function _blockstreamGetLatestBlockOrNullAsync() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var shouldIncludeTransactionData, blockOrNull;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              shouldIncludeTransactionData = false;\n              _context3.next = 3;\n              return this._web3Wrapper.sendRawPayloadAsync({\n                method: 'eth_getBlockByNumber',\n                params: [ethereum_types_1.BlockParamLiteral.Latest, shouldIncludeTransactionData]\n              });\n            case 3:\n              blockOrNull = _context3.sent;\n              return _context3.abrupt(\"return\", blockOrNull);\n            case 5:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n    } // This method only exists in order to comply with the expected interface of Blockstream's constructor\n  }, {\n    key: \"_blockstreamGetLogsAsync\",\n    value: function _blockstreamGetLogsAsync(filterOptions) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var logs;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return this._web3Wrapper.sendRawPayloadAsync({\n                method: 'eth_getLogs',\n                params: [filterOptions]\n              });\n            case 2:\n              logs = _context4.sent;\n              return _context4.abrupt(\"return\", logs);\n            case 4:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this);\n      }));\n    }\n  }, {\n    key: \"_stopBlockAndLogStream\",\n    value: function _stopBlockAndLogStream() {\n      if (this._blockAndLogStreamerIfExists === undefined) {\n        throw new Error(types_1.SubscriptionErrors.SubscriptionNotFound);\n      }\n      this._blockAndLogStreamerIfExists.unsubscribeFromOnLogsAdded(this._onLogAddedSubscriptionToken);\n      this._blockAndLogStreamerIfExists.unsubscribeFromOnLogsRemoved(this._onLogRemovedSubscriptionToken);\n      utils_1.intervalUtils.clearAsyncExcludingInterval(this._blockAndLogStreamIntervalIfExists);\n      delete this._blockAndLogStreamerIfExists;\n    }\n  }, {\n    key: \"_reconcileBlockAsync\",\n    value: function _reconcileBlockAsync() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var latestBlockOrNull;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return this._blockstreamGetLatestBlockOrNullAsync();\n            case 2:\n              latestBlockOrNull = _context5.sent;\n              if (!(latestBlockOrNull === null)) {\n                _context5.next = 5;\n                break;\n              }\n              return _context5.abrupt(\"return\");\n            case 5:\n              if (!(this._blockAndLogStreamerIfExists !== undefined)) {\n                _context5.next = 8;\n                break;\n              }\n              _context5.next = 8;\n              return this._blockAndLogStreamerIfExists.reconcileNewBlock(latestBlockOrNull);\n            case 8:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, this);\n      }));\n    }\n  }], [{\n    key: \"_onBlockAndLogStreamerError\",\n    value: function _onBlockAndLogStreamerError(isVerbose, err) {\n      // Since Blockstream errors are all recoverable, we simply log them if the verbose\n      // config is passed in.\n      if (isVerbose) {\n        utils_1.logUtils.warn(err);\n      }\n    }\n  }]);\n  return SubscriptionManager;\n}();\nexports.SubscriptionManager = SubscriptionManager;","map":null,"metadata":{},"sourceType":"script"}