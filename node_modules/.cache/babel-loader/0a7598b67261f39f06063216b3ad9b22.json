{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar assert = require(\"assert\");\n/**\n * Memory implements a simple memory model\n * for the ethereum virtual machine.\n */\nvar Memory = /** @class */function () {\n  function Memory() {\n    this._store = [];\n  }\n  /**\n   * Extends the memory given an offset and size. Rounds extended\n   * memory to word-size.\n   */\n  Memory.prototype.extend = function (offset, size) {\n    if (size === 0) {\n      return;\n    }\n    var newSize = ceil(offset + size, 32);\n    var sizeDiff = newSize - this._store.length;\n    if (sizeDiff > 0) {\n      this._store = this._store.concat(new Array(sizeDiff).fill(0));\n    }\n  };\n  /**\n   * Writes a byte array with length `size` to memory, starting from `offset`.\n   * @param offset - Starting position\n   * @param size - How many bytes to write\n   * @param value - Value\n   */\n  Memory.prototype.write = function (offset, size, value) {\n    if (size === 0) {\n      return;\n    }\n    assert(value.length === size, 'Invalid value size');\n    assert(offset + size <= this._store.length, 'Value exceeds memory capacity');\n    assert(Buffer.isBuffer(value), 'Invalid value type');\n    for (var i = 0; i < size; i++) {\n      this._store[offset + i] = value[i];\n    }\n  };\n  /**\n   * Reads a slice of memory from `offset` till `offset + size` as a `Buffer`.\n   * It fills up the difference between memory's length and `offset + size` with zeros.\n   * @param offset - Starting position\n   * @param size - How many bytes to read\n   */\n  Memory.prototype.read = function (offset, size) {\n    var loaded = this._store.slice(offset, offset + size);\n    // Fill the remaining length with zeros\n    for (var i = loaded.length; i < size; i++) {\n      loaded[i] = 0;\n    }\n    return Buffer.from(loaded);\n  };\n  return Memory;\n}();\nexports.default = Memory;\nvar ceil = function ceil(value, ceiling) {\n  var r = value % ceiling;\n  if (r === 0) {\n    return value;\n  } else {\n    return value + ceiling - r;\n  }\n};","map":null,"metadata":{},"sourceType":"script"}