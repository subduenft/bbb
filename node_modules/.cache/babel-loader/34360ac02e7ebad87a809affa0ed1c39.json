{"ast":null,"code":"module.exports = PrioritizedTaskExecutor;\n\n/**\n * Executes tasks up to maxPoolSize at a time, other items are put in a priority queue.\n * @class PrioritizedTaskExecutor\n * @param {Number} maxPoolSize The maximum size of the pool\n * @prop {Number} maxPoolSize The maximum size of the pool\n * @prop {Number} currentPoolSize The current size of the pool\n * @prop {Array} queue The task queue\n */\nfunction PrioritizedTaskExecutor(maxPoolSize) {\n  this.maxPoolSize = maxPoolSize;\n  this.currentPoolSize = 0;\n  this.queue = [];\n}\n\n/**\n * Executes the task.\n * @param {Number} priority The priority of the task\n * @param {Function} task The function that accepts the callback, which must be called upon the task completion.\n */\nPrioritizedTaskExecutor.prototype.execute = function (priority, task) {\n  var self = this;\n  if (self.currentPoolSize < self.maxPoolSize) {\n    self.currentPoolSize++;\n    task(function () {\n      self.currentPoolSize--;\n      if (self.queue.length > 0) {\n        self.queue.sort(function (a, b) {\n          return b.priority - a.priority;\n        });\n        var item = self.queue.shift();\n        self.execute(item.priority, item.task);\n      }\n    });\n  } else {\n    self.queue.push({\n      priority: priority,\n      task: task\n    });\n  }\n};","map":null,"metadata":{},"sourceType":"script"}