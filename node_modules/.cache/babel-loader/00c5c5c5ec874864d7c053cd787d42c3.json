{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/nicholasschepisi/Desktop/code/bbb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _possibleConstructorReturn = require(\"/Users/nicholasschepisi/Desktop/code/bbb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\nvar _getPrototypeOf = require(\"/Users/nicholasschepisi/Desktop/code/bbb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\nvar _createClass = require(\"/Users/nicholasschepisi/Desktop/code/bbb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\nvar _inherits = require(\"/Users/nicholasschepisi/Desktop/code/bbb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TupleDataType = void 0;\nvar ethereum_types_1 = require(\"ethereum-types\");\nvar _ = require(\"lodash\");\nvar set_1 = require(\"../abstract_data_types/types/set\");\nvar TupleDataType = /*#__PURE__*/function (_set_1$AbstractSetDat) {\n  _inherits(TupleDataType, _set_1$AbstractSetDat);\n  _createClass(TupleDataType, null, [{\n    key: \"matchType\",\n    value: function matchType(type) {\n      return type === ethereum_types_1.SolidityTypes.Tuple;\n    }\n  }]);\n  function TupleDataType(dataItem, dataTypeFactory) {\n    var _this;\n    _classCallCheck(this, TupleDataType);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TupleDataType).call(this, dataItem, dataTypeFactory));\n    if (!TupleDataType.matchType(dataItem.type)) {\n      throw new Error(\"Tried to instantiate Tuple with bad input: \".concat(dataItem));\n    }\n    return _this;\n  }\n  _createClass(TupleDataType, [{\n    key: \"getSignatureType\",\n    value: function getSignatureType() {\n      return this._computeSignatureOfMembers(false);\n    }\n  }, {\n    key: \"getSignature\",\n    value: function getSignature(isDetailed) {\n      if (_.isEmpty(this.getDataItem().name) || !isDetailed) {\n        return this.getSignatureType();\n      }\n      var name = this.getDataItem().name;\n      var lastIndexOfScopeDelimiter = name.lastIndexOf('.');\n      var isScopedName = lastIndexOfScopeDelimiter !== undefined && lastIndexOfScopeDelimiter > 0;\n      var shortName = isScopedName ? name.substr(lastIndexOfScopeDelimiter + 1) : name;\n      var detailedSignature = \"\".concat(shortName, \" \").concat(this._computeSignatureOfMembers(isDetailed));\n      return detailedSignature;\n    }\n  }]);\n  return TupleDataType;\n}(set_1.AbstractSetDataType);\nexports.TupleDataType = TupleDataType;","map":null,"metadata":{},"sourceType":"script"}