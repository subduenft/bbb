{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function sent() {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (g && (g = 0, op[0] && (_ = 0)), _) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function next() {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Seaport = void 0;\nvar multicall_1 = require(\"@0xsequence/multicall\");\nvar ethers_1 = require(\"ethers\");\nvar utils_1 = require(\"ethers/lib/utils\");\nvar DomainRegistry_1 = require(\"./abi/DomainRegistry\");\nvar Seaport_1 = require(\"./abi/Seaport\");\nvar Seaport_v1_4_1 = require(\"./abi/Seaport_v1_4\");\nvar constants_1 = require(\"./constants\");\nvar approval_1 = require(\"./utils/approval\");\nvar balanceAndApprovalCheck_1 = require(\"./utils/balanceAndApprovalCheck\");\nvar bulk_orders_1 = require(\"./utils/eip712/bulk-orders\");\nvar fulfill_1 = require(\"./utils/fulfill\");\nvar item_1 = require(\"./utils/item\");\nvar order_1 = require(\"./utils/order\");\nvar usecase_1 = require(\"./utils/usecase\");\nvar Seaport = /** @class */function () {\n  /**\n   * @param providerOrSigner - The provider or signer to use for web3-related calls\n   * @param considerationConfig - A config to provide flexibility in the usage of Seaport\n   */\n  function Seaport(providerOrSigner, _a) {\n    var _b;\n    var _c = _a === void 0 ? {} : _a,\n      overrides = _c.overrides,\n      // Five minute buffer\n      _d = _c.ascendingAmountFulfillmentBuffer,\n      // Five minute buffer\n      ascendingAmountFulfillmentBuffer = _d === void 0 ? 300 : _d,\n      _e = _c.balanceAndApprovalChecksOnOrderCreation,\n      balanceAndApprovalChecksOnOrderCreation = _e === void 0 ? true : _e,\n      conduitKeyToConduit = _c.conduitKeyToConduit,\n      _f = _c.seaportVersion,\n      seaportVersion = _f === void 0 ? \"1.4\" : _f;\n    var _g, _h, _j;\n    this.OPENSEA_CONDUIT_KEY = constants_1.OPENSEA_CONDUIT_KEY;\n    /**\n     * Calculates the order hash of order components so we can forgo executing a request to the contract\n     * This saves us RPC calls and latency.\n     */\n    this.getOrderHash = function (orderComponents) {\n      var offerItemTypeString = \"OfferItem(uint8 itemType,address token,uint256 identifierOrCriteria,uint256 startAmount,uint256 endAmount)\";\n      var considerationItemTypeString = \"ConsiderationItem(uint8 itemType,address token,uint256 identifierOrCriteria,uint256 startAmount,uint256 endAmount,address recipient)\";\n      var orderComponentsPartialTypeString = \"OrderComponents(address offerer,address zone,OfferItem[] offer,ConsiderationItem[] consideration,uint8 orderType,uint256 startTime,uint256 endTime,bytes32 zoneHash,uint256 salt,bytes32 conduitKey,uint256 counter)\";\n      var orderTypeString = \"\".concat(orderComponentsPartialTypeString).concat(considerationItemTypeString).concat(offerItemTypeString);\n      var offerItemTypeHash = ethers_1.ethers.utils.keccak256(ethers_1.ethers.utils.toUtf8Bytes(offerItemTypeString));\n      var considerationItemTypeHash = ethers_1.ethers.utils.keccak256(ethers_1.ethers.utils.toUtf8Bytes(considerationItemTypeString));\n      var orderTypeHash = ethers_1.ethers.utils.keccak256(ethers_1.ethers.utils.toUtf8Bytes(orderTypeString));\n      var offerHash = ethers_1.ethers.utils.keccak256(\"0x\" + orderComponents.offer.map(function (offerItem) {\n        return ethers_1.ethers.utils.keccak256(\"0x\" + [offerItemTypeHash.slice(2), offerItem.itemType.toString().padStart(64, \"0\"), offerItem.token.slice(2).padStart(64, \"0\"), ethers_1.ethers.BigNumber.from(offerItem.identifierOrCriteria).toHexString().slice(2).padStart(64, \"0\"), ethers_1.ethers.BigNumber.from(offerItem.startAmount).toHexString().slice(2).padStart(64, \"0\"), ethers_1.ethers.BigNumber.from(offerItem.endAmount).toHexString().slice(2).padStart(64, \"0\")].join(\"\")).slice(2);\n      }).join(\"\"));\n      var considerationHash = ethers_1.ethers.utils.keccak256(\"0x\" + orderComponents.consideration.map(function (considerationItem) {\n        return ethers_1.ethers.utils.keccak256(\"0x\" + [considerationItemTypeHash.slice(2), considerationItem.itemType.toString().padStart(64, \"0\"), considerationItem.token.slice(2).padStart(64, \"0\"), ethers_1.ethers.BigNumber.from(considerationItem.identifierOrCriteria).toHexString().slice(2).padStart(64, \"0\"), ethers_1.ethers.BigNumber.from(considerationItem.startAmount).toHexString().slice(2).padStart(64, \"0\"), ethers_1.ethers.BigNumber.from(considerationItem.endAmount).toHexString().slice(2).padStart(64, \"0\"), considerationItem.recipient.slice(2).padStart(64, \"0\")].join(\"\")).slice(2);\n      }).join(\"\"));\n      var derivedOrderHash = ethers_1.ethers.utils.keccak256(\"0x\" + [orderTypeHash.slice(2), orderComponents.offerer.slice(2).padStart(64, \"0\"), orderComponents.zone.slice(2).padStart(64, \"0\"), offerHash.slice(2), considerationHash.slice(2), orderComponents.orderType.toString().padStart(64, \"0\"), ethers_1.ethers.BigNumber.from(orderComponents.startTime).toHexString().slice(2).padStart(64, \"0\"), ethers_1.ethers.BigNumber.from(orderComponents.endTime).toHexString().slice(2).padStart(64, \"0\"), orderComponents.zoneHash.slice(2), orderComponents.salt.slice(2).padStart(64, \"0\"), orderComponents.conduitKey.slice(2).padStart(64, \"0\"), ethers_1.ethers.BigNumber.from(orderComponents.counter).toHexString().slice(2).padStart(64, \"0\")].join(\"\"));\n      return derivedOrderHash;\n    };\n    var provider = providerOrSigner instanceof ethers_1.providers.Provider ? providerOrSigner : providerOrSigner.provider;\n    this.signer = providerOrSigner._isSigner ? providerOrSigner : undefined;\n    if (!provider) {\n      throw new Error(\"Either a provider or custom signer with provider must be provided\");\n    }\n    this.provider = provider;\n    this.multicallProvider = new multicall_1.providers.MulticallProvider(this.provider);\n    this.contract = new ethers_1.Contract((_g = overrides === null || overrides === void 0 ? void 0 : overrides.contractAddress) !== null && _g !== void 0 ? _g : seaportVersion === \"1.4\" ? constants_1.CROSS_CHAIN_SEAPORT_V1_4_ADDRESS : constants_1.CROSS_CHAIN_SEAPORT_ADDRESS, seaportVersion === \"1.4\" ? Seaport_v1_4_1.SeaportABIv14 : Seaport_1.SeaportABI, this.multicallProvider);\n    this.domainRegistry = new ethers_1.Contract((_h = overrides === null || overrides === void 0 ? void 0 : overrides.domainRegistryAddress) !== null && _h !== void 0 ? _h : constants_1.DOMAIN_REGISTRY_ADDRESS, DomainRegistry_1.DomainRegistryABI, this.multicallProvider);\n    this.config = {\n      ascendingAmountFulfillmentBuffer: ascendingAmountFulfillmentBuffer,\n      balanceAndApprovalChecksOnOrderCreation: balanceAndApprovalChecksOnOrderCreation,\n      conduitKeyToConduit: __assign(__assign(__assign({}, constants_1.KNOWN_CONDUIT_KEYS_TO_CONDUIT), (_b = {}, _b[constants_1.NO_CONDUIT] = this.contract.address, _b)), conduitKeyToConduit),\n      seaportVersion: seaportVersion\n    };\n    this.defaultConduitKey = (_j = overrides === null || overrides === void 0 ? void 0 : overrides.defaultConduitKey) !== null && _j !== void 0 ? _j : constants_1.NO_CONDUIT;\n  }\n  /**\n   * Returns a use case that will create an order.\n   * The use case will contain the list of actions necessary to finish creating an order.\n   * The list of actions will either be an approval if approvals are necessary\n   * or a signature request that will then be supplied into the final Order struct, ready to be fulfilled.\n   *\n   * @param input\n   * @param input.conduitKey The conduitKey key to derive where to source your approvals from. Defaults to 0 which refers to the Seaport contract.\n   *                         Another special value is address(1) will refer to the legacy proxy. All other must derive to the specified address.\n   * @param input.zone The zone of the order. Defaults to the zero address.\n   * @param input.startTime The start time of the order. Defaults to the current unix time.\n   * @param input.endTime The end time of the order. Defaults to \"never end\".\n   *                      It is HIGHLY recommended to pass in an explicit end time\n   * @param input.offer The items you are willing to offer. This is a condensed version of the Seaport struct OfferItem for convenience\n   * @param input.consideration The items that will go to their respective recipients upon receiving your offer.\n   * @param input.counter The counter from which to create the order with. Automatically fetched from the contract if not provided\n   * @param input.allowPartialFills Whether to allow the order to be partially filled\n   * @param input.restrictedByZone Whether the order should be restricted by zone\n   * @param input.fees Convenience array to apply fees onto the order. The fees will be deducted from the\n   *                   existing consideration items and then tacked on as new consideration items\n   * @param input.domain An optional domain to be hashed and included in the first four bytes of the random salt.\n   * @param input.salt Arbitrary salt. If not passed in, a random salt will be generated with the first four bytes being the domain hash or empty.\n   * @param input.offerer The order's creator address. Defaults to the first address on the provider.\n   * @param accountAddress Optional address for which to create the order with\n   * @param exactApproval optional boolean to indicate whether the approval should be exact or not\n   * @returns a use case containing the list of actions needed to be performed in order to create the order\n   */\n  Seaport.prototype.createOrder = function (input, accountAddress, exactApproval) {\n    return __awaiter(this, void 0, void 0, function () {\n      var signer, offerer, _a, orderComponents, approvalActions, createOrderAction, actions;\n      var _this = this;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            signer = this._getSigner(accountAddress);\n            return [4 /*yield*/, signer.getAddress()];\n          case 1:\n            offerer = _b.sent();\n            return [4 /*yield*/, this._formatOrder(signer, offerer, Boolean(exactApproval), input)];\n          case 2:\n            _a = _b.sent(), orderComponents = _a.orderComponents, approvalActions = _a.approvalActions;\n            createOrderAction = {\n              type: \"create\",\n              getMessageToSign: function getMessageToSign() {\n                return _this._getMessageToSign(orderComponents);\n              },\n              createOrder: function createOrder() {\n                return __awaiter(_this, void 0, void 0, function () {\n                  var signature;\n                  return __generator(this, function (_a) {\n                    switch (_a.label) {\n                      case 0:\n                        return [4 /*yield*/, this.signOrder(orderComponents, offerer)];\n                      case 1:\n                        signature = _a.sent();\n                        return [2 /*return*/, {\n                          parameters: orderComponents,\n                          signature: signature\n                        }];\n                    }\n                  });\n                });\n              }\n            };\n            actions = __spreadArray(__spreadArray([], __read(approvalActions), false), [createOrderAction], false);\n            return [2 /*return*/, {\n              actions: actions,\n              executeAllActions: function executeAllActions() {\n                return (0, usecase_1.executeAllActions)(actions);\n              }\n            }];\n        }\n      });\n    });\n  };\n  /**\n   * Returns a use case that will create bulk orders.\n   * The use case will contain the list of actions necessary to finish creating the orders.\n   * The list of actions will either be an approval if approvals are necessary\n   * or a signature request that will then be supplied into the final orders, ready to be fulfilled.\n   *\n   * @param input See {@link createOrder} for more details about the input parameters.\n   * @param exactApproval optional boolean to indicate whether the approval should be exact or not\n   * @returns a use case containing the list of actions needed to be performed in order to create the orders\n   */\n  Seaport.prototype.createBulkOrders = function (createOrderInput, accountAddress, exactApproval) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function () {\n      var signer, offerer, offererCounter, allApprovalActions, allOrderComponents, createOrderInput_1, createOrderInput_1_1, input, _b, orderComponents, approvalActions, _loop_1, approvalActions_1, approvalActions_1_1, approval, e_1_1, createBulkOrdersAction, actions;\n      var e_1, _c, e_2, _d;\n      var _this = this;\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            if (this.config.seaportVersion === \"1.1\") {\n              throw new Error(\"Bulk order signatures are only available on Seaport v1.4\");\n            }\n            signer = this._getSigner(accountAddress);\n            return [4 /*yield*/, signer.getAddress()];\n          case 1:\n            offerer = _e.sent();\n            return [4 /*yield*/, this.getCounter(offerer)];\n          case 2:\n            offererCounter = _e.sent();\n            allApprovalActions = [];\n            allOrderComponents = [];\n            _e.label = 3;\n          case 3:\n            _e.trys.push([3, 8, 9, 10]);\n            createOrderInput_1 = __values(createOrderInput), createOrderInput_1_1 = createOrderInput_1.next();\n            _e.label = 4;\n          case 4:\n            if (!!createOrderInput_1_1.done) return [3 /*break*/, 7];\n            input = createOrderInput_1_1.value;\n            (_a = input.counter) !== null && _a !== void 0 ? _a : input.counter = offererCounter;\n            return [4 /*yield*/, this._formatOrder(signer, offerer, Boolean(exactApproval), input)];\n          case 5:\n            _b = _e.sent(), orderComponents = _b.orderComponents, approvalActions = _b.approvalActions;\n            allOrderComponents.push(orderComponents);\n            _loop_1 = function _loop_1(approval) {\n              if (allApprovalActions.find(function (a) {\n                return a.token === approval.token;\n              }) === undefined) {\n                allApprovalActions.push(approval);\n              }\n            };\n            try {\n              // Dedupe approvals by token address\n              for (approvalActions_1 = (e_2 = void 0, __values(approvalActions)), approvalActions_1_1 = approvalActions_1.next(); !approvalActions_1_1.done; approvalActions_1_1 = approvalActions_1.next()) {\n                approval = approvalActions_1_1.value;\n                _loop_1(approval);\n              }\n            } catch (e_2_1) {\n              e_2 = {\n                error: e_2_1\n              };\n            } finally {\n              try {\n                if (approvalActions_1_1 && !approvalActions_1_1.done && (_d = approvalActions_1.return)) _d.call(approvalActions_1);\n              } finally {\n                if (e_2) throw e_2.error;\n              }\n            }\n            _e.label = 6;\n          case 6:\n            createOrderInput_1_1 = createOrderInput_1.next();\n            return [3 /*break*/, 4];\n          case 7:\n            return [3 /*break*/, 10];\n          case 8:\n            e_1_1 = _e.sent();\n            e_1 = {\n              error: e_1_1\n            };\n            return [3 /*break*/, 10];\n          case 9:\n            try {\n              if (createOrderInput_1_1 && !createOrderInput_1_1.done && (_c = createOrderInput_1.return)) _c.call(createOrderInput_1);\n            } finally {\n              if (e_1) throw e_1.error;\n            }\n            return [7 /*endfinally*/];\n          case 10:\n            createBulkOrdersAction = {\n              type: \"createBulk\",\n              getMessageToSign: function getMessageToSign() {\n                return _this._getBulkMessageToSign(allOrderComponents);\n              },\n              createBulkOrders: function createBulkOrders() {\n                return __awaiter(_this, void 0, void 0, function () {\n                  var orders;\n                  return __generator(this, function (_a) {\n                    switch (_a.label) {\n                      case 0:\n                        return [4 /*yield*/, this.signBulkOrder(allOrderComponents, offerer)];\n                      case 1:\n                        orders = _a.sent();\n                        return [2 /*return*/, orders];\n                    }\n                  });\n                });\n              }\n            };\n            actions = __spreadArray(__spreadArray([], __read(allApprovalActions), false), [createBulkOrdersAction], false);\n            return [2 /*return*/, {\n              actions: actions,\n              executeAllActions: function executeAllActions() {\n                return (0, usecase_1.executeAllActions)(actions);\n              }\n            }];\n        }\n      });\n    });\n  };\n  /**\n   * Formats an order for creation.\n   */\n  Seaport.prototype._formatOrder = function (signer, offerer, exactApproval, _a) {\n    var _b;\n    var _c = _a.conduitKey,\n      conduitKey = _c === void 0 ? this.defaultConduitKey : _c,\n      _d = _a.zone,\n      zone = _d === void 0 ? ethers_1.ethers.constants.AddressZero : _d,\n      _e = _a.startTime,\n      startTime = _e === void 0 ? Math.floor(Date.now() / 1000).toString() : _e,\n      _f = _a.endTime,\n      endTime = _f === void 0 ? constants_1.MAX_INT.toString() : _f,\n      offer = _a.offer,\n      consideration = _a.consideration,\n      counter = _a.counter,\n      allowPartialFills = _a.allowPartialFills,\n      restrictedByZone = _a.restrictedByZone,\n      fees = _a.fees,\n      domain = _a.domain,\n      salt = _a.salt;\n    return __awaiter(this, void 0, void 0, function () {\n      var offerItems, considerationItems, currencies, totalCurrencyAmount, operator, orderType, considerationItemsWithFees, saltFollowingConditional, orderComponents, _g, approvalActions, balancesAndApprovals, insufficientApprovals, approvals;\n      var _h;\n      return __generator(this, function (_j) {\n        switch (_j.label) {\n          case 0:\n            offerItems = offer.map(order_1.mapInputItemToOfferItem);\n            considerationItems = __spreadArray([], __read(consideration.map(function (consideration) {\n              var _a;\n              return __assign(__assign({}, (0, order_1.mapInputItemToOfferItem)(consideration)), {\n                recipient: (_a = consideration.recipient) !== null && _a !== void 0 ? _a : offerer\n              });\n            })), false);\n            if (!(0, order_1.areAllCurrenciesSame)({\n              offer: offerItems,\n              consideration: considerationItems\n            })) {\n              throw new Error(\"All currency tokens in the order must be the same token\");\n            }\n            currencies = __spreadArray(__spreadArray([], __read(offerItems), false), __read(considerationItems), false).filter(item_1.isCurrencyItem);\n            totalCurrencyAmount = (0, order_1.totalItemsAmount)(currencies);\n            operator = this.config.conduitKeyToConduit[conduitKey];\n            orderType = this._getOrderTypeFromOrderOptions({\n              allowPartialFills: allowPartialFills,\n              restrictedByZone: restrictedByZone\n            });\n            considerationItemsWithFees = __spreadArray(__spreadArray([], __read((0, order_1.deductFees)(considerationItems, fees)), false), __read(currencies.length ? (_b = fees === null || fees === void 0 ? void 0 : fees.map(function (fee) {\n              return (0, order_1.feeToConsiderationItem)({\n                fee: fee,\n                token: currencies[0].token,\n                baseAmount: totalCurrencyAmount.startAmount,\n                baseEndAmount: totalCurrencyAmount.endAmount\n              });\n            })) !== null && _b !== void 0 ? _b : [] : []), false);\n            saltFollowingConditional = salt || (domain ? (0, order_1.generateRandomSaltWithDomain)(domain) : (0, order_1.generateRandomSalt)());\n            _h = {\n              offerer: offerer,\n              zone: zone,\n              zoneHash: ethers_1.ethers.constants.HashZero,\n              startTime: startTime,\n              endTime: endTime,\n              orderType: orderType,\n              offer: offerItems,\n              consideration: considerationItemsWithFees,\n              totalOriginalConsiderationItems: considerationItemsWithFees.length,\n              salt: saltFollowingConditional,\n              conduitKey: conduitKey\n            };\n            if (!(counter !== null && counter !== void 0)) return [3 /*break*/, 1];\n            _g = counter;\n            return [3 /*break*/, 3];\n          case 1:\n            return [4 /*yield*/, this.getCounter(offerer)];\n          case 2:\n            _g = _j.sent();\n            _j.label = 3;\n          case 3:\n            orderComponents = (_h.counter = _g.toString(), _h);\n            approvalActions = [];\n            if (!this.config.balanceAndApprovalChecksOnOrderCreation) return [3 /*break*/, 6];\n            return [4 /*yield*/, (0, balanceAndApprovalCheck_1.getBalancesAndApprovals)({\n              owner: offerer,\n              items: offerItems,\n              criterias: [],\n              multicallProvider: this.multicallProvider,\n              operator: operator\n            })];\n          case 4:\n            balancesAndApprovals = _j.sent();\n            insufficientApprovals = (0, balanceAndApprovalCheck_1.validateOfferBalancesAndApprovals)({\n              offer: offerItems,\n              criterias: [],\n              balancesAndApprovals: balancesAndApprovals,\n              throwOnInsufficientBalances: true,\n              operator: operator\n            });\n            return [4 /*yield*/, (0, approval_1.getApprovalActions)(insufficientApprovals, exactApproval, signer)];\n          case 5:\n            approvals = _j.sent();\n            approvalActions.push.apply(approvalActions, __spreadArray([], __read(approvals), false));\n            _j.label = 6;\n          case 6:\n            return [2 /*return*/, {\n              orderComponents: orderComponents,\n              approvalActions: approvalActions\n            }];\n        }\n      });\n    });\n  };\n  Seaport.prototype._getSigner = function (accountAddress) {\n    if (this.signer) {\n      return this.signer;\n    }\n    if (!(this.provider instanceof ethers_1.providers.JsonRpcProvider)) {\n      throw new Error(\"Either signer or a JsonRpcProvider must be provided\");\n    }\n    return this.provider.getSigner(accountAddress);\n  };\n  /**\n   * Returns the corresponding order type based on whether it allows partial fills and is restricted by zone\n   *\n   * @param input\n   * @param input.allowPartialFills Whether or not the order can be partially filled\n   * @param input.restrictedByZone Whether or not the order can only be filled/cancelled by the zone\n   * @returns the order type\n   */\n  Seaport.prototype._getOrderTypeFromOrderOptions = function (_a) {\n    var allowPartialFills = _a.allowPartialFills,\n      restrictedByZone = _a.restrictedByZone;\n    if (allowPartialFills) {\n      return restrictedByZone ? constants_1.OrderType.PARTIAL_RESTRICTED : constants_1.OrderType.PARTIAL_OPEN;\n    }\n    return restrictedByZone ? constants_1.OrderType.FULL_RESTRICTED : constants_1.OrderType.FULL_OPEN;\n  };\n  /**\n   * Returns the domain data used when signing typed data\n   * @returns domain data\n   */\n  Seaport.prototype._getDomainData = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var chainId;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.provider.getNetwork()];\n          case 1:\n            chainId = _a.sent().chainId;\n            return [2 /*return*/, {\n              name: constants_1.SEAPORT_CONTRACT_NAME,\n              version: this.config.seaportVersion === \"1.4\" ? constants_1.SEAPORT_CONTRACT_VERSION_V1_4 : constants_1.SEAPORT_CONTRACT_VERSION,\n              chainId: chainId,\n              verifyingContract: this.contract.address\n            }];\n        }\n      });\n    });\n  };\n  /**\n   * Returns a raw message to be signed using EIP-712\n   * @param orderParameters order parameter struct\n   * @returns JSON string of the message to be signed\n   */\n  Seaport.prototype._getMessageToSign = function (orderComponents) {\n    return __awaiter(this, void 0, void 0, function () {\n      var domainData;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this._getDomainData()];\n          case 1:\n            domainData = _a.sent();\n            return [2 /*return*/, JSON.stringify(utils_1._TypedDataEncoder.getPayload(domainData, constants_1.EIP_712_ORDER_TYPE, orderComponents))];\n        }\n      });\n    });\n  };\n  /**\n   * Returns a raw bulk order message to be signed using EIP-712\n   * @param orderParameters order parameter struct\n   * @param counter counter of the order\n   * @returns JSON string of the message to be signed\n   */\n  Seaport.prototype._getBulkMessageToSign = function (orderComponents) {\n    return __awaiter(this, void 0, void 0, function () {\n      var domainData, tree, bulkOrderType, chunks;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this._getDomainData()];\n          case 1:\n            domainData = _a.sent();\n            tree = (0, bulk_orders_1.getBulkOrderTree)(orderComponents);\n            bulkOrderType = tree.types;\n            chunks = tree.getDataToSign();\n            return [2 /*return*/, JSON.stringify(utils_1._TypedDataEncoder.getPayload(domainData, bulkOrderType, {\n              tree: chunks\n            }))];\n        }\n      });\n    });\n  };\n  /**\n   * Submits a request to your provider to sign the order. Signed orders are used for off-chain order books.\n   * @param orderComponents standard order parameter struct\n   * @param accountAddress optional account address from which to sign the order with.\n   * @returns the order signature\n   */\n  Seaport.prototype.signOrder = function (orderComponents, accountAddress) {\n    return __awaiter(this, void 0, void 0, function () {\n      var signer, domainData, signature;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            signer = this._getSigner(accountAddress);\n            return [4 /*yield*/, this._getDomainData()];\n          case 1:\n            domainData = _a.sent();\n            return [4 /*yield*/, signer._signTypedData(domainData, constants_1.EIP_712_ORDER_TYPE, orderComponents)];\n          case 2:\n            signature = _a.sent();\n            // Use EIP-2098 compact signatures to save gas.\n            return [2 /*return*/, ethers_1.ethers.utils.splitSignature(signature).compact];\n        }\n      });\n    });\n  };\n  /**\n   * Submits a request to your provider to sign the bulk order. Signed orders are used for off-chain order books.\n   * @param orderComponents standard order components struct\n   * @param accountAddress optional account address from which to sign the order with.\n   * @returns the orders with their signatures\n   */\n  Seaport.prototype.signBulkOrder = function (orderComponents, accountAddress) {\n    return __awaiter(this, void 0, void 0, function () {\n      var signer, domainData, tree, bulkOrderType, chunks, value, signature, orders;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            signer = this._getSigner(accountAddress);\n            return [4 /*yield*/, this._getDomainData()];\n          case 1:\n            domainData = _a.sent();\n            tree = (0, bulk_orders_1.getBulkOrderTree)(orderComponents);\n            bulkOrderType = tree.types;\n            chunks = tree.getDataToSign();\n            value = {\n              tree: chunks\n            };\n            return [4 /*yield*/, signer._signTypedData(domainData, bulkOrderType, value)];\n          case 2:\n            signature = _a.sent();\n            // Use EIP-2098 compact signatures to save gas.\n            signature = ethers_1.ethers.utils.splitSignature(signature).compact;\n            orders = orderComponents.map(function (parameters, i) {\n              return {\n                parameters: parameters,\n                signature: tree.getEncodedProofAndSignature(i, signature)\n              };\n            });\n            return [2 /*return*/, orders];\n        }\n      });\n    });\n  };\n  /**\n   * Cancels a list of orders so that they are no longer fulfillable.\n   *\n   * @param orders list of order components\n   * @param accountAddress optional account address from which to cancel the orders from.\n   * @param domain optional domain to be hashed and appended to calldata\n   * @returns the set of transaction methods that can be used\n   */\n  Seaport.prototype.cancelOrders = function (orders, accountAddress, domain) {\n    var signer = this._getSigner(accountAddress);\n    return (0, usecase_1.getTransactionMethods)(this.contract.connect(signer), \"cancel\", [orders], domain);\n  };\n  /**\n   * Bulk cancels all existing orders for a given account\n   * @param offerer the account to bulk cancel orders on\n   * @param domain optional domain to be hashed and appended to calldata\n   * @returns the set of transaction methods that can be used\n   */\n  Seaport.prototype.bulkCancelOrders = function (offerer, domain) {\n    var signer = this._getSigner(offerer);\n    return (0, usecase_1.getTransactionMethods)(this.contract.connect(signer), \"incrementCounter\", [], domain);\n  };\n  /**\n   * Approves a list of orders on-chain. This allows accounts to fulfill the order without requiring\n   * a signature. Can also check if an order is valid using `callStatic`\n   * @param orders list of order structs\n   * @param accountAddress optional account address to approve orders.\n   * @param domain optional domain to be hashed and appended to calldata\n   * @returns the set of transaction methods that can be used\n   */\n  Seaport.prototype.validate = function (orders, accountAddress, domain) {\n    var signer = this._getSigner(accountAddress);\n    return (0, usecase_1.getTransactionMethods)(this.contract.connect(signer), \"validate\", [orders], domain);\n  };\n  /**\n   * Returns the order status given an order hash\n   * @param orderHash the hash of the order\n   * @returns an order status struct\n   */\n  Seaport.prototype.getOrderStatus = function (orderHash) {\n    return this.contract.getOrderStatus(orderHash);\n  };\n  /**\n   * Gets the counter of a given offerer\n   * @param offerer the offerer to get the counter of\n   * @returns counter as a number\n   */\n  Seaport.prototype.getCounter = function (offerer) {\n    return this.contract.getCounter(offerer);\n  };\n  /**\n   * Fulfills an order through either the basic method or the standard method\n   * Units to fill are denominated by the max possible size of the order, which is the greatest common denominator (GCD).\n   * We expose a helper to get this: getMaximumSizeForOrder\n   * i.e. If the maximum size of an order is 4, supplying 2 as the units to fulfill will fill half of the order: ;\n   * @param input\n   * @param input.order The standard order struct\n   * @param input.unitsToFill the number of units to fill for the given order. Only used if you wish to partially fill an order\n   * @param input.offerCriteria an array of criteria with length equal to the number of offer criteria items\n   * @param input.considerationCriteria an array of criteria with length equal to the number of consideration criteria items\n   * @param input.tips an array of optional condensed consideration items to be added onto a fulfillment\n   * @param input.extraData extra data supplied to the order\n   * @param input.accountAddress optional address from which to fulfill the order from\n   * @param input.conduitKey the conduitKey to source approvals from\n   * @param input.recipientAddress optional recipient to forward the offer to as opposed to the fulfiller.\n   *                               Defaults to the zero address which means the offer goes to the fulfiller\n   * @param input.domain optional domain to be hashed and appended to calldata\n   * @param input.exactApproval optional boolean to indicate whether the approval should be exact or not\n   * @returns a use case containing the set of approval actions and fulfillment action\n   */\n  Seaport.prototype.fulfillOrder = function (_a) {\n    var order = _a.order,\n      unitsToFill = _a.unitsToFill,\n      _b = _a.offerCriteria,\n      offerCriteria = _b === void 0 ? [] : _b,\n      _c = _a.considerationCriteria,\n      considerationCriteria = _c === void 0 ? [] : _c,\n      _d = _a.tips,\n      tips = _d === void 0 ? [] : _d,\n      _e = _a.extraData,\n      extraData = _e === void 0 ? \"0x\" : _e,\n      accountAddress = _a.accountAddress,\n      _f = _a.conduitKey,\n      conduitKey = _f === void 0 ? this.defaultConduitKey : _f,\n      _g = _a.recipientAddress,\n      recipientAddress = _g === void 0 ? ethers_1.ethers.constants.AddressZero : _g,\n      _h = _a.domain,\n      domain = _h === void 0 ? \"\" : _h,\n      _j = _a.exactApproval,\n      exactApproval = _j === void 0 ? false : _j;\n    return __awaiter(this, void 0, void 0, function () {\n      var orderParameters, offerer, offer, consideration, fulfiller, fulfillerAddress, offererOperator, fulfillerOperator, _k, offererBalancesAndApprovals, fulfillerBalancesAndApprovals, currentBlock, orderStatus, currentBlockTimestamp, totalFilled, totalSize, sanitizedOrder, timeBasedItemParams, tipConsiderationItems, isRecipientSelf;\n      return __generator(this, function (_l) {\n        switch (_l.label) {\n          case 0:\n            orderParameters = order.parameters;\n            offerer = orderParameters.offerer, offer = orderParameters.offer, consideration = orderParameters.consideration;\n            fulfiller = this._getSigner(accountAddress);\n            return [4 /*yield*/, fulfiller.getAddress()];\n          case 1:\n            fulfillerAddress = _l.sent();\n            offererOperator = this.config.conduitKeyToConduit[orderParameters.conduitKey];\n            fulfillerOperator = this.config.conduitKeyToConduit[conduitKey];\n            return [4 /*yield*/, Promise.all([(0, balanceAndApprovalCheck_1.getBalancesAndApprovals)({\n              owner: offerer,\n              items: offer,\n              criterias: offerCriteria,\n              multicallProvider: this.multicallProvider,\n              operator: offererOperator\n            }),\n            // Get fulfiller balances and approvals of all items in the set, as offer items\n            // may be received by the fulfiller for standard fulfills\n            (0, balanceAndApprovalCheck_1.getBalancesAndApprovals)({\n              owner: fulfillerAddress,\n              items: __spreadArray(__spreadArray([], __read(offer), false), __read(consideration), false),\n              criterias: __spreadArray(__spreadArray([], __read(offerCriteria), false), __read(considerationCriteria), false),\n              multicallProvider: this.multicallProvider,\n              operator: fulfillerOperator\n            }), this.multicallProvider.getBlock(\"latest\"), this.getOrderStatus(this.getOrderHash(orderParameters))])];\n          case 2:\n            _k = __read.apply(void 0, [_l.sent(), 4]), offererBalancesAndApprovals = _k[0], fulfillerBalancesAndApprovals = _k[1], currentBlock = _k[2], orderStatus = _k[3];\n            currentBlockTimestamp = currentBlock.timestamp;\n            totalFilled = orderStatus.totalFilled, totalSize = orderStatus.totalSize;\n            sanitizedOrder = (0, fulfill_1.validateAndSanitizeFromOrderStatus)(order, orderStatus);\n            timeBasedItemParams = {\n              startTime: sanitizedOrder.parameters.startTime,\n              endTime: sanitizedOrder.parameters.endTime,\n              currentBlockTimestamp: currentBlockTimestamp,\n              ascendingAmountTimestampBuffer: this.config.ascendingAmountFulfillmentBuffer\n            };\n            tipConsiderationItems = tips.map(function (tip) {\n              return __assign(__assign({}, (0, order_1.mapInputItemToOfferItem)(tip)), {\n                recipient: tip.recipient\n              });\n            });\n            isRecipientSelf = recipientAddress === ethers_1.ethers.constants.AddressZero;\n            // We use basic fulfills as they are more optimal for simple and \"hot\" use cases\n            // We cannot use basic fulfill if user is trying to partially fill though.\n            if (!unitsToFill && isRecipientSelf && (0, fulfill_1.shouldUseBasicFulfill)(sanitizedOrder.parameters, totalFilled)) {\n              // TODO: Use fulfiller proxy if there are approvals needed directly, but none needed for proxy\n              return [2 /*return*/, (0, fulfill_1.fulfillBasicOrder)({\n                order: sanitizedOrder,\n                seaportContract: this.contract,\n                offererBalancesAndApprovals: offererBalancesAndApprovals,\n                fulfillerBalancesAndApprovals: fulfillerBalancesAndApprovals,\n                timeBasedItemParams: timeBasedItemParams,\n                conduitKey: conduitKey,\n                offererOperator: offererOperator,\n                fulfillerOperator: fulfillerOperator,\n                signer: fulfiller,\n                tips: tipConsiderationItems,\n                domain: domain\n              }, exactApproval)];\n            }\n            // Else, we fallback to the standard fulfill order\n            return [2 /*return*/, (0, fulfill_1.fulfillStandardOrder)({\n              order: sanitizedOrder,\n              unitsToFill: unitsToFill,\n              totalFilled: totalFilled,\n              totalSize: totalSize.eq(0) ? (0, item_1.getMaximumSizeForOrder)(sanitizedOrder) : totalSize,\n              offerCriteria: offerCriteria,\n              considerationCriteria: considerationCriteria,\n              tips: tipConsiderationItems,\n              extraData: extraData,\n              seaportContract: this.contract,\n              offererBalancesAndApprovals: offererBalancesAndApprovals,\n              fulfillerBalancesAndApprovals: fulfillerBalancesAndApprovals,\n              timeBasedItemParams: timeBasedItemParams,\n              conduitKey: conduitKey,\n              signer: fulfiller,\n              offererOperator: offererOperator,\n              fulfillerOperator: fulfillerOperator,\n              recipientAddress: recipientAddress,\n              domain: domain\n            }, exactApproval)];\n        }\n      });\n    });\n  };\n  /**\n   * Fulfills an order through best-effort fashion. Orders that fail will not revert the whole transaction\n   * unless there's an issue with approvals or balance checks\n   * @param input\n   * @param input.fulfillOrderDetails list of helper order details\n   * @param input.accountAddress the account to fulfill orders on\n   * @param input.conduitKey the key from which to source approvals from\n   * @param input.recipientAddress optional recipient to forward the offer to as opposed to the fulfiller.\n   *                               Defaults to the zero address which means the offer goes to the fulfiller\n   * @param input.domain optional domain to be hashed and appended to calldata\n   * @param input.exactApproval optional boolean to indicate whether the approval should be exact or not\n   * @returns a use case containing the set of approval actions and fulfillment action\n   */\n  Seaport.prototype.fulfillOrders = function (_a) {\n    var fulfillOrderDetails = _a.fulfillOrderDetails,\n      accountAddress = _a.accountAddress,\n      _b = _a.conduitKey,\n      conduitKey = _b === void 0 ? this.defaultConduitKey : _b,\n      _c = _a.recipientAddress,\n      recipientAddress = _c === void 0 ? ethers_1.ethers.constants.AddressZero : _c,\n      _d = _a.domain,\n      domain = _d === void 0 ? \"\" : _d,\n      _e = _a.exactApproval,\n      exactApproval = _e === void 0 ? false : _e;\n    return __awaiter(this, void 0, void 0, function () {\n      var fulfiller, fulfillerAddress, allOffererOperators, fulfillerOperator, allOfferItems, allConsiderationItems, allOfferCriteria, allConsiderationCriteria, _f, offerersBalancesAndApprovals, fulfillerBalancesAndApprovals, currentBlock, orderStatuses, ordersMetadata;\n      var _this = this;\n      return __generator(this, function (_g) {\n        switch (_g.label) {\n          case 0:\n            fulfiller = this._getSigner(accountAddress);\n            return [4 /*yield*/, fulfiller.getAddress()];\n          case 1:\n            fulfillerAddress = _g.sent();\n            allOffererOperators = fulfillOrderDetails.map(function (_a) {\n              var order = _a.order;\n              return _this.config.conduitKeyToConduit[order.parameters.conduitKey];\n            });\n            fulfillerOperator = this.config.conduitKeyToConduit[conduitKey];\n            allOfferItems = fulfillOrderDetails.flatMap(function (_a) {\n              var order = _a.order;\n              return order.parameters.offer;\n            });\n            allConsiderationItems = fulfillOrderDetails.flatMap(function (_a) {\n              var order = _a.order;\n              return order.parameters.consideration;\n            });\n            allOfferCriteria = fulfillOrderDetails.flatMap(function (_a) {\n              var _b = _a.offerCriteria,\n                offerCriteria = _b === void 0 ? [] : _b;\n              return offerCriteria;\n            });\n            allConsiderationCriteria = fulfillOrderDetails.flatMap(function (_a) {\n              var _b = _a.considerationCriteria,\n                considerationCriteria = _b === void 0 ? [] : _b;\n              return considerationCriteria;\n            });\n            return [4 /*yield*/, Promise.all([Promise.all(fulfillOrderDetails.map(function (_a, i) {\n              var order = _a.order,\n                _b = _a.offerCriteria,\n                offerCriteria = _b === void 0 ? [] : _b;\n              return (0, balanceAndApprovalCheck_1.getBalancesAndApprovals)({\n                owner: order.parameters.offerer,\n                items: order.parameters.offer,\n                criterias: offerCriteria,\n                operator: allOffererOperators[i],\n                multicallProvider: _this.multicallProvider\n              });\n            })),\n            // Get fulfiller balances and approvals of all items in the set, as offer items\n            // may be received by the fulfiller for standard fulfills\n            (0, balanceAndApprovalCheck_1.getBalancesAndApprovals)({\n              owner: fulfillerAddress,\n              items: __spreadArray(__spreadArray([], __read(allOfferItems), false), __read(allConsiderationItems), false),\n              criterias: __spreadArray(__spreadArray([], __read(allOfferCriteria), false), __read(allConsiderationCriteria), false),\n              operator: fulfillerOperator,\n              multicallProvider: this.multicallProvider\n            }), this.multicallProvider.getBlock(\"latest\"), Promise.all(fulfillOrderDetails.map(function (_a) {\n              var order = _a.order;\n              return _this.getOrderStatus(_this.getOrderHash(order.parameters));\n            }))])];\n          case 2:\n            _f = __read.apply(void 0, [_g.sent(), 4]), offerersBalancesAndApprovals = _f[0], fulfillerBalancesAndApprovals = _f[1], currentBlock = _f[2], orderStatuses = _f[3];\n            ordersMetadata = fulfillOrderDetails.map(function (orderDetails, index) {\n              var _a, _b, _c, _d, _e;\n              return {\n                order: orderDetails.order,\n                unitsToFill: orderDetails.unitsToFill,\n                orderStatus: orderStatuses[index],\n                offerCriteria: (_a = orderDetails.offerCriteria) !== null && _a !== void 0 ? _a : [],\n                considerationCriteria: (_b = orderDetails.considerationCriteria) !== null && _b !== void 0 ? _b : [],\n                tips: (_d = (_c = orderDetails.tips) === null || _c === void 0 ? void 0 : _c.map(function (tip) {\n                  return __assign(__assign({}, (0, order_1.mapInputItemToOfferItem)(tip)), {\n                    recipient: tip.recipient\n                  });\n                })) !== null && _d !== void 0 ? _d : [],\n                extraData: (_e = orderDetails.extraData) !== null && _e !== void 0 ? _e : \"0x\",\n                offererBalancesAndApprovals: offerersBalancesAndApprovals[index],\n                offererOperator: allOffererOperators[index]\n              };\n            });\n            return [2 /*return*/, (0, fulfill_1.fulfillAvailableOrders)({\n              ordersMetadata: ordersMetadata,\n              seaportContract: this.contract,\n              fulfillerBalancesAndApprovals: fulfillerBalancesAndApprovals,\n              currentBlockTimestamp: currentBlock.timestamp,\n              ascendingAmountTimestampBuffer: this.config.ascendingAmountFulfillmentBuffer,\n              fulfillerOperator: fulfillerOperator,\n              signer: fulfiller,\n              conduitKey: conduitKey,\n              recipientAddress: recipientAddress,\n              domain: domain,\n              exactApproval: exactApproval\n            })];\n        }\n      });\n    });\n  };\n  /**\n   * NOTE: Largely incomplete. Does NOT do any balance or approval checks.\n   * Just exposes the bare bones matchOrders where clients will have to supply\n   * their own overrides as needed.\n   * @param input\n   * @param input.orders the list of orders to match\n   * @param input.fulfillments the list of fulfillments to match offer and considerations\n   * @param input.overrides any overrides the client wants, will need to pass in value for matching orders with ETH.\n   * @param input.accountAddress Optional address for which to match the order with\n   * @param input.domain optional domain to be hashed and appended to calldata\n   * @returns set of transaction methods for matching orders\n   */\n  Seaport.prototype.matchOrders = function (_a) {\n    var orders = _a.orders,\n      fulfillments = _a.fulfillments,\n      overrides = _a.overrides,\n      accountAddress = _a.accountAddress,\n      _b = _a.domain,\n      domain = _b === void 0 ? \"\" : _b;\n    var signer = this._getSigner(accountAddress);\n    return (0, usecase_1.getTransactionMethods)(this.contract.connect(signer), \"matchOrders\", [orders, fulfillments, overrides], domain);\n  };\n  Seaport.prototype.setDomain = function (domain, accountAddress) {\n    var signer = this._getSigner(accountAddress);\n    return (0, usecase_1.getTransactionMethods)(this.domainRegistry.connect(signer), \"setDomain\", [domain]);\n  };\n  Seaport.prototype.getNumberOfDomains = function (tag) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, this.domainRegistry.getNumberOfDomains(tag)];\n      });\n    });\n  };\n  Seaport.prototype.getDomain = function (tag, index) {\n    return this.domainRegistry.getDomain(tag, index);\n  };\n  Seaport.prototype.getDomains = function (tag, shouldThrow) {\n    return __awaiter(this, void 0, void 0, function () {\n      var error_1, totalDomains, domainArray;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 1,, 3]);\n            if (shouldThrow) {\n              throw Error;\n            }\n            return [2 /*return*/, this.domainRegistry.getDomains(tag)];\n          case 1:\n            error_1 = _a.sent();\n            return [4 /*yield*/, this.domainRegistry.getNumberOfDomains(tag)];\n          case 2:\n            totalDomains = _a.sent().toNumber();\n            domainArray = Promise.all(__spreadArray([], __read(Array(totalDomains).keys()), false).map(function (i) {\n              return _this.domainRegistry.getDomain(tag, i);\n            }));\n            return [2 /*return*/, domainArray];\n          case 3:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  return Seaport;\n}();\nexports.Seaport = Seaport;","map":null,"metadata":{},"sourceType":"script"}