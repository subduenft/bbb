{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TokenStandardVersion = exports.WyvernSchemaName = exports.AssetContractType = exports.SaleKind = exports.FeeMethod = exports.OrderSide = exports.EventType = exports.Network = exports.HowToCall = void 0;\nvar types_1 = require(\"wyvern-js/lib/types\");\nObject.defineProperty(exports, \"HowToCall\", {\n  enumerable: true,\n  get: function get() {\n    return types_1.HowToCall;\n  }\n});\nObject.defineProperty(exports, \"Network\", {\n  enumerable: true,\n  get: function get() {\n    return types_1.Network;\n  }\n});\n/**\n * Events emitted by the SDK. There are five types:\n * 1. Transaction events, which tell you when a new transaction was\n *    created, confirmed, denied, or failed.\n * 2. pre-transaction events, which are named (like \"WrapEth\") and indicate\n *    that Web3 is asking for a signature on a transaction that needs to occur before\n *    an order is made or fulfilled. This includes approval events and account\n *    initialization.\n * 3. Basic actions: matching, cancelling, and creating orders.\n *    The \"CreateOrder\" event fires when a signature is being prompted\n *    to create an off-chain order. The \"OrderDenied\" event fires when a signature\n *    request is denied by the user.\n * 4. The \"TransferAll\" event, which fires when a user is about to directly\n *    transfer one or more assets to another account\n */\nvar EventType;\n(function (EventType) {\n  // Transactions and signature requests\n  EventType[\"TransactionCreated\"] = \"TransactionCreated\";\n  EventType[\"TransactionConfirmed\"] = \"TransactionConfirmed\";\n  EventType[\"TransactionDenied\"] = \"TransactionDenied\";\n  EventType[\"TransactionFailed\"] = \"TransactionFailed\";\n  // Pre-transaction events\n  EventType[\"InitializeAccount\"] = \"InitializeAccount\";\n  EventType[\"WrapEth\"] = \"WrapEth\";\n  EventType[\"UnwrapWeth\"] = \"UnwrapWeth\";\n  EventType[\"ApproveCurrency\"] = \"ApproveCurrency\";\n  EventType[\"ApproveAsset\"] = \"ApproveAsset\";\n  EventType[\"ApproveAllAssets\"] = \"ApproveAllAssets\";\n  EventType[\"UnapproveCurrency\"] = \"UnapproveCurrency\";\n  // Basic actions: matching orders, creating orders, and cancelling orders\n  EventType[\"MatchOrders\"] = \"MatchOrders\";\n  EventType[\"CancelOrder\"] = \"CancelOrder\";\n  EventType[\"BulkCancelExistingOrders\"] = \"BulkCancelExistingOrders\";\n  EventType[\"ApproveOrder\"] = \"ApproveOrder\";\n  EventType[\"CreateOrder\"] = \"CreateOrder\";\n  // When the signature request for an order is denied\n  EventType[\"OrderDenied\"] = \"OrderDenied\";\n  // When transferring one or more assets\n  EventType[\"TransferAll\"] = \"TransferAll\";\n  EventType[\"TransferOne\"] = \"TransferOne\";\n  // When wrapping or unwrapping NFTs\n  EventType[\"WrapAssets\"] = \"WrapAssets\";\n  EventType[\"UnwrapAssets\"] = \"UnwrapAssets\";\n  EventType[\"LiquidateAssets\"] = \"LiquidateAssets\";\n  EventType[\"PurchaseAssets\"] = \"PurchaseAssets\";\n})(EventType = exports.EventType || (exports.EventType = {}));\n/**\n * Wyvern order side: buy or sell.\n */\nvar OrderSide;\n(function (OrderSide) {\n  OrderSide[OrderSide[\"Buy\"] = 0] = \"Buy\";\n  OrderSide[OrderSide[\"Sell\"] = 1] = \"Sell\";\n})(OrderSide = exports.OrderSide || (exports.OrderSide = {}));\n/**\n * Wyvern fee method\n * ProtocolFee: Charge maker fee to seller and charge taker fee to buyer.\n * SplitFee: Maker fees are deducted from the token amount that the maker receives. Taker fees are extra tokens that must be paid by the taker.\n */\nvar FeeMethod;\n(function (FeeMethod) {\n  FeeMethod[FeeMethod[\"ProtocolFee\"] = 0] = \"ProtocolFee\";\n  FeeMethod[FeeMethod[\"SplitFee\"] = 1] = \"SplitFee\";\n})(FeeMethod = exports.FeeMethod || (exports.FeeMethod = {}));\n/**\n * Wyvern: type of sale. Fixed or Dutch auction\n * Note: not imported from wyvern.js because it uses\n * EnglishAuction as 1 and DutchAuction as 2\n */\nvar SaleKind;\n(function (SaleKind) {\n  SaleKind[SaleKind[\"FixedPrice\"] = 0] = \"FixedPrice\";\n  SaleKind[SaleKind[\"DutchAuction\"] = 1] = \"DutchAuction\";\n})(SaleKind = exports.SaleKind || (exports.SaleKind = {}));\n/**\n * Types of asset contracts\n * Given by the asset_contract_type in the OpenSea API\n */\nvar AssetContractType;\n(function (AssetContractType) {\n  AssetContractType[\"Fungible\"] = \"fungible\";\n  AssetContractType[\"SemiFungible\"] = \"semi-fungible\";\n  AssetContractType[\"NonFungible\"] = \"non-fungible\";\n  AssetContractType[\"Unknown\"] = \"unknown\";\n})(AssetContractType = exports.AssetContractType || (exports.AssetContractType = {}));\n// Wyvern Schemas (see https://github.com/ProjectOpenSea/wyvern-schemas)\nvar WyvernSchemaName;\n(function (WyvernSchemaName) {\n  WyvernSchemaName[\"ERC20\"] = \"ERC20\";\n  WyvernSchemaName[\"ERC721\"] = \"ERC721\";\n  WyvernSchemaName[\"ERC721v3\"] = \"ERC721v3\";\n  WyvernSchemaName[\"ERC1155\"] = \"ERC1155\";\n  WyvernSchemaName[\"LegacyEnjin\"] = \"Enjin\";\n  WyvernSchemaName[\"ENSShortNameAuction\"] = \"ENSShortNameAuction\";\n  // CryptoPunks = 'CryptoPunks'\n})(WyvernSchemaName = exports.WyvernSchemaName || (exports.WyvernSchemaName = {}));\n/**\n * The NFT version that this contract uses.\n * ERC721 versions are:\n * 1.0: CryptoKitties and early 721s, which lack approve-all and\n *      have problems calling `transferFrom` from the owner's account.\n * 2.0: CryptoSaga and others that lack `transferFrom` and have\n *      `takeOwnership` instead\n * 3.0: The current OpenZeppelin standard:\n *      https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/token/ERC721/ERC721.sol\n * Special cases:\n * locked: When the transfer function has been locked by the dev\n */\nvar TokenStandardVersion;\n(function (TokenStandardVersion) {\n  TokenStandardVersion[\"Unsupported\"] = \"unsupported\";\n  TokenStandardVersion[\"Locked\"] = \"locked\";\n  TokenStandardVersion[\"Enjin\"] = \"1155-1.0\";\n  TokenStandardVersion[\"ERC721v1\"] = \"1.0\";\n  TokenStandardVersion[\"ERC721v2\"] = \"2.0\";\n  TokenStandardVersion[\"ERC721v3\"] = \"3.0\";\n})(TokenStandardVersion = exports.TokenStandardVersion || (exports.TokenStandardVersion = {}));\n/**\n * Defines set of possible auctions types\n */\nvar AuctionType;\n(function (AuctionType) {\n  AuctionType[\"Dutch\"] = \"dutch\";\n  AuctionType[\"English\"] = \"english\";\n  AuctionType[\"MinPrice\"] = \"min_price\";\n})(AuctionType || (AuctionType = {}));\n/**\n * Defines the possible types of asset events that can take place\n */\nvar AssetEventType;\n(function (AssetEventType) {\n  AssetEventType[\"AuctionCreated\"] = \"created\";\n  AssetEventType[\"AuctionSuccessful\"] = \"successful\";\n  AssetEventType[\"AuctionCancelled\"] = \"cancelled\";\n  AssetEventType[\"OfferEntered\"] = \"offer_entered\";\n  AssetEventType[\"BidEntered\"] = \"bid_entered\";\n  AssetEventType[\"BidWithdraw\"] = \"bid_withdraw\";\n  AssetEventType[\"AssetTransfer\"] = \"transfer\";\n  AssetEventType[\"AssetApprove\"] = \"approve\";\n  AssetEventType[\"CompositionCreated\"] = \"composition_created\";\n  AssetEventType[\"Custom\"] = \"custom\";\n  AssetEventType[\"Payout\"] = \"payout\";\n})(AssetEventType || (AssetEventType = {}));","map":null,"metadata":{},"sourceType":"script"}