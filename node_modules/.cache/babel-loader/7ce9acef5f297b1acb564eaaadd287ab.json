{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function sent() {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar BN = require(\"bn.js\");\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\nvar exceptions_1 = require(\"../exceptions\");\nvar precompiles_1 = require(\"./precompiles\");\nvar eei_1 = require(\"./eei\");\nvar interpreter_1 = require(\"./interpreter\");\nvar Block = require('ethereumjs-block');\nfunction OOGResult(gasLimit) {\n  return {\n    returnValue: Buffer.alloc(0),\n    gasUsed: gasLimit,\n    exceptionError: new exceptions_1.VmError(exceptions_1.ERROR.OUT_OF_GAS)\n  };\n}\nexports.OOGResult = OOGResult;\n/**\n * EVM is responsible for executing an EVM message fully\n * (including any nested calls and creates), processing the results\n * and storing them to state (or discarding changes in case of exceptions).\n * @ignore\n */\nvar EVM = /** @class */function () {\n  function EVM(vm, txContext, block) {\n    this._vm = vm;\n    this._state = this._vm.pStateManager;\n    this._tx = txContext;\n    this._block = block;\n    this._refund = new BN(0);\n  }\n  /**\n   * Executes an EVM message, determining whether it's a call or create\n   * based on the `to` address. It checkpoints the state and reverts changes\n   * if an exception happens during the message execution.\n   */\n  EVM.prototype.executeMessage = function (message) {\n    return __awaiter(this, void 0, void 0, function () {\n      var result, err;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this._vm._emit('beforeMessage', message)];\n          case 1:\n            _a.sent();\n            return [4 /*yield*/, this._state.checkpoint()];\n          case 2:\n            _a.sent();\n            if (!message.to) return [3 /*break*/, 4];\n            return [4 /*yield*/, this._executeCall(message)];\n          case 3:\n            result = _a.sent();\n            return [3 /*break*/, 6];\n          case 4:\n            return [4 /*yield*/, this._executeCreate(message)];\n          case 5:\n            result = _a.sent();\n            _a.label = 6;\n          case 6:\n            // TODO: Move `gasRefund` to a tx-level result object\n            // instead of `ExecResult`.\n            result.execResult.gasRefund = this._refund.clone();\n            err = result.execResult.exceptionError;\n            if (!err) return [3 /*break*/, 8];\n            result.execResult.logs = [];\n            return [4 /*yield*/, this._state.revert()];\n          case 7:\n            _a.sent();\n            return [3 /*break*/, 10];\n          case 8:\n            return [4 /*yield*/, this._state.commit()];\n          case 9:\n            _a.sent();\n            _a.label = 10;\n          case 10:\n            return [4 /*yield*/, this._vm._emit('afterMessage', result)];\n          case 11:\n            _a.sent();\n            return [2 /*return*/, result];\n        }\n      });\n    });\n  };\n  EVM.prototype._executeCall = function (message) {\n    return __awaiter(this, void 0, void 0, function () {\n      var account, toAccount, result;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this._state.getAccount(message.caller)\n            // Reduce tx value from sender\n            ];\n\n          case 1:\n            account = _a.sent();\n            if (!!message.delegatecall) return [3 /*break*/, 3];\n            return [4 /*yield*/, this._reduceSenderBalance(account, message)];\n          case 2:\n            _a.sent();\n            _a.label = 3;\n          case 3:\n            return [4 /*yield*/, this._state.getAccount(message.to)\n            // Add tx value to the `to` account\n            ];\n\n          case 4:\n            toAccount = _a.sent();\n            if (!!message.delegatecall) return [3 /*break*/, 6];\n            return [4 /*yield*/, this._addToBalance(toAccount, message)];\n          case 5:\n            _a.sent();\n            _a.label = 6;\n          case 6:\n            // Load code\n            return [4 /*yield*/, this._loadCode(message)];\n          case 7:\n            // Load code\n            _a.sent();\n            if (!message.code || message.code.length === 0) {\n              return [2 /*return*/, {\n                gasUsed: new BN(0),\n                execResult: {\n                  gasUsed: new BN(0),\n                  returnValue: Buffer.alloc(0)\n                }\n              }];\n            }\n            if (!message.isCompiled) return [3 /*break*/, 8];\n            result = this.runPrecompile(message.code, message.data, message.gasLimit);\n            return [3 /*break*/, 10];\n          case 8:\n            return [4 /*yield*/, this.runInterpreter(message)];\n          case 9:\n            result = _a.sent();\n            _a.label = 10;\n          case 10:\n            return [2 /*return*/, {\n              gasUsed: result.gasUsed,\n              execResult: result\n            }];\n        }\n      });\n    });\n  };\n  EVM.prototype._executeCreate = function (message) {\n    return __awaiter(this, void 0, void 0, function () {\n      var account, _a, toAccount, newContractEvent, result, totalGas, returnFee;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4 /*yield*/, this._state.getAccount(message.caller)\n            // Reduce tx value from sender\n            ];\n\n          case 1:\n            account = _b.sent();\n            // Reduce tx value from sender\n            return [4 /*yield*/, this._reduceSenderBalance(account, message)];\n          case 2:\n            // Reduce tx value from sender\n            _b.sent();\n            message.code = message.data;\n            message.data = Buffer.alloc(0);\n            _a = message;\n            return [4 /*yield*/, this._generateAddress(message)];\n          case 3:\n            _a.to = _b.sent();\n            return [4 /*yield*/, this._state.getAccount(message.to)\n            // Check for collision\n            ];\n\n          case 4:\n            toAccount = _b.sent();\n            // Check for collision\n            if (toAccount.nonce && new BN(toAccount.nonce).gtn(0) || toAccount.codeHash.compare(ethereumjs_util_1.KECCAK256_NULL) !== 0) {\n              return [2 /*return*/, {\n                gasUsed: message.gasLimit,\n                createdAddress: message.to,\n                execResult: {\n                  returnValue: Buffer.alloc(0),\n                  exceptionError: new exceptions_1.VmError(exceptions_1.ERROR.CREATE_COLLISION),\n                  gasUsed: message.gasLimit\n                }\n              }];\n            }\n            return [4 /*yield*/, this._state.clearContractStorage(message.to)];\n          case 5:\n            _b.sent();\n            newContractEvent = {\n              address: message.to,\n              code: message.code\n            };\n            return [4 /*yield*/, this._vm._emit('newContract', newContractEvent)];\n          case 6:\n            _b.sent();\n            return [4 /*yield*/, this._state.getAccount(message.to)];\n          case 7:\n            toAccount = _b.sent();\n            toAccount.nonce = new BN(toAccount.nonce).addn(1).toArrayLike(Buffer);\n            // Add tx value to the `to` account\n            return [4 /*yield*/, this._addToBalance(toAccount, message)];\n          case 8:\n            // Add tx value to the `to` account\n            _b.sent();\n            if (!message.code || message.code.length === 0) {\n              return [2 /*return*/, {\n                gasUsed: new BN(0),\n                createdAddress: message.to,\n                execResult: {\n                  gasUsed: new BN(0),\n                  returnValue: Buffer.alloc(0)\n                }\n              }];\n            }\n            return [4 /*yield*/, this.runInterpreter(message)\n            // fee for size of the return value\n            ];\n\n          case 9:\n            result = _b.sent();\n            totalGas = result.gasUsed;\n            if (!result.exceptionError) {\n              returnFee = new BN(result.returnValue.length * this._vm._common.param('gasPrices', 'createData'));\n              totalGas = totalGas.add(returnFee);\n            }\n            // if not enough gas\n            if (totalGas.lte(message.gasLimit) && (this._vm.allowUnlimitedContractSize || result.returnValue.length <= 24576)) {\n              result.gasUsed = totalGas;\n            } else {\n              result = __assign(__assign({}, result), OOGResult(message.gasLimit));\n            }\n            if (!(!result.exceptionError && result.returnValue && result.returnValue.toString() !== '')) return [3 /*break*/, 11];\n            return [4 /*yield*/, this._state.putContractCode(message.to, result.returnValue)];\n          case 10:\n            _b.sent();\n            _b.label = 11;\n          case 11:\n            return [2 /*return*/, {\n              gasUsed: result.gasUsed,\n              createdAddress: message.to,\n              execResult: result\n            }];\n        }\n      });\n    });\n  };\n  /**\n   * Starts the actual bytecode processing for a CALL or CREATE, providing\n   * it with the [[EEI]].\n   */\n  EVM.prototype.runInterpreter = function (message, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    return __awaiter(this, void 0, void 0, function () {\n      var env, _a, eei, oldRefund, interpreter, interpreterRes, result, gasUsed;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = {\n              blockchain: this._vm.blockchain,\n              address: message.to || ethereumjs_util_1.zeros(32),\n              caller: message.caller || ethereumjs_util_1.zeros(32),\n              callData: message.data || Buffer.from([0]),\n              callValue: message.value || new BN(0),\n              code: message.code,\n              isStatic: message.isStatic || false,\n              depth: message.depth || 0,\n              gasPrice: this._tx.gasPrice,\n              origin: this._tx.origin || message.caller || ethereumjs_util_1.zeros(32),\n              block: this._block || new Block()\n            };\n            return [4 /*yield*/, this._state.getAccount(message.to || ethereumjs_util_1.zeros(32))];\n          case 1:\n            env = (_a.contract = _b.sent(), _a.codeAddress = message.codeAddress, _a);\n            eei = new eei_1.default(env, this._state, this, this._vm._common, message.gasLimit.clone());\n            if (message.selfdestruct) {\n              eei._result.selfdestruct = message.selfdestruct;\n            }\n            oldRefund = this._refund.clone();\n            interpreter = new interpreter_1.default(this._vm, eei);\n            return [4 /*yield*/, interpreter.run(message.code, opts)];\n          case 2:\n            interpreterRes = _b.sent();\n            result = eei._result;\n            gasUsed = message.gasLimit.sub(eei._gasLeft);\n            if (interpreterRes.exceptionError) {\n              if (interpreterRes.exceptionError.error !== exceptions_1.ERROR.REVERT) {\n                gasUsed = message.gasLimit;\n              }\n              // Clear the result on error\n              result = __assign(__assign({}, result), {\n                logs: [],\n                selfdestruct: {}\n              });\n              // Revert gas refund if message failed\n              this._refund = oldRefund;\n            }\n            return [2 /*return*/, __assign(__assign({}, result), {\n              runState: __assign(__assign(__assign({}, interpreterRes.runState), result), eei._env),\n              exceptionError: interpreterRes.exceptionError,\n              gas: eei._gasLeft,\n              gasUsed: gasUsed,\n              returnValue: result.returnValue ? result.returnValue : Buffer.alloc(0)\n            })];\n        }\n      });\n    });\n  };\n  /**\n   * Returns code for precompile at the given address, or undefined\n   * if no such precompile exists.\n   */\n  EVM.prototype.getPrecompile = function (address) {\n    return precompiles_1.getPrecompile(address.toString('hex'));\n  };\n  /**\n   * Executes a precompiled contract with given data and gas limit.\n   */\n  EVM.prototype.runPrecompile = function (code, data, gasLimit) {\n    if (typeof code !== 'function') {\n      throw new Error('Invalid precompile');\n    }\n    var opts = {\n      data: data,\n      gasLimit: gasLimit,\n      _common: this._vm._common\n    };\n    return code(opts);\n  };\n  EVM.prototype._loadCode = function (message) {\n    return __awaiter(this, void 0, void 0, function () {\n      var precompile, _a;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!!message.code) return [3 /*break*/, 3];\n            precompile = this.getPrecompile(message.codeAddress);\n            if (!precompile) return [3 /*break*/, 1];\n            message.code = precompile;\n            message.isCompiled = true;\n            return [3 /*break*/, 3];\n          case 1:\n            _a = message;\n            return [4 /*yield*/, this._state.getContractCode(message.codeAddress)];\n          case 2:\n            _a.code = _b.sent();\n            message.isCompiled = false;\n            _b.label = 3;\n          case 3:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  EVM.prototype._generateAddress = function (message) {\n    return __awaiter(this, void 0, void 0, function () {\n      var addr, acc, newNonce;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!message.salt) return [3 /*break*/, 1];\n            addr = ethereumjs_util_1.generateAddress2(message.caller, message.salt, message.code);\n            return [3 /*break*/, 3];\n          case 1:\n            return [4 /*yield*/, this._state.getAccount(message.caller)];\n          case 2:\n            acc = _a.sent();\n            newNonce = new BN(acc.nonce).subn(1);\n            addr = ethereumjs_util_1.generateAddress(message.caller, newNonce.toArrayLike(Buffer));\n            _a.label = 3;\n          case 3:\n            return [2 /*return*/, addr];\n        }\n      });\n    });\n  };\n  EVM.prototype._reduceSenderBalance = function (account, message) {\n    return __awaiter(this, void 0, void 0, function () {\n      var newBalance;\n      return __generator(this, function (_a) {\n        newBalance = new BN(account.balance).sub(message.value);\n        account.balance = ethereumjs_util_1.toBuffer(newBalance);\n        return [2 /*return*/, this._state.putAccount(ethereumjs_util_1.toBuffer(message.caller), account)];\n      });\n    });\n  };\n  EVM.prototype._addToBalance = function (toAccount, message) {\n    return __awaiter(this, void 0, void 0, function () {\n      var newBalance;\n      return __generator(this, function (_a) {\n        newBalance = new BN(toAccount.balance).add(message.value);\n        if (newBalance.gt(ethereumjs_util_1.MAX_INTEGER)) {\n          throw new Error('Value overflow');\n        }\n        toAccount.balance = ethereumjs_util_1.toBuffer(newBalance);\n        // putAccount as the nonce may have changed for contract creation\n        return [2 /*return*/, this._state.putAccount(ethereumjs_util_1.toBuffer(message.to), toAccount)];\n      });\n    });\n  };\n  EVM.prototype._touchAccount = function (address) {\n    return __awaiter(this, void 0, void 0, function () {\n      var acc;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this._state.getAccount(address)];\n          case 1:\n            acc = _a.sent();\n            return [2 /*return*/, this._state.putAccount(address, acc)];\n        }\n      });\n    });\n  };\n  return EVM;\n}();\nexports.default = EVM;","map":null,"metadata":{},"sourceType":"script"}