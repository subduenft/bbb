{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function sent() {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar _this = this;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar utilities_1 = require(\"./utilities\");\nexports.reconcileLogHistoryWithAddedBlock = function (getLogs, logHistory, newBlock, onLogsAdded, filters, historyBlockLength) {\n  if (filters === void 0) {\n    filters = [];\n  }\n  if (historyBlockLength === void 0) {\n    historyBlockLength = 100;\n  }\n  return __awaiter(_this, void 0, void 0, function () {\n    var logs;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4 /*yield*/, logHistory];\n        case 1:\n          logHistory = _a.sent();\n          return [4 /*yield*/, getFilteredLogs(getLogs, newBlock, filters)];\n        case 2:\n          logs = _a.sent();\n          return [4 /*yield*/, addNewLogsToHead(newBlock.hash, logHistory, logs, onLogsAdded)];\n        case 3:\n          logHistory = _a.sent();\n          return [4 /*yield*/, pruneOldLogs(logHistory, newBlock, historyBlockLength)];\n        case 4:\n          logHistory = _a.sent();\n          return [2 /*return*/, logHistory];\n      }\n    });\n  });\n};\nvar getFilteredLogs = function getFilteredLogs(getLogs, newBlock, filters) {\n  return __awaiter(_this, void 0, void 0, function () {\n    var logPromises, nestedLogs;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          logPromises = filters.map(function (filter) {\n            return {\n              blockHash: newBlock.hash,\n              address: filter.address,\n              topics: filter.topics\n            };\n          }).map(function (filter) {\n            return getLogs(filter);\n          });\n          return [4 /*yield*/, Promise.all(logPromises)];\n        case 1:\n          nestedLogs = _a.sent();\n          return [2 /*return*/, nestedLogs.reduce(function (allLogs, logs) {\n            return allLogs.concat(logs);\n          }, [])];\n      }\n    });\n  });\n};\nvar addNewLogsToHead = function addNewLogsToHead(blockHash, logHistory, newLogs, onLogsAdded) {\n  return __awaiter(_this, void 0, void 0, function () {\n    var sortedLogs, addedLogs, _loop_1, _i, sortedLogs_1, logToAdd;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          sortedLogs = newLogs.sort(function (logA, logB) {\n            return utilities_1.parseHexInt(logA.logIndex) - utilities_1.parseHexInt(logB.logIndex);\n          });\n          addedLogs = [];\n          _loop_1 = function _loop_1(logToAdd) {\n            // we may already have this log because two filters can return the same log\n            if (logHistory.some(function (logInHistory) {\n              return logInHistory.blockHash === logToAdd.blockHash && logInHistory.logIndex === logToAdd.logIndex;\n            })) return \"continue\";\n            ensureOrder(logHistory.last(), logToAdd);\n            logHistory = logHistory.push(logToAdd);\n            addedLogs.push(logToAdd);\n          };\n          for (_i = 0, sortedLogs_1 = sortedLogs; _i < sortedLogs_1.length; _i++) {\n            logToAdd = sortedLogs_1[_i];\n            _loop_1(logToAdd);\n          }\n          // CONSIDER: the user getting this notification won't have any visibility into the updated log history yet. should we announce new logs in a `setTimeout`? should we provide log history with new logs?\n          return [4 /*yield*/, onLogsAdded(blockHash, addedLogs)];\n        case 1:\n          // CONSIDER: the user getting this notification won't have any visibility into the updated log history yet. should we announce new logs in a `setTimeout`? should we provide log history with new logs?\n          _a.sent();\n          return [2 /*return*/, logHistory];\n      }\n    });\n  });\n};\nvar pruneOldLogs = function pruneOldLogs(logHistory, newBlock, historyBlockLength) {\n  return __awaiter(_this, void 0, void 0, function () {\n    return __generator(this, function (_a) {\n      // `log!` is required until the next major version of `immutable` is published to NPM (current version 3.8.2) which improves the type definitions\n      return [2 /*return*/, logHistory.skipUntil(function (log) {\n        return utilities_1.parseHexInt(newBlock.number) - utilities_1.parseHexInt(log.blockNumber) < historyBlockLength;\n      }).toList()];\n    });\n  });\n};\nvar ensureOrder = function ensureOrder(headLog, newLog) {\n  if (headLog === undefined) return;\n  var headBlockNumber = utilities_1.parseHexInt(headLog.blockNumber);\n  var newLogBlockNumber = utilities_1.parseHexInt(newLog.blockNumber);\n  if (headBlockNumber > newLogBlockNumber) throw new Error(\"received log for a block (\" + newLogBlockNumber + \") older than current head log's block (\" + headBlockNumber + \")\");\n  if (headBlockNumber !== newLogBlockNumber) return;\n  var headLogIndex = utilities_1.parseHexInt(headLog.logIndex);\n  var newLogIndex = utilities_1.parseHexInt(newLog.logIndex);\n  if (headLogIndex >= newLogIndex) throw new Error(\"received log with same block number (\" + newLogBlockNumber + \") but index (\" + newLogIndex + \") is the same or older than previous index (\" + headLogIndex + \")\");\n};\nexports.reconcileLogHistoryWithRemovedBlock = function (logHistory, removedBlock, onLogsRemoved) {\n  return __awaiter(_this, void 0, void 0, function () {\n    var removedLogs;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4 /*yield*/, logHistory];\n        case 1:\n          logHistory = _a.sent();\n          removedLogs = [];\n          while (!logHistory.isEmpty() && logHistory.last().blockHash === removedBlock.hash) {\n            removedLogs.push(logHistory.last());\n            logHistory = logHistory.pop();\n          }\n          return [4 /*yield*/, onLogsRemoved(removedBlock.hash, removedLogs)];\n        case 2:\n          _a.sent();\n          // sanity check, no known way to trigger the error\n          if (logHistory.some(function (log) {\n            return log.blockHash === removedBlock.hash;\n          })) throw new Error(\"found logs for removed block not at head of log history\");\n          return [2 /*return*/, logHistory];\n      }\n    });\n  });\n};","map":null,"metadata":{},"sourceType":"script"}