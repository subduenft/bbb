{"ast":null,"code":"\"use strict\";\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Eip712MerkleTree = void 0;\nvar hash_1 = require(\"@ethersproject/hash\");\nvar utils_1 = require(\"ethers/lib/utils\");\nvar merkletreejs_1 = require(\"merkletreejs\");\nvar defaults_1 = require(\"./defaults\");\nvar utils_2 = require(\"./utils\");\nvar getTree = function getTree(leaves, defaultLeafHash) {\n  return new merkletreejs_1.MerkleTree(leaves.map(utils_2.hexToBuffer), utils_2.bufferKeccak, {\n    complete: true,\n    sort: false,\n    hashLeaves: false,\n    fillDefaultHash: (0, utils_2.hexToBuffer)(defaultLeafHash)\n  });\n};\nvar encodeProof = function encodeProof(key, proof, signature) {\n  if (signature === void 0) {\n    signature = \"0x\".concat(\"ff\".repeat(64));\n  }\n  return (0, utils_1.hexConcat)([signature, \"0x\".concat(key.toString(16).padStart(6, \"0\")), utils_1.defaultAbiCoder.encode([\"uint256[\".concat(proof.length, \"]\")], [proof])]);\n};\nvar Eip712MerkleTree = /** @class */function () {\n  function Eip712MerkleTree(types, rootType, leafType, elements, depth) {\n    this.types = types;\n    this.rootType = rootType;\n    this.leafType = leafType;\n    this.elements = elements;\n    this.depth = depth;\n    var encoder = hash_1._TypedDataEncoder.from(types);\n    this.encoder = encoder;\n    this.leafHasher = function (leaf) {\n      return encoder.hashStruct(leafType, leaf);\n    };\n    this.defaultNode = defaults_1.DefaultGetter.from(types, leafType);\n    this.defaultLeaf = this.leafHasher(this.defaultNode);\n    this.tree = getTree(this.getCompleteLeaves(), this.defaultLeaf);\n  }\n  Object.defineProperty(Eip712MerkleTree.prototype, \"completedSize\", {\n    get: function get() {\n      return Math.pow(2, this.depth);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /** Returns the array of elements in the tree, padded to the complete size with empty items. */\n  Eip712MerkleTree.prototype.getCompleteElements = function () {\n    var elements = this.elements;\n    return (0, utils_2.fillArray)(__spreadArray([], __read(elements), false), this.completedSize, this.defaultNode);\n  };\n  /** Returns the array of leaf nodes in the tree, padded to the complete size with default hashes. */\n  Eip712MerkleTree.prototype.getCompleteLeaves = function () {\n    var leaves = this.elements.map(this.leafHasher);\n    return (0, utils_2.fillArray)(__spreadArray([], __read(leaves), false), this.completedSize, this.defaultLeaf);\n  };\n  Object.defineProperty(Eip712MerkleTree.prototype, \"root\", {\n    get: function get() {\n      return this.tree.getHexRoot();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Eip712MerkleTree.prototype.getProof = function (i) {\n    var leaves = this.getCompleteLeaves();\n    var leaf = leaves[i];\n    var proof = this.tree.getHexProof(leaf, i);\n    var root = this.tree.getHexRoot();\n    return {\n      leaf: leaf,\n      proof: proof,\n      root: root\n    };\n  };\n  Eip712MerkleTree.prototype.getEncodedProofAndSignature = function (i, signature) {\n    var proof = this.getProof(i).proof;\n    return encodeProof(i, proof, signature);\n  };\n  Eip712MerkleTree.prototype.getDataToSign = function () {\n    var layer = this.getCompleteElements();\n    while (layer.length > 2) {\n      layer = (0, utils_2.chunk)(layer, 2);\n    }\n    return layer;\n  };\n  Eip712MerkleTree.prototype.add = function (element) {\n    this.elements.push(element);\n  };\n  Eip712MerkleTree.prototype.getBulkOrderHash = function () {\n    var structHash = this.encoder.hashStruct(\"BulkOrder\", {\n      tree: this.getDataToSign()\n    });\n    var leaves = this.getCompleteLeaves().map(utils_2.hexToBuffer);\n    var rootHash = (0, utils_2.bufferToHex)((0, utils_2.getRoot)(leaves, false));\n    var typeHash = (0, utils_1.keccak256)((0, utils_1.toUtf8Bytes)(this.encoder._types.BulkOrder));\n    var bulkOrderHash = (0, utils_1.keccak256)((0, utils_1.hexConcat)([typeHash, rootHash]));\n    if (bulkOrderHash !== structHash) {\n      throw new Error(\"expected derived bulk order hash to match\");\n    }\n    return structHash;\n  };\n  return Eip712MerkleTree;\n}();\nexports.Eip712MerkleTree = Eip712MerkleTree;","map":null,"metadata":{},"sourceType":"script"}