{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/nicholasschepisi/Desktop/code/bbb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"/Users/nicholasschepisi/Desktop/code/bbb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\nvar _possibleConstructorReturn = require(\"/Users/nicholasschepisi/Desktop/code/bbb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\nvar _getPrototypeOf = require(\"/Users/nicholasschepisi/Desktop/code/bbb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\nvar _inherits = require(\"/Users/nicholasschepisi/Desktop/code/bbb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BoolDataType = void 0;\nvar ethereum_types_1 = require(\"ethereum-types\");\nvar ethUtil = require(\"ethereumjs-util\");\nvar configured_bignumber_1 = require(\"../../configured_bignumber\");\nvar blob_1 = require(\"../abstract_data_types/types/blob\");\nvar constants_1 = require(\"../utils/constants\");\nvar BoolDataType = /*#__PURE__*/function (_blob_1$AbstractBlobD) {\n  _inherits(BoolDataType, _blob_1$AbstractBlobD);\n  function BoolDataType(dataItem, dataTypeFactory) {\n    var _this;\n    _classCallCheck(this, BoolDataType);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(BoolDataType).call(this, dataItem, dataTypeFactory, BoolDataType._SIZE_KNOWN_AT_COMPILE_TIME));\n    if (!BoolDataType.matchType(dataItem.type)) {\n      throw new Error(\"Tried to instantiate Bool with bad input: \".concat(dataItem));\n    }\n    return _this;\n  }\n  _createClass(BoolDataType, [{\n    key: \"encodeValue\",\n    // Disable prefer-function-over-method for inherited abstract methods.\n    /* tslint:disable prefer-function-over-method */\n    value: function encodeValue(value) {\n      var encodedValue = value ? '0x1' : '0x0';\n      var encodedValueBuf = ethUtil.setLengthLeft(ethUtil.toBuffer(encodedValue), constants_1.constants.EVM_WORD_WIDTH_IN_BYTES);\n      return encodedValueBuf;\n    }\n  }, {\n    key: \"decodeValue\",\n    value: function decodeValue(calldata) {\n      var valueBuf = calldata.popWord();\n      var valueHex = ethUtil.bufferToHex(valueBuf);\n      // Hack @hysz: there are some cases where `false` is encoded as 0x instead of 0x0.\n      var valueNumber = valueHex === '0x' ? new configured_bignumber_1.BigNumber(0) : new configured_bignumber_1.BigNumber(valueHex, constants_1.constants.HEX_BASE);\n      if (!(valueNumber.isEqualTo(0) || valueNumber.isEqualTo(1))) {\n        throw new Error(\"Failed to decode boolean. Expected 0x0 or 0x1, got \".concat(valueHex));\n      }\n      /* tslint:disable boolean-naming */\n      var value = !valueNumber.isEqualTo(0);\n      /* tslint:enable boolean-naming */\n      return value;\n    }\n  }, {\n    key: \"getDefaultValue\",\n    value: function getDefaultValue() {\n      return BoolDataType._DEFAULT_VALUE;\n    }\n  }, {\n    key: \"getSignatureType\",\n    value: function getSignatureType() {\n      return ethereum_types_1.SolidityTypes.Bool;\n    }\n  }], [{\n    key: \"matchType\",\n    value: function matchType(type) {\n      return type === ethereum_types_1.SolidityTypes.Bool;\n    }\n  }]);\n  return BoolDataType;\n}(blob_1.AbstractBlobDataType);\nexports.BoolDataType = BoolDataType;\nBoolDataType._SIZE_KNOWN_AT_COMPILE_TIME = true;\nBoolDataType._DEFAULT_VALUE = false;","map":null,"metadata":{},"sourceType":"script"}