{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function sent() {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar block_reconciler_1 = require(\"./block-reconciler\");\nvar log_reconciler_1 = require(\"./log-reconciler\");\nvar immutable_1 = require(\"immutable\");\nvar createUuid = require(\"uuid\");\nvar BlockAndLogStreamer = /** @class */function () {\n  /**\n   * @param getBlockByHash async function that returns a block given a particular hash or null/throws if the block is not found\n   * @param getLogs async function that returns the logs matching the given filter\n   * @param onError called if a subscriber throws an error, the error will otherwise be swallowed\n   * @param configuration additional optional configuration items\n   */\n  function BlockAndLogStreamer(getBlockByHash, getLogs, onError, configuration) {\n    var _this = this;\n    this.lastKnownGoodBlockHistory = immutable_1.List();\n    this.blockHistory = Promise.resolve(this.lastKnownGoodBlockHistory);\n    this.lastKnownGoodLogHistory = immutable_1.List();\n    this.logHistory = Promise.resolve(this.lastKnownGoodLogHistory);\n    this.pendingCallbacks = [];\n    this.onError = function () {};\n    this.logFilters = {};\n    this.onBlockAddedSubscribers = {};\n    this.onBlockRemovedSubscribers = {};\n    this.onLogsAddedSubscribers = {};\n    this.onLogsRemovedSubscribers = {};\n    this.reconcileNewBlock = function (block) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var blockHistory, logHistory, error_1;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              _a.trys.push([0, 3,, 4]);\n              this.blockHistory = block_reconciler_1.reconcileBlockHistory(this.getBlockByHash, this.blockHistory, block, this.onBlockAdded, this.onBlockRemoved, this.blockRetention);\n              return [4 /*yield*/, this.blockHistory];\n            case 1:\n              blockHistory = _a.sent();\n              return [4 /*yield*/, this.logHistory];\n            case 2:\n              logHistory = _a.sent();\n              // everything reconciled correctly, checkpoint state\n              this.lastKnownGoodBlockHistory = blockHistory;\n              this.lastKnownGoodLogHistory = logHistory;\n              this.pendingCallbacks.forEach(function (callback) {\n                return callback();\n              });\n              this.pendingCallbacks = [];\n              return [3 /*break*/, 4];\n            case 3:\n              error_1 = _a.sent();\n              // NOTE: this catch block may be hit multiple times for a single failure root cause, thus we need to be careful to only do idempotent operations in here\n              // something went wrong, rollback to last checkpoint\n              this.blockHistory = Promise.resolve(this.lastKnownGoodBlockHistory);\n              this.logHistory = Promise.resolve(this.lastKnownGoodLogHistory);\n              this.pendingCallbacks = [];\n              throw error_1;\n            case 4:\n              return [2 /*return*/];\n          }\n        });\n      });\n    };\n\n    this.onBlockAdded = function (block) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var logFilters;\n        var _this = this;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              Object.keys(this.onBlockAddedSubscribers).map(function (key) {\n                return _this.onBlockAddedSubscribers[key];\n              }).map(function (callback) {\n                return logAndSwallowWrapper(callback, _this.onError);\n              }).forEach(function (callback) {\n                return _this.pendingCallbacks.push(function () {\n                  return callback(block);\n                });\n              });\n              logFilters = Object.keys(this.logFilters).map(function (key) {\n                return _this.logFilters[key];\n              });\n              this.logHistory = log_reconciler_1.reconcileLogHistoryWithAddedBlock(this.getLogs, this.logHistory, block, this.onLogsAdded, logFilters, this.blockRetention);\n              return [4 /*yield*/, this.logHistory];\n            case 1:\n              _a.sent();\n              return [2 /*return*/];\n          }\n        });\n      });\n    };\n\n    this.onBlockRemoved = function (block) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var _this = this;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              this.logHistory = log_reconciler_1.reconcileLogHistoryWithRemovedBlock(this.logHistory, block, this.onLogsRemoved);\n              return [4 /*yield*/, this.logHistory];\n            case 1:\n              _a.sent();\n              Object.keys(this.onBlockRemovedSubscribers).map(function (key) {\n                return _this.onBlockRemovedSubscribers[key];\n              }).map(function (callback) {\n                return logAndSwallowWrapper(callback, _this.onError);\n              }).forEach(function (callback) {\n                return _this.pendingCallbacks.push(function () {\n                  return callback(block);\n                });\n              });\n              return [2 /*return*/];\n          }\n        });\n      });\n    };\n\n    this.onLogsAdded = function (blockHash, logs) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var _this = this;\n        return __generator(this, function (_a) {\n          Object.keys(this.onLogsAddedSubscribers).map(function (key) {\n            return _this.onLogsAddedSubscribers[key];\n          }).map(function (callback) {\n            return logAndSwallowWrapper(callback, _this.onError);\n          }).forEach(function (callback) {\n            return _this.pendingCallbacks.push(function () {\n              return callback(blockHash, logs);\n            });\n          });\n          return [2 /*return*/];\n        });\n      });\n    };\n\n    this.onLogsRemoved = function (blockHash, logs) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var _this = this;\n        return __generator(this, function (_a) {\n          Object.keys(this.onLogsRemovedSubscribers).map(function (key) {\n            return _this.onLogsRemovedSubscribers[key];\n          }).map(function (callback) {\n            return logAndSwallowWrapper(callback, _this.onError);\n          }).forEach(function (callback) {\n            return _this.pendingCallbacks.push(function () {\n              return callback(blockHash, logs);\n            });\n          });\n          return [2 /*return*/];\n        });\n      });\n    };\n\n    this.getLatestReconciledBlock = function () {\n      return _this.lastKnownGoodBlockHistory.isEmpty() ? null : _this.lastKnownGoodBlockHistory.last();\n    };\n    this.addLogFilter = function (filter) {\n      var uuid = \"log filter token \" + createUuid();\n      _this.logFilters[uuid] = filter;\n      return uuid;\n    };\n    this.removeLogFilter = function (token) {\n      if (!token.startsWith(\"log filter token \")) throw new Error(\"Expected a log filter token.  Actual: \" + token);\n      delete _this.logFilters[token];\n    };\n    this.subscribeToOnBlockAdded = function (onBlockAdded) {\n      var uuid = \"on block added token \" + createUuid();\n      _this.onBlockAddedSubscribers[uuid] = onBlockAdded;\n      return uuid;\n    };\n    this.unsubscribeFromOnBlockAdded = function (token) {\n      if (!token.startsWith(\"on block added token \")) throw new Error(\"Expected a block added subscription token.  Actual: \" + token);\n      delete _this.onBlockAddedSubscribers[token];\n    };\n    this.subscribeToOnBlockRemoved = function (onBlockRemoved) {\n      var uuid = \"on block removed token \" + createUuid();\n      _this.onBlockRemovedSubscribers[uuid] = onBlockRemoved;\n      return uuid;\n    };\n    this.unsubscribeFromOnBlockRemoved = function (token) {\n      if (!token.startsWith(\"on block removed token \")) throw new Error(\"Expected a block added subscription token.  Actual: \" + token);\n      delete _this.onBlockRemovedSubscribers[token];\n    };\n    this.subscribeToOnLogsAdded = function (onLogsAdded) {\n      var uuid = \"on log added token \" + createUuid();\n      _this.onLogsAddedSubscribers[uuid] = onLogsAdded;\n      return uuid;\n    };\n    this.unsubscribeFromOnLogsAdded = function (token) {\n      if (!token.startsWith(\"on log added token \")) throw new Error(\"Expected a log added subscription token.  Actual: \" + token);\n      delete _this.onLogsAddedSubscribers[token];\n    };\n    this.subscribeToOnLogsRemoved = function (onLogsRemoved) {\n      var uuid = \"on log removed token \" + createUuid();\n      _this.onLogsRemovedSubscribers[uuid] = onLogsRemoved;\n      return uuid;\n    };\n    this.unsubscribeFromOnLogsRemoved = function (token) {\n      if (!token.startsWith(\"on log removed token \")) throw new Error(\"Expected a log added subscription token.  Actual: \" + token);\n      delete _this.onLogsRemovedSubscribers[token];\n    };\n    if (getBlockByHash === undefined) throw new Error(\"getBlockByHash must be provided\");\n    this.getBlockByHash = getBlockByHash;\n    if (getLogs === undefined) throw new Error(\"getLogs must be provided\");\n    this.getLogs = getLogs;\n    if (onError === undefined) throw new Error(\"onError must be provided\");\n    this.onError = onError;\n    this.blockRetention = configuration && configuration.blockRetention ? configuration.blockRetention : 100;\n  }\n  return BlockAndLogStreamer;\n}();\nexports.BlockAndLogStreamer = BlockAndLogStreamer;\nfunction logAndSwallowWrapper(callback, onError) {\n  return function (parameter1, parameter2) {\n    try {\n      callback(parameter1, parameter2);\n    } catch (error) {\n      onError(error);\n    }\n  };\n}","map":null,"metadata":{},"sourceType":"script"}