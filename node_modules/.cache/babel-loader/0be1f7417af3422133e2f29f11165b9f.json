{"ast":null,"code":"var util = require('util'),\n  AbstractLevelDOWN = require('abstract-leveldown').AbstractLevelDOWN,\n  DeferredIterator = require('./deferred-iterator');\nfunction DeferredLevelDOWN(location) {\n  AbstractLevelDOWN.call(this, typeof location == 'string' ? location : ''); // optional location, who cares?\n  this._db = undefined;\n  this._operations = [];\n  this._iterators = [];\n}\nutil.inherits(DeferredLevelDOWN, AbstractLevelDOWN);\n\n// called by LevelUP when we have a real DB to take its place\nDeferredLevelDOWN.prototype.setDb = function (db) {\n  this._db = db;\n  this._operations.forEach(function (op) {\n    db[op.method].apply(db, op.args);\n  });\n  this._iterators.forEach(function (it) {\n    it.setDb(db);\n  });\n};\nDeferredLevelDOWN.prototype._open = function (options, callback) {\n  return process.nextTick(callback);\n};\n\n// queue a new deferred operation\nDeferredLevelDOWN.prototype._operation = function (method, args) {\n  if (this._db) return this._db[method].apply(this._db, args);\n  this._operations.push({\n    method: method,\n    args: args\n  });\n};\n\n// deferrables\n'put get del batch approximateSize'.split(' ').forEach(function (m) {\n  DeferredLevelDOWN.prototype['_' + m] = function () {\n    this._operation(m, arguments);\n  };\n});\nDeferredLevelDOWN.prototype._isBuffer = function (obj) {\n  return Buffer.isBuffer(obj);\n};\nDeferredLevelDOWN.prototype._iterator = function (options) {\n  if (this._db) return this._db.iterator.apply(this._db, arguments);\n  var it = new DeferredIterator(options);\n  this._iterators.push(it);\n  return it;\n};\nmodule.exports = DeferredLevelDOWN;\nmodule.exports.DeferredIterator = DeferredIterator;","map":null,"metadata":{},"sourceType":"script"}