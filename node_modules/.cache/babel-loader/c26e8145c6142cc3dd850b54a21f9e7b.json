{"ast":null,"code":"/* Copyright (c) 2017 Rod Vagg, MIT License */\n\nvar xtend = require('xtend');\nvar AbstractIterator = require('./abstract-iterator');\nvar AbstractChainedBatch = require('./abstract-chained-batch');\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar rangeOptions = 'start end gt gte lt lte'.split(' ');\nfunction AbstractLevelDOWN(location) {\n  if (!arguments.length || location === undefined) {\n    throw new Error('constructor requires at least a location argument');\n  }\n  if (typeof location !== 'string') {\n    throw new Error('constructor requires a location string argument');\n  }\n  this.location = location;\n  this.status = 'new';\n}\nAbstractLevelDOWN.prototype.open = function (options, callback) {\n  var self = this;\n  var oldStatus = this.status;\n  if (typeof options === 'function') {\n    callback = options;\n  }\n  if (typeof callback !== 'function') {\n    throw new Error('open() requires a callback argument');\n  }\n  if (typeof options !== 'object') {\n    options = {};\n  }\n  options.createIfMissing = options.createIfMissing !== false;\n  options.errorIfExists = !!options.errorIfExists;\n  this.status = 'opening';\n  this._open(options, function (err) {\n    if (err) {\n      self.status = oldStatus;\n      return callback(err);\n    }\n    self.status = 'open';\n    callback();\n  });\n};\nAbstractLevelDOWN.prototype._open = function (options, callback) {\n  process.nextTick(callback);\n};\nAbstractLevelDOWN.prototype.close = function (callback) {\n  var self = this;\n  var oldStatus = this.status;\n  if (typeof callback !== 'function') {\n    throw new Error('close() requires a callback argument');\n  }\n  this.status = 'closing';\n  this._close(function (err) {\n    if (err) {\n      self.status = oldStatus;\n      return callback(err);\n    }\n    self.status = 'closed';\n    callback();\n  });\n};\nAbstractLevelDOWN.prototype._close = function (callback) {\n  process.nextTick(callback);\n};\nAbstractLevelDOWN.prototype.get = function (key, options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n  }\n  if (typeof callback !== 'function') {\n    throw new Error('get() requires a callback argument');\n  }\n  var err = this._checkKey(key, 'key');\n  if (err) return process.nextTick(callback, err);\n  key = this._serializeKey(key);\n  if (typeof options !== 'object') {\n    options = {};\n  }\n  options.asBuffer = options.asBuffer !== false;\n  this._get(key, options, callback);\n};\nAbstractLevelDOWN.prototype._get = function (key, options, callback) {\n  process.nextTick(function () {\n    callback(new Error('NotFound'));\n  });\n};\nAbstractLevelDOWN.prototype.put = function (key, value, options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n  }\n  if (typeof callback !== 'function') {\n    throw new Error('put() requires a callback argument');\n  }\n  var err = this._checkKey(key, 'key');\n  if (err) return process.nextTick(callback, err);\n  key = this._serializeKey(key);\n  value = this._serializeValue(value);\n  if (typeof options !== 'object') {\n    options = {};\n  }\n  this._put(key, value, options, callback);\n};\nAbstractLevelDOWN.prototype._put = function (key, value, options, callback) {\n  process.nextTick(callback);\n};\nAbstractLevelDOWN.prototype.del = function (key, options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n  }\n  if (typeof callback !== 'function') {\n    throw new Error('del() requires a callback argument');\n  }\n  var err = this._checkKey(key, 'key');\n  if (err) return process.nextTick(callback, err);\n  key = this._serializeKey(key);\n  if (typeof options !== 'object') {\n    options = {};\n  }\n  this._del(key, options, callback);\n};\nAbstractLevelDOWN.prototype._del = function (key, options, callback) {\n  process.nextTick(callback);\n};\nAbstractLevelDOWN.prototype.batch = function (array, options, callback) {\n  if (!arguments.length) {\n    return this._chainedBatch();\n  }\n  if (typeof options === 'function') {\n    callback = options;\n  }\n  if (typeof array === 'function') {\n    callback = array;\n  }\n  if (typeof callback !== 'function') {\n    throw new Error('batch(array) requires a callback argument');\n  }\n  if (!Array.isArray(array)) {\n    return process.nextTick(callback, new Error('batch(array) requires an array argument'));\n  }\n  if (!options || typeof options !== 'object') {\n    options = {};\n  }\n  var serialized = new Array(array.length);\n  for (var i = 0; i < array.length; i++) {\n    if (typeof array[i] !== 'object' || array[i] === null) {\n      return process.nextTick(callback, new Error('batch(array) element must be an object and not `null`'));\n    }\n    var e = xtend(array[i]);\n    if (e.type !== 'put' && e.type !== 'del') {\n      return process.nextTick(callback, new Error(\"`type` must be 'put' or 'del'\"));\n    }\n    var err = this._checkKey(e.key, 'key');\n    if (err) return process.nextTick(callback, err);\n    e.key = this._serializeKey(e.key);\n    if (e.type === 'put') {\n      e.value = this._serializeValue(e.value);\n    }\n    serialized[i] = e;\n  }\n  this._batch(serialized, options, callback);\n};\nAbstractLevelDOWN.prototype._batch = function (array, options, callback) {\n  process.nextTick(callback);\n};\nAbstractLevelDOWN.prototype._setupIteratorOptions = function (options) {\n  options = cleanRangeOptions(options);\n  options.reverse = !!options.reverse;\n  options.keys = options.keys !== false;\n  options.values = options.values !== false;\n  options.limit = 'limit' in options ? options.limit : -1;\n  options.keyAsBuffer = options.keyAsBuffer !== false;\n  options.valueAsBuffer = options.valueAsBuffer !== false;\n  return options;\n};\nfunction cleanRangeOptions(options) {\n  var result = {};\n  for (var k in options) {\n    if (!hasOwnProperty.call(options, k)) continue;\n    if (isRangeOption(k) && isEmptyRangeOption(options[k])) continue;\n    result[k] = options[k];\n  }\n  return result;\n}\nfunction isRangeOption(k) {\n  return rangeOptions.indexOf(k) !== -1;\n}\nfunction isEmptyRangeOption(v) {\n  return v === '' || v == null || isEmptyBuffer(v);\n}\nfunction isEmptyBuffer(v) {\n  return Buffer.isBuffer(v) && v.length === 0;\n}\nAbstractLevelDOWN.prototype.iterator = function (options) {\n  if (typeof options !== 'object') {\n    options = {};\n  }\n  options = this._setupIteratorOptions(options);\n  return this._iterator(options);\n};\nAbstractLevelDOWN.prototype._iterator = function (options) {\n  return new AbstractIterator(this);\n};\nAbstractLevelDOWN.prototype._chainedBatch = function () {\n  return new AbstractChainedBatch(this);\n};\nAbstractLevelDOWN.prototype._serializeKey = function (key) {\n  return Buffer.isBuffer(key) ? key : String(key);\n};\nAbstractLevelDOWN.prototype._serializeValue = function (value) {\n  if (value == null) return '';\n  return Buffer.isBuffer(value) || process.browser ? value : String(value);\n};\nAbstractLevelDOWN.prototype._checkKey = function (obj, type) {\n  if (obj === null || obj === undefined) {\n    return new Error(type + ' cannot be `null` or `undefined`');\n  }\n  if (Buffer.isBuffer(obj) && obj.length === 0) {\n    return new Error(type + ' cannot be an empty Buffer');\n  }\n  if (String(obj) === '') {\n    return new Error(type + ' cannot be an empty String');\n  }\n};\nmodule.exports = AbstractLevelDOWN;","map":null,"metadata":{},"sourceType":"script"}