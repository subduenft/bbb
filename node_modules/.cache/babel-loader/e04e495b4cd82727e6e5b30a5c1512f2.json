{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar BN = require(\"bn.js\");\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\nvar _a = require('../exceptions'),\n  ERROR = _a.ERROR,\n  VmError = _a.VmError;\n/**\n * Implementation of the stack used in evm.\n */\nvar Stack = /** @class */function () {\n  function Stack() {\n    this._store = [];\n  }\n  Object.defineProperty(Stack.prototype, \"length\", {\n    get: function get() {\n      return this._store.length;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Stack.prototype.push = function (value) {\n    if (!BN.isBN(value)) {\n      throw new VmError(ERROR.INTERNAL_ERROR);\n    }\n    if (value.gt(ethereumjs_util_1.MAX_INTEGER)) {\n      throw new VmError(ERROR.OUT_OF_RANGE);\n    }\n    if (this._store.length > 1023) {\n      throw new VmError(ERROR.STACK_OVERFLOW);\n    }\n    this._store.push(value);\n  };\n  Stack.prototype.pop = function () {\n    if (this._store.length < 1) {\n      throw new VmError(ERROR.STACK_UNDERFLOW);\n    }\n    // Length is checked above, so pop shouldn't return undefined\n    return this._store.pop();\n  };\n  /**\n   * Pop multiple items from stack. Top of stack is first item\n   * in returned array.\n   * @param num - Number of items to pop\n   */\n  Stack.prototype.popN = function (num) {\n    if (num === void 0) {\n      num = 1;\n    }\n    if (this._store.length < num) {\n      throw new VmError(ERROR.STACK_UNDERFLOW);\n    }\n    if (num === 0) {\n      return [];\n    }\n    return this._store.splice(-1 * num).reverse();\n  };\n  /**\n   * Swap top of stack with an item in the stack.\n   * @param position - Index of item from top of the stack (0-indexed)\n   */\n  Stack.prototype.swap = function (position) {\n    if (this._store.length <= position) {\n      throw new VmError(ERROR.STACK_UNDERFLOW);\n    }\n    var head = this._store.length - 1;\n    var i = this._store.length - position - 1;\n    var tmp = this._store[head];\n    this._store[head] = this._store[i];\n    this._store[i] = tmp;\n  };\n  /**\n   * Pushes a copy of an item in the stack.\n   * @param position - Index of item to be copied (1-indexed)\n   */\n  Stack.prototype.dup = function (position) {\n    if (this._store.length < position) {\n      throw new VmError(ERROR.STACK_UNDERFLOW);\n    }\n    var i = this._store.length - position;\n    this.push(this._store[i].clone());\n  };\n  return Stack;\n}();\nexports.default = Stack;","map":null,"metadata":{},"sourceType":"script"}