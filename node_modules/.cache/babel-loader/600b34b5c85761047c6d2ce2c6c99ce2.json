{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BigNumber = void 0;\nvar bignumber_js_1 = require(\"bignumber.js\");\nObject.defineProperty(exports, \"BigNumber\", {\n  enumerable: true,\n  get: function get() {\n    return bignumber_js_1.BigNumber;\n  }\n});\nbignumber_js_1.BigNumber.config({\n  // By default BigNumber's `toString` method converts to exponential notation if the value has\n  // more then 20 digits. We want to avoid this behavior, so we set EXPONENTIAL_AT to a high number\n  EXPONENTIAL_AT: 1000,\n  // Note(albrow): This is the lowest value for which\n  // `x.div(y).floor() === x.divToInt(y)`\n  // for all values of x and y <= MAX_UINT256, where MAX_UINT256 is the\n  // maximum number represented by the uint256 type in Solidity (2^256-1).\n  DECIMAL_PLACES: 78\n});\n// Set a debug print function for NodeJS\n// Upstream issue: https://github.com/MikeMcl/bignumber.js/issues/188\nvar isNode = require(\"detect-node\");\nif (isNode) {\n  // Dynamically load a NodeJS specific module.\n  // TypeScript requires all imports to be global, so we need to use\n  // `const` here and disable the tslint warning.\n  // tslint:disable-next-line: no-var-requires\n  var util = require('util');\n  // Set a custom util.inspect function\n  // HACK: We add a function to the BigNumber class by assigning to the\n  //       prototype. The function name is a symbol provided by Node.\n  bignumber_js_1.BigNumber.prototype[util.inspect.custom] = function () {\n    // HACK: When executed, `this` will refer to the BigNumber instance.\n    //       This is also why we need a function expression instead of an\n    //       arrow function, as the latter does not have a `this`.\n    // Return the readable string representation\n    // tslint:disable-next-line: no-invalid-this\n    return this.toString();\n  };\n}\n// HACK: CLobber config and set to prevent imported packages from poisoning\n// global BigNumber config\n(function (orig) {\n  return bignumber_js_1.BigNumber.config = function () {\n    return orig({});\n  };\n})(bignumber_js_1.BigNumber.config);\nbignumber_js_1.BigNumber.set = bignumber_js_1.BigNumber.config;","map":null,"metadata":{},"sourceType":"script"}