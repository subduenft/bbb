{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/nicholasschepisi/Desktop/code/bbb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\nvar _classCallCheck = require(\"/Users/nicholasschepisi/Desktop/code/bbb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"/Users/nicholasschepisi/Desktop/code/bbb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\nvar _possibleConstructorReturn = require(\"/Users/nicholasschepisi/Desktop/code/bbb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\nvar _getPrototypeOf = require(\"/Users/nicholasschepisi/Desktop/code/bbb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\nvar _inherits = require(\"/Users/nicholasschepisi/Desktop/code/bbb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ArrayDataType = void 0;\nvar _ = require(\"lodash\");\nvar set_1 = require(\"../abstract_data_types/types/set\");\nvar constants_1 = require(\"../utils/constants\");\nvar ArrayDataType = /*#__PURE__*/function (_set_1$AbstractSetDat) {\n  _inherits(ArrayDataType, _set_1$AbstractSetDat);\n  function ArrayDataType(dataItem, dataTypeFactory) {\n    var _this;\n    _classCallCheck(this, ArrayDataType);\n    // Construct parent\n    var isArray = true;\n    var _ArrayDataType$decode = ArrayDataType.decodeElementTypeAndLengthFromType(dataItem.type),\n      _ArrayDataType$decode2 = _slicedToArray(_ArrayDataType$decode, 2),\n      arrayElementType = _ArrayDataType$decode2[0],\n      arrayLength = _ArrayDataType$decode2[1];\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ArrayDataType).call(this, dataItem, dataTypeFactory, isArray, arrayLength, arrayElementType));\n    // Set array properties\n    _this._elementType = arrayElementType;\n    return _this;\n  }\n  _createClass(ArrayDataType, [{\n    key: \"getSignatureType\",\n    value: function getSignatureType() {\n      return this._computeSignature(false);\n    }\n  }, {\n    key: \"getSignature\",\n    value: function getSignature(isDetailed) {\n      if (_.isEmpty(this.getDataItem().name) || !isDetailed) {\n        return this.getSignatureType();\n      }\n      var name = this.getDataItem().name;\n      var lastIndexOfScopeDelimiter = name.lastIndexOf('.');\n      var isScopedName = lastIndexOfScopeDelimiter !== undefined && lastIndexOfScopeDelimiter > 0;\n      var shortName = isScopedName ? name.substr(lastIndexOfScopeDelimiter + 1) : name;\n      var detailedSignature = \"\".concat(shortName, \" \").concat(this._computeSignature(isDetailed));\n      return detailedSignature;\n    }\n  }, {\n    key: \"_computeSignature\",\n    value: function _computeSignature(isDetailed) {\n      // Compute signature for a single array element\n      var elementDataItem = {\n        type: this._elementType,\n        name: ''\n      };\n      var elementComponents = this.getDataItem().components;\n      if (elementComponents !== undefined) {\n        elementDataItem.components = elementComponents;\n      }\n      var elementDataType = this.getFactory().create(elementDataItem);\n      var elementSignature = elementDataType.getSignature(isDetailed);\n      // Construct signature for array of type `element`\n      if (this._arrayLength === undefined) {\n        return \"\".concat(elementSignature, \"[]\");\n      } else {\n        return \"\".concat(elementSignature, \"[\").concat(this._arrayLength, \"]\");\n      }\n    }\n  }], [{\n    key: \"matchType\",\n    value: function matchType(type) {\n      return ArrayDataType._MATCHER.test(type);\n    }\n  }, {\n    key: \"decodeElementTypeAndLengthFromType\",\n    value: function decodeElementTypeAndLengthFromType(type) {\n      var matches = ArrayDataType._MATCHER.exec(type);\n      if (matches === null || matches.length !== 3) {\n        throw new Error(\"Could not parse array: \".concat(type));\n      } else if (matches[1] === undefined) {\n        throw new Error(\"Could not parse array type: \".concat(type));\n      } else if (matches[2] === undefined) {\n        throw new Error(\"Could not parse array length: \".concat(type));\n      }\n      var arrayElementType = matches[1];\n      var arrayLength = _.isEmpty(matches[2]) ? undefined : parseInt(matches[2], constants_1.constants.DEC_BASE);\n      return [arrayElementType, arrayLength];\n    }\n  }]);\n  return ArrayDataType;\n}(set_1.AbstractSetDataType);\nexports.ArrayDataType = ArrayDataType;\nArrayDataType._MATCHER = RegExp('^(.+)\\\\[([0-9]*)\\\\]$');","map":null,"metadata":{},"sourceType":"script"}