{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function sent() {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (g && (g = 0, op[0] && (_ = 0)), _) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateStandardFulfillBalancesAndApprovals = exports.validateBasicFulfillBalancesAndApprovals = exports.validateOfferBalancesAndApprovals = exports.getInsufficientBalanceAndApprovalAmounts = exports.getBalancesAndApprovals = void 0;\nvar ethers_1 = require(\"ethers\");\nvar constants_1 = require(\"../constants\");\nvar approval_1 = require(\"./approval\");\nvar balance_1 = require(\"./balance\");\nvar criteria_1 = require(\"./criteria\");\nvar item_1 = require(\"./item\");\nvar findBalanceAndApproval = function findBalanceAndApproval(balancesAndApprovals, token, identifierOrCriteria) {\n  var balanceAndApproval = balancesAndApprovals.find(function (_a) {\n    var checkedToken = _a.token,\n      checkedIdentifierOrCriteria = _a.identifierOrCriteria;\n    return token.toLowerCase() === checkedToken.toLowerCase() && checkedIdentifierOrCriteria.toLowerCase() === identifierOrCriteria.toLowerCase();\n  });\n  if (!balanceAndApproval) {\n    throw new Error(\"Balances and approvals didn't contain all tokens and identifiers\");\n  }\n  return balanceAndApproval;\n};\nvar getBalancesAndApprovals = function getBalancesAndApprovals(_a) {\n  var owner = _a.owner,\n    items = _a.items,\n    criterias = _a.criterias,\n    operator = _a.operator,\n    multicallProvider = _a.multicallProvider;\n  return __awaiter(void 0, void 0, void 0, function () {\n    var itemToCriteria;\n    return __generator(this, function (_b) {\n      itemToCriteria = (0, criteria_1.getItemToCriteriaMap)(items, criterias);\n      return [2 /*return*/, Promise.all(items.map(function (item) {\n        return __awaiter(void 0, void 0, void 0, function () {\n          var approvedAmountPromise;\n          var _a;\n          var _b, _c;\n          return __generator(this, function (_d) {\n            switch (_d.label) {\n              case 0:\n                approvedAmountPromise = Promise.resolve(ethers_1.BigNumber.from(0));\n                if ((0, item_1.isErc721Item)(item.itemType) || (0, item_1.isErc1155Item)(item.itemType)) {\n                  approvedAmountPromise = (0, approval_1.approvedItemAmount)(owner, item, operator, multicallProvider);\n                } else if ((0, item_1.isErc20Item)(item.itemType)) {\n                  approvedAmountPromise = (0, approval_1.approvedItemAmount)(owner, item, operator, multicallProvider);\n                }\n                // If native token, we don't need to check for approvals\n                else {\n                  approvedAmountPromise = Promise.resolve(constants_1.MAX_INT);\n                }\n                _a = {\n                  token: item.token,\n                  identifierOrCriteria: (_c = (_b = itemToCriteria.get(item)) === null || _b === void 0 ? void 0 : _b.identifier) !== null && _c !== void 0 ? _c : item.identifierOrCriteria\n                };\n                return [4 /*yield*/, (0, balance_1.balanceOf)(owner, item, multicallProvider, itemToCriteria.get(item))];\n              case 1:\n                _a.balance = _d.sent();\n                return [4 /*yield*/, approvedAmountPromise];\n              case 2:\n                return [2 /*return*/, (_a.approvedAmount = _d.sent(), _a.itemType = item.itemType, _a)];\n            }\n          });\n        });\n      }))];\n    });\n  });\n};\nexports.getBalancesAndApprovals = getBalancesAndApprovals;\nvar getInsufficientBalanceAndApprovalAmounts = function getInsufficientBalanceAndApprovalAmounts(_a) {\n  var balancesAndApprovals = _a.balancesAndApprovals,\n    tokenAndIdentifierAmounts = _a.tokenAndIdentifierAmounts,\n    operator = _a.operator;\n  var tokenAndIdentifierAndAmountNeeded = __spreadArray([], __read(Object.entries(tokenAndIdentifierAmounts).map(function (_a) {\n    var _b = __read(_a, 2),\n      token = _b[0],\n      identifierToAmount = _b[1];\n    return Object.entries(identifierToAmount).map(function (_a) {\n      var _b = __read(_a, 2),\n        identifierOrCriteria = _b[0],\n        amountNeeded = _b[1];\n      return [token, identifierOrCriteria, amountNeeded];\n    });\n  })), false).flat();\n  var filterBalancesOrApprovals = function filterBalancesOrApprovals(filterKey) {\n    return tokenAndIdentifierAndAmountNeeded.filter(function (_a) {\n      var _b = __read(_a, 3),\n        token = _b[0],\n        identifierOrCriteria = _b[1],\n        amountNeeded = _b[2];\n      return findBalanceAndApproval(balancesAndApprovals, token, identifierOrCriteria)[filterKey].lt(amountNeeded);\n    }).map(function (_a) {\n      var _b = __read(_a, 3),\n        token = _b[0],\n        identifierOrCriteria = _b[1],\n        amount = _b[2];\n      var balanceAndApproval = findBalanceAndApproval(balancesAndApprovals, token, identifierOrCriteria);\n      return {\n        token: token,\n        identifierOrCriteria: identifierOrCriteria,\n        requiredAmount: amount,\n        amountHave: balanceAndApproval[filterKey],\n        itemType: balanceAndApproval.itemType\n      };\n    });\n  };\n  var mapToApproval = function mapToApproval(insufficientBalance) {\n    return {\n      token: insufficientBalance.token,\n      identifierOrCriteria: insufficientBalance.identifierOrCriteria,\n      approvedAmount: insufficientBalance.amountHave,\n      requiredApprovedAmount: insufficientBalance.requiredAmount,\n      itemType: insufficientBalance.itemType,\n      operator: operator\n    };\n  };\n  var _b = __read([filterBalancesOrApprovals(\"balance\"), filterBalancesOrApprovals(\"approvedAmount\").map(mapToApproval)], 2),\n    insufficientBalances = _b[0],\n    insufficientApprovals = _b[1];\n  return {\n    insufficientBalances: insufficientBalances,\n    insufficientApprovals: insufficientApprovals\n  };\n};\nexports.getInsufficientBalanceAndApprovalAmounts = getInsufficientBalanceAndApprovalAmounts;\n/**\n * 1. The offerer should have sufficient balance of all offered items.\n * 2. If the order does not indicate proxy utilization, the offerer should have sufficient approvals set\n *    for the Seaport contract for all offered ERC20, ERC721, and ERC1155 items.\n * 3. If the order does indicate proxy utilization, the offerer should have sufficient approvals set\n *    for their respective proxy contract for all offered ERC20, ERC721, and ERC1155 items.\n */\nvar validateOfferBalancesAndApprovals = function validateOfferBalancesAndApprovals(_a) {\n  var offer = _a.offer,\n    criterias = _a.criterias,\n    balancesAndApprovals = _a.balancesAndApprovals,\n    timeBasedItemParams = _a.timeBasedItemParams,\n    _b = _a.throwOnInsufficientBalances,\n    throwOnInsufficientBalances = _b === void 0 ? true : _b,\n    throwOnInsufficientApprovals = _a.throwOnInsufficientApprovals,\n    operator = _a.operator;\n  var _c = (0, exports.getInsufficientBalanceAndApprovalAmounts)({\n      balancesAndApprovals: balancesAndApprovals,\n      tokenAndIdentifierAmounts: (0, item_1.getSummedTokenAndIdentifierAmounts)({\n        items: offer,\n        criterias: criterias,\n        timeBasedItemParams: timeBasedItemParams ? __assign(__assign({}, timeBasedItemParams), {\n          isConsiderationItem: false\n        }) : undefined\n      }),\n      operator: operator\n    }),\n    insufficientBalances = _c.insufficientBalances,\n    insufficientApprovals = _c.insufficientApprovals;\n  if (throwOnInsufficientBalances && insufficientBalances.length > 0) {\n    throw new Error(\"The offerer does not have the amount needed to create or fulfill.\");\n  }\n  if (throwOnInsufficientApprovals && insufficientApprovals.length > 0) {\n    throw new Error(\"The offerer does not have the sufficient approvals.\");\n  }\n  return insufficientApprovals;\n};\nexports.validateOfferBalancesAndApprovals = validateOfferBalancesAndApprovals;\n/**\n * When fulfilling a basic order, the following requirements need to be checked to ensure that the order will be fulfillable:\n * 1. Offer checks need to be performed to ensure that the offerer still has sufficient balance and approvals\n * 2. The fulfiller should have sufficient balance of all consideration items except for those with an\n *    item type that matches the order's offered item type — by way of example, if the fulfilled order offers\n *    an ERC20 item and requires an ERC721 item to the offerer and the same ERC20 item to another recipient,\n *    the fulfiller needs to own the ERC721 item but does not need to own the ERC20 item as it will be sourced from the offerer.\n * 3. If the fulfiller does not elect to utilize a proxy, they need to have sufficient approvals set for the\n *    Seaport contract for all ERC20, ERC721, and ERC1155 consideration items on the fulfilled order except\n *    for ERC20 items with an item type that matches the order's offered item type.\n * 4. If the fulfiller does elect to utilize a proxy, they need to have sufficient approvals set for their\n *    respective proxy contract for all ERC20, ERC721, and ERC1155 consideration items on the fulfilled order\n *    except for ERC20 items with an item type that matches the order's offered item type.\n * 5. If the fulfilled order specifies Ether (or other native tokens) as consideration items, the fulfiller must\n *    be able to supply the sum total of those items as msg.value.\n *\n * @returns the list of insufficient owner and proxy approvals\n */\nvar validateBasicFulfillBalancesAndApprovals = function validateBasicFulfillBalancesAndApprovals(_a) {\n  var offer = _a.offer,\n    consideration = _a.consideration,\n    offererBalancesAndApprovals = _a.offererBalancesAndApprovals,\n    fulfillerBalancesAndApprovals = _a.fulfillerBalancesAndApprovals,\n    timeBasedItemParams = _a.timeBasedItemParams,\n    offererOperator = _a.offererOperator,\n    fulfillerOperator = _a.fulfillerOperator;\n  (0, exports.validateOfferBalancesAndApprovals)({\n    offer: offer,\n    criterias: [],\n    balancesAndApprovals: offererBalancesAndApprovals,\n    timeBasedItemParams: timeBasedItemParams,\n    throwOnInsufficientApprovals: true,\n    operator: offererOperator\n  });\n  var considerationWithoutOfferItemType = consideration.filter(function (item) {\n    return item.itemType !== offer[0].itemType;\n  });\n  var _b = (0, exports.getInsufficientBalanceAndApprovalAmounts)({\n      balancesAndApprovals: fulfillerBalancesAndApprovals,\n      tokenAndIdentifierAmounts: (0, item_1.getSummedTokenAndIdentifierAmounts)({\n        items: considerationWithoutOfferItemType,\n        criterias: [],\n        timeBasedItemParams: __assign(__assign({}, timeBasedItemParams), {\n          isConsiderationItem: true\n        })\n      }),\n      operator: fulfillerOperator\n    }),\n    insufficientBalances = _b.insufficientBalances,\n    insufficientApprovals = _b.insufficientApprovals;\n  if (insufficientBalances.length > 0) {\n    throw new Error(\"The fulfiller does not have the balances needed to fulfill.\");\n  }\n  return insufficientApprovals;\n};\nexports.validateBasicFulfillBalancesAndApprovals = validateBasicFulfillBalancesAndApprovals;\n/**\n * When fulfilling a standard order, the following requirements need to be checked to ensure that the order will be fulfillable:\n * 1. Offer checks need to be performed to ensure that the offerer still has sufficient balance and approvals\n * 2. The fulfiller should have sufficient balance of all consideration items after receiving all offered items\n *    — by way of example, if the fulfilled order offers an ERC20 item and requires an ERC721 item to the offerer\n *    and the same ERC20 item to another recipient with an amount less than or equal to the offered amount,\n *    the fulfiller does not need to own the ERC20 item as it will first be received from the offerer.\n * 3. If the fulfiller does not elect to utilize a proxy, they need to have sufficient approvals set for the\n *    Seaport contract for all ERC20, ERC721, and ERC1155 consideration items on the fulfilled order.\n * 4. If the fulfiller does elect to utilize a proxy, they need to have sufficient approvals set for their\n *    respective proxy contract for all ERC20, ERC721, and ERC1155 consideration items on the fulfilled order.\n * 5. If the fulfilled order specifies Ether (or other native tokens) as consideration items, the fulfiller must\n *    be able to supply the sum total of those items as msg.value.\n *\n * @returns the list of insufficient owner and proxy approvals\n */\nvar validateStandardFulfillBalancesAndApprovals = function validateStandardFulfillBalancesAndApprovals(_a) {\n  var offer = _a.offer,\n    consideration = _a.consideration,\n    offerCriteria = _a.offerCriteria,\n    considerationCriteria = _a.considerationCriteria,\n    offererBalancesAndApprovals = _a.offererBalancesAndApprovals,\n    fulfillerBalancesAndApprovals = _a.fulfillerBalancesAndApprovals,\n    timeBasedItemParams = _a.timeBasedItemParams,\n    offererOperator = _a.offererOperator,\n    fulfillerOperator = _a.fulfillerOperator;\n  (0, exports.validateOfferBalancesAndApprovals)({\n    offer: offer,\n    criterias: offerCriteria,\n    balancesAndApprovals: offererBalancesAndApprovals,\n    timeBasedItemParams: timeBasedItemParams,\n    throwOnInsufficientApprovals: true,\n    operator: offererOperator\n  });\n  var fulfillerBalancesAndApprovalsAfterReceivingOfferedItems = addToExistingBalances({\n    items: offer,\n    criterias: offerCriteria,\n    balancesAndApprovals: fulfillerBalancesAndApprovals,\n    timeBasedItemParams: timeBasedItemParams\n  });\n  var _b = (0, exports.getInsufficientBalanceAndApprovalAmounts)({\n      balancesAndApprovals: fulfillerBalancesAndApprovalsAfterReceivingOfferedItems,\n      tokenAndIdentifierAmounts: (0, item_1.getSummedTokenAndIdentifierAmounts)({\n        items: consideration,\n        criterias: considerationCriteria,\n        timeBasedItemParams: __assign(__assign({}, timeBasedItemParams), {\n          isConsiderationItem: true\n        })\n      }),\n      operator: fulfillerOperator\n    }),\n    insufficientBalances = _b.insufficientBalances,\n    insufficientApprovals = _b.insufficientApprovals;\n  if (insufficientBalances.length > 0) {\n    throw new Error(\"The fulfiller does not have the balances needed to fulfill.\");\n  }\n  return insufficientApprovals;\n};\nexports.validateStandardFulfillBalancesAndApprovals = validateStandardFulfillBalancesAndApprovals;\nvar addToExistingBalances = function addToExistingBalances(_a) {\n  var items = _a.items,\n    criterias = _a.criterias,\n    timeBasedItemParams = _a.timeBasedItemParams,\n    balancesAndApprovals = _a.balancesAndApprovals;\n  var summedItemAmounts = (0, item_1.getSummedTokenAndIdentifierAmounts)({\n    items: items,\n    criterias: criterias,\n    timeBasedItemParams: __assign(__assign({}, timeBasedItemParams), {\n      isConsiderationItem: false\n    })\n  });\n  // Deep clone existing balances\n  var balancesAndApprovalsAfterReceivingItems = balancesAndApprovals.map(function (item) {\n    return __assign({}, item);\n  });\n  // Add each summed item amount to the existing balances as we may want tocheck balances after receiving all items\n  Object.entries(summedItemAmounts).forEach(function (_a) {\n    var _b = __read(_a, 2),\n      token = _b[0],\n      identifierOrCriteriaToAmount = _b[1];\n    return Object.entries(identifierOrCriteriaToAmount).forEach(function (_a) {\n      var _b = __read(_a, 2),\n        identifierOrCriteria = _b[0],\n        amount = _b[1];\n      var balanceAndApproval = findBalanceAndApproval(balancesAndApprovalsAfterReceivingItems, token, identifierOrCriteria);\n      var balanceAndApprovalIndex = balancesAndApprovalsAfterReceivingItems.indexOf(balanceAndApproval);\n      balancesAndApprovalsAfterReceivingItems[balanceAndApprovalIndex].balance = balancesAndApprovalsAfterReceivingItems[balanceAndApprovalIndex].balance.add(amount);\n    });\n  });\n  return balancesAndApprovalsAfterReceivingItems;\n};","map":null,"metadata":{},"sourceType":"script"}