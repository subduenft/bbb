{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/nicholasschepisi/Desktop/code/bbb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\nvar _classCallCheck = require(\"/Users/nicholasschepisi/Desktop/code/bbb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"/Users/nicholasschepisi/Desktop/code/bbb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\nvar _possibleConstructorReturn = require(\"/Users/nicholasschepisi/Desktop/code/bbb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\nvar _getPrototypeOf = require(\"/Users/nicholasschepisi/Desktop/code/bbb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\nvar _inherits = require(\"/Users/nicholasschepisi/Desktop/code/bbb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\nvar _assertThisInitialized = require(\"/Users/nicholasschepisi/Desktop/code/bbb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/assertThisInitialized\");\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AuthenticatedProxyContract = exports.AuthenticatedProxyEvents = void 0;\n// tslint:disable:no-consecutive-blank-lines ordered-imports align trailing-comma enum-naming\n// tslint:disable:whitespace no-unbound-method no-trailing-whitespace\n// tslint:disable:no-unused-variable\nvar base_contract_1 = require(\"@0x/base-contract\");\nvar json_schemas_1 = require(\"@0x/json-schemas\");\nvar utils_1 = require(\"@0x/utils\");\nvar web3_wrapper_1 = require(\"@0x/web3-wrapper\");\nvar assert_1 = require(\"@0x/assert\");\nvar ethers = require(\"ethers\");\nvar AuthenticatedProxyEvents;\n(function (AuthenticatedProxyEvents) {\n  AuthenticatedProxyEvents[\"Revoked\"] = \"Revoked\";\n  AuthenticatedProxyEvents[\"ReceivedEther\"] = \"ReceivedEther\";\n  AuthenticatedProxyEvents[\"ReceivedTokens\"] = \"ReceivedTokens\";\n})(AuthenticatedProxyEvents = exports.AuthenticatedProxyEvents || (exports.AuthenticatedProxyEvents = {}));\n/* istanbul ignore next */\n// tslint:disable:array-type\n// tslint:disable:no-parameter-reassignment\n// tslint:disable-next-line:class-name\nvar AuthenticatedProxyContract = /*#__PURE__*/function (_base_contract_1$Base) {\n  _inherits(AuthenticatedProxyContract, _base_contract_1$Base);\n  function AuthenticatedProxyContract(address, supportedProvider, txDefaults, logDecodeDependencies) {\n    var _this;\n    var deployedBytecode = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : AuthenticatedProxyContract.deployedBytecode;\n    var encoderOverrides = arguments.length > 5 ? arguments[5] : undefined;\n    _classCallCheck(this, AuthenticatedProxyContract);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AuthenticatedProxyContract).call(this, 'AuthenticatedProxy', AuthenticatedProxyContract.ABI(), address, supportedProvider, txDefaults, logDecodeDependencies, deployedBytecode, encoderOverrides));\n    _this._methodABIIndex = {};\n    utils_1.classUtils.bindAll(_assertThisInitialized(_assertThisInitialized(_this)), ['_abiEncoderByFunctionSignature', 'address', '_web3Wrapper']);\n    _this._subscriptionManager = new base_contract_1.SubscriptionManager(AuthenticatedProxyContract.ABI(), _this._web3Wrapper);\n    AuthenticatedProxyContract.ABI().forEach(function (item, index) {\n      if (item.type === 'function') {\n        var methodAbi = item;\n        _this._methodABIIndex[methodAbi.name] = index;\n      }\n    });\n    return _this;\n  }\n  _createClass(AuthenticatedProxyContract, [{\n    key: \"getFunctionSignature\",\n    value: function getFunctionSignature(methodName) {\n      var index = this._methodABIIndex[methodName];\n      var methodAbi = AuthenticatedProxyContract.ABI()[index]; // tslint:disable-line:no-unnecessary-type-assertion\n      var functionSignature = (0, base_contract_1.methodAbiToFunctionSignature)(methodAbi);\n      return functionSignature;\n    }\n  }, {\n    key: \"getABIDecodedTransactionData\",\n    value: function getABIDecodedTransactionData(methodName, callData) {\n      var functionSignature = this.getFunctionSignature(methodName);\n      var self = this;\n      var abiEncoder = self._lookupAbiEncoder(functionSignature);\n      var abiDecodedCallData = abiEncoder.strictDecode(callData);\n      return abiDecodedCallData;\n    }\n  }, {\n    key: \"getABIDecodedReturnData\",\n    value: function getABIDecodedReturnData(methodName, callData) {\n      if (this._encoderOverrides.decodeOutput) {\n        return this._encoderOverrides.decodeOutput(methodName, callData);\n      }\n      var functionSignature = this.getFunctionSignature(methodName);\n      var self = this;\n      var abiEncoder = self._lookupAbiEncoder(functionSignature);\n      var abiDecodedCallData = abiEncoder.strictDecodeReturnValue(callData);\n      return abiDecodedCallData;\n    }\n  }, {\n    key: \"getSelector\",\n    value: function getSelector(methodName) {\n      var functionSignature = this.getFunctionSignature(methodName);\n      var self = this;\n      var abiEncoder = self._lookupAbiEncoder(functionSignature);\n      return abiEncoder.getSelector();\n    }\n  }, {\n    key: \"proxyType\",\n    value: function proxyType() {\n      var self = this;\n      var functionSignature = 'proxyType()';\n      var selector = self._lookupAbiEncoder(functionSignature).getSelector();\n      return {\n        selector: selector,\n        callAsync: function callAsync() {\n          var callData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n          var defaultBlock = arguments.length > 1 ? arguments[1] : undefined;\n          return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n            var rawCallResult, abiEncoder;\n            return _regeneratorRuntime().wrap(function _callee$(_context) {\n              while (1) switch (_context.prev = _context.next) {\n                case 0:\n                  base_contract_1.BaseContract._assertCallParams(callData, defaultBlock);\n                  if (!self._deployedBytecodeIfExists) {\n                    _context.next = 7;\n                    break;\n                  }\n                  _context.next = 4;\n                  return self._evmExecAsync(this.getABIEncodedTransactionData());\n                case 4:\n                  rawCallResult = _context.sent;\n                  _context.next = 10;\n                  break;\n                case 7:\n                  _context.next = 9;\n                  return self._performCallAsync(Object.assign({\n                    data: this.getABIEncodedTransactionData()\n                  }, callData), defaultBlock);\n                case 9:\n                  rawCallResult = _context.sent;\n                case 10:\n                  abiEncoder = self._lookupAbiEncoder(functionSignature);\n                  base_contract_1.BaseContract._throwIfUnexpectedEmptyCallResult(rawCallResult, abiEncoder);\n                  return _context.abrupt(\"return\", abiEncoder.strictDecodeReturnValue(rawCallResult));\n                case 13:\n                case \"end\":\n                  return _context.stop();\n              }\n            }, _callee, this);\n          }));\n        },\n        getABIEncodedTransactionData: function getABIEncodedTransactionData() {\n          return self._strictEncodeArguments(functionSignature, []);\n        }\n      };\n    }\n  }, {\n    key: \"user\",\n    value: function user() {\n      var self = this;\n      var functionSignature = 'user()';\n      var selector = self._lookupAbiEncoder(functionSignature).getSelector();\n      return {\n        selector: selector,\n        callAsync: function callAsync() {\n          var callData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n          var defaultBlock = arguments.length > 1 ? arguments[1] : undefined;\n          return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n            var rawCallResult, abiEncoder;\n            return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n              while (1) switch (_context2.prev = _context2.next) {\n                case 0:\n                  base_contract_1.BaseContract._assertCallParams(callData, defaultBlock);\n                  _context2.next = 3;\n                  return self._performCallAsync(Object.assign({\n                    data: this.getABIEncodedTransactionData()\n                  }, callData), defaultBlock);\n                case 3:\n                  rawCallResult = _context2.sent;\n                  abiEncoder = self._lookupAbiEncoder(functionSignature);\n                  base_contract_1.BaseContract._throwIfUnexpectedEmptyCallResult(rawCallResult, abiEncoder);\n                  return _context2.abrupt(\"return\", abiEncoder.strictDecodeReturnValue(rawCallResult));\n                case 7:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }, _callee2, this);\n          }));\n        },\n        getABIEncodedTransactionData: function getABIEncodedTransactionData() {\n          return self._strictEncodeArguments(functionSignature, []);\n        }\n      };\n    }\n  }, {\n    key: \"implementation\",\n    value: function implementation() {\n      var self = this;\n      var functionSignature = 'implementation()';\n      var selector = self._lookupAbiEncoder(functionSignature).getSelector();\n      return {\n        selector: selector,\n        callAsync: function callAsync() {\n          var callData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n          var defaultBlock = arguments.length > 1 ? arguments[1] : undefined;\n          return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n            var rawCallResult, abiEncoder;\n            return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n              while (1) switch (_context3.prev = _context3.next) {\n                case 0:\n                  base_contract_1.BaseContract._assertCallParams(callData, defaultBlock);\n                  _context3.next = 3;\n                  return self._performCallAsync(Object.assign({\n                    data: this.getABIEncodedTransactionData()\n                  }, callData), defaultBlock);\n                case 3:\n                  rawCallResult = _context3.sent;\n                  abiEncoder = self._lookupAbiEncoder(functionSignature);\n                  base_contract_1.BaseContract._throwIfUnexpectedEmptyCallResult(rawCallResult, abiEncoder);\n                  return _context3.abrupt(\"return\", abiEncoder.strictDecodeReturnValue(rawCallResult));\n                case 7:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }, _callee3, this);\n          }));\n        },\n        getABIEncodedTransactionData: function getABIEncodedTransactionData() {\n          return self._strictEncodeArguments(functionSignature, []);\n        }\n      };\n    }\n  }, {\n    key: \"revoked\",\n    value: function revoked() {\n      var self = this;\n      var functionSignature = 'revoked()';\n      var selector = self._lookupAbiEncoder(functionSignature).getSelector();\n      return {\n        selector: selector,\n        callAsync: function callAsync() {\n          var callData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n          var defaultBlock = arguments.length > 1 ? arguments[1] : undefined;\n          return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n            var rawCallResult, abiEncoder;\n            return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n              while (1) switch (_context4.prev = _context4.next) {\n                case 0:\n                  base_contract_1.BaseContract._assertCallParams(callData, defaultBlock);\n                  _context4.next = 3;\n                  return self._performCallAsync(Object.assign({\n                    data: this.getABIEncodedTransactionData()\n                  }, callData), defaultBlock);\n                case 3:\n                  rawCallResult = _context4.sent;\n                  abiEncoder = self._lookupAbiEncoder(functionSignature);\n                  base_contract_1.BaseContract._throwIfUnexpectedEmptyCallResult(rawCallResult, abiEncoder);\n                  return _context4.abrupt(\"return\", abiEncoder.strictDecodeReturnValue(rawCallResult));\n                case 7:\n                case \"end\":\n                  return _context4.stop();\n              }\n            }, _callee4, this);\n          }));\n        },\n        getABIEncodedTransactionData: function getABIEncodedTransactionData() {\n          return self._strictEncodeArguments(functionSignature, []);\n        }\n      };\n    }\n  }, {\n    key: \"upgradeabilityOwner\",\n    value: function upgradeabilityOwner() {\n      var self = this;\n      var functionSignature = 'upgradeabilityOwner()';\n      var selector = self._lookupAbiEncoder(functionSignature).getSelector();\n      return {\n        selector: selector,\n        callAsync: function callAsync() {\n          var callData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n          var defaultBlock = arguments.length > 1 ? arguments[1] : undefined;\n          return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n            var rawCallResult, abiEncoder;\n            return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n              while (1) switch (_context5.prev = _context5.next) {\n                case 0:\n                  base_contract_1.BaseContract._assertCallParams(callData, defaultBlock);\n                  _context5.next = 3;\n                  return self._performCallAsync(Object.assign({\n                    data: this.getABIEncodedTransactionData()\n                  }, callData), defaultBlock);\n                case 3:\n                  rawCallResult = _context5.sent;\n                  abiEncoder = self._lookupAbiEncoder(functionSignature);\n                  base_contract_1.BaseContract._throwIfUnexpectedEmptyCallResult(rawCallResult, abiEncoder);\n                  return _context5.abrupt(\"return\", abiEncoder.strictDecodeReturnValue(rawCallResult));\n                case 7:\n                case \"end\":\n                  return _context5.stop();\n              }\n            }, _callee5, this);\n          }));\n        },\n        getABIEncodedTransactionData: function getABIEncodedTransactionData() {\n          return self._strictEncodeArguments(functionSignature, []);\n        }\n      };\n    }\n  }, {\n    key: \"registry\",\n    value: function registry() {\n      var self = this;\n      var functionSignature = 'registry()';\n      var selector = self._lookupAbiEncoder(functionSignature).getSelector();\n      return {\n        selector: selector,\n        callAsync: function callAsync() {\n          var callData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n          var defaultBlock = arguments.length > 1 ? arguments[1] : undefined;\n          return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n            var rawCallResult, abiEncoder;\n            return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n              while (1) switch (_context6.prev = _context6.next) {\n                case 0:\n                  base_contract_1.BaseContract._assertCallParams(callData, defaultBlock);\n                  _context6.next = 3;\n                  return self._performCallAsync(Object.assign({\n                    data: this.getABIEncodedTransactionData()\n                  }, callData), defaultBlock);\n                case 3:\n                  rawCallResult = _context6.sent;\n                  abiEncoder = self._lookupAbiEncoder(functionSignature);\n                  base_contract_1.BaseContract._throwIfUnexpectedEmptyCallResult(rawCallResult, abiEncoder);\n                  return _context6.abrupt(\"return\", abiEncoder.strictDecodeReturnValue(rawCallResult));\n                case 7:\n                case \"end\":\n                  return _context6.stop();\n              }\n            }, _callee6, this);\n          }));\n        },\n        getABIEncodedTransactionData: function getABIEncodedTransactionData() {\n          return self._strictEncodeArguments(functionSignature, []);\n        }\n      };\n    }\n  }, {\n    key: \"receiveApproval\",\n    value: function receiveApproval(from, value, token, extraData) {\n      var self = this;\n      assert_1.assert.isString('from', from);\n      assert_1.assert.isBigNumber('value', value);\n      assert_1.assert.isString('token', token);\n      assert_1.assert.isString('extraData', extraData);\n      var functionSignature = 'receiveApproval(address,uint256,address,bytes)';\n      var selector = self._lookupAbiEncoder(functionSignature).getSelector();\n      return {\n        selector: selector,\n        sendTransactionAsync: function sendTransactionAsync(txData) {\n          var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n            shouldValidate: true\n          };\n          return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n            var txDataWithDefaults;\n            return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n              while (1) switch (_context7.prev = _context7.next) {\n                case 0:\n                  _context7.next = 2;\n                  return self._applyDefaultsToTxDataAsync(Object.assign({\n                    data: this.getABIEncodedTransactionData()\n                  }, txData), this.estimateGasAsync.bind(this));\n                case 2:\n                  txDataWithDefaults = _context7.sent;\n                  if (!(opts.shouldValidate !== false)) {\n                    _context7.next = 6;\n                    break;\n                  }\n                  _context7.next = 6;\n                  return this.callAsync(txDataWithDefaults);\n                case 6:\n                  return _context7.abrupt(\"return\", self._web3Wrapper.sendTransactionAsync(txDataWithDefaults));\n                case 7:\n                case \"end\":\n                  return _context7.stop();\n              }\n            }, _callee7, this);\n          }));\n        },\n        awaitTransactionSuccessAsync: function awaitTransactionSuccessAsync(txData) {\n          var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n            shouldValidate: true\n          };\n          return self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);\n        },\n        estimateGasAsync: function estimateGasAsync(txData) {\n          return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {\n            var txDataWithDefaults;\n            return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n              while (1) switch (_context8.prev = _context8.next) {\n                case 0:\n                  _context8.next = 2;\n                  return self._applyDefaultsToTxDataAsync(Object.assign({\n                    data: this.getABIEncodedTransactionData()\n                  }, txData));\n                case 2:\n                  txDataWithDefaults = _context8.sent;\n                  return _context8.abrupt(\"return\", self._web3Wrapper.estimateGasAsync(txDataWithDefaults));\n                case 4:\n                case \"end\":\n                  return _context8.stop();\n              }\n            }, _callee8, this);\n          }));\n        },\n        createAccessListAsync: function createAccessListAsync(txData, defaultBlock) {\n          return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {\n            var txDataWithDefaults;\n            return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n              while (1) switch (_context9.prev = _context9.next) {\n                case 0:\n                  _context9.next = 2;\n                  return self._applyDefaultsToTxDataAsync(Object.assign({\n                    data: this.getABIEncodedTransactionData()\n                  }, txData));\n                case 2:\n                  txDataWithDefaults = _context9.sent;\n                  return _context9.abrupt(\"return\", self._web3Wrapper.createAccessListAsync(txDataWithDefaults, defaultBlock));\n                case 4:\n                case \"end\":\n                  return _context9.stop();\n              }\n            }, _callee9, this);\n          }));\n        },\n        callAsync: function callAsync() {\n          var callData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n          var defaultBlock = arguments.length > 1 ? arguments[1] : undefined;\n          return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {\n            var rawCallResult, abiEncoder;\n            return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n              while (1) switch (_context10.prev = _context10.next) {\n                case 0:\n                  base_contract_1.BaseContract._assertCallParams(callData, defaultBlock);\n                  _context10.next = 3;\n                  return self._performCallAsync(Object.assign({\n                    data: this.getABIEncodedTransactionData()\n                  }, callData), defaultBlock);\n                case 3:\n                  rawCallResult = _context10.sent;\n                  abiEncoder = self._lookupAbiEncoder(functionSignature);\n                  base_contract_1.BaseContract._throwIfUnexpectedEmptyCallResult(rawCallResult, abiEncoder);\n                  return _context10.abrupt(\"return\", abiEncoder.strictDecodeReturnValue(rawCallResult));\n                case 7:\n                case \"end\":\n                  return _context10.stop();\n              }\n            }, _callee10, this);\n          }));\n        },\n        getABIEncodedTransactionData: function getABIEncodedTransactionData() {\n          return self._strictEncodeArguments(functionSignature, [from.toLowerCase(), value, token.toLowerCase(), extraData]);\n        }\n      };\n    }\n  }, {\n    key: \"initialize\",\n    value: function initialize(addrUser, addrRegistry) {\n      var self = this;\n      assert_1.assert.isString('addrUser', addrUser);\n      assert_1.assert.isString('addrRegistry', addrRegistry);\n      var functionSignature = 'initialize(address,address)';\n      var selector = self._lookupAbiEncoder(functionSignature).getSelector();\n      return {\n        selector: selector,\n        sendTransactionAsync: function sendTransactionAsync(txData) {\n          var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n            shouldValidate: true\n          };\n          return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {\n            var txDataWithDefaults;\n            return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n              while (1) switch (_context11.prev = _context11.next) {\n                case 0:\n                  _context11.next = 2;\n                  return self._applyDefaultsToTxDataAsync(Object.assign({\n                    data: this.getABIEncodedTransactionData()\n                  }, txData), this.estimateGasAsync.bind(this));\n                case 2:\n                  txDataWithDefaults = _context11.sent;\n                  if (!(opts.shouldValidate !== false)) {\n                    _context11.next = 6;\n                    break;\n                  }\n                  _context11.next = 6;\n                  return this.callAsync(txDataWithDefaults);\n                case 6:\n                  return _context11.abrupt(\"return\", self._web3Wrapper.sendTransactionAsync(txDataWithDefaults));\n                case 7:\n                case \"end\":\n                  return _context11.stop();\n              }\n            }, _callee11, this);\n          }));\n        },\n        awaitTransactionSuccessAsync: function awaitTransactionSuccessAsync(txData) {\n          var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n            shouldValidate: true\n          };\n          return self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);\n        },\n        estimateGasAsync: function estimateGasAsync(txData) {\n          return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee12() {\n            var txDataWithDefaults;\n            return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n              while (1) switch (_context12.prev = _context12.next) {\n                case 0:\n                  _context12.next = 2;\n                  return self._applyDefaultsToTxDataAsync(Object.assign({\n                    data: this.getABIEncodedTransactionData()\n                  }, txData));\n                case 2:\n                  txDataWithDefaults = _context12.sent;\n                  return _context12.abrupt(\"return\", self._web3Wrapper.estimateGasAsync(txDataWithDefaults));\n                case 4:\n                case \"end\":\n                  return _context12.stop();\n              }\n            }, _callee12, this);\n          }));\n        },\n        createAccessListAsync: function createAccessListAsync(txData, defaultBlock) {\n          return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee13() {\n            var txDataWithDefaults;\n            return _regeneratorRuntime().wrap(function _callee13$(_context13) {\n              while (1) switch (_context13.prev = _context13.next) {\n                case 0:\n                  _context13.next = 2;\n                  return self._applyDefaultsToTxDataAsync(Object.assign({\n                    data: this.getABIEncodedTransactionData()\n                  }, txData));\n                case 2:\n                  txDataWithDefaults = _context13.sent;\n                  return _context13.abrupt(\"return\", self._web3Wrapper.createAccessListAsync(txDataWithDefaults, defaultBlock));\n                case 4:\n                case \"end\":\n                  return _context13.stop();\n              }\n            }, _callee13, this);\n          }));\n        },\n        callAsync: function callAsync() {\n          var callData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n          var defaultBlock = arguments.length > 1 ? arguments[1] : undefined;\n          return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee14() {\n            var rawCallResult, abiEncoder;\n            return _regeneratorRuntime().wrap(function _callee14$(_context14) {\n              while (1) switch (_context14.prev = _context14.next) {\n                case 0:\n                  base_contract_1.BaseContract._assertCallParams(callData, defaultBlock);\n                  _context14.next = 3;\n                  return self._performCallAsync(Object.assign({\n                    data: this.getABIEncodedTransactionData()\n                  }, callData), defaultBlock);\n                case 3:\n                  rawCallResult = _context14.sent;\n                  abiEncoder = self._lookupAbiEncoder(functionSignature);\n                  base_contract_1.BaseContract._throwIfUnexpectedEmptyCallResult(rawCallResult, abiEncoder);\n                  return _context14.abrupt(\"return\", abiEncoder.strictDecodeReturnValue(rawCallResult));\n                case 7:\n                case \"end\":\n                  return _context14.stop();\n              }\n            }, _callee14, this);\n          }));\n        },\n        getABIEncodedTransactionData: function getABIEncodedTransactionData() {\n          return self._strictEncodeArguments(functionSignature, [addrUser.toLowerCase(), addrRegistry.toLowerCase()]);\n        }\n      };\n    }\n  }, {\n    key: \"setRevoke\",\n    value: function setRevoke(revoke) {\n      var self = this;\n      assert_1.assert.isBoolean('revoke', revoke);\n      var functionSignature = 'setRevoke(bool)';\n      var selector = self._lookupAbiEncoder(functionSignature).getSelector();\n      return {\n        selector: selector,\n        sendTransactionAsync: function sendTransactionAsync(txData) {\n          var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n            shouldValidate: true\n          };\n          return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee15() {\n            var txDataWithDefaults;\n            return _regeneratorRuntime().wrap(function _callee15$(_context15) {\n              while (1) switch (_context15.prev = _context15.next) {\n                case 0:\n                  _context15.next = 2;\n                  return self._applyDefaultsToTxDataAsync(Object.assign({\n                    data: this.getABIEncodedTransactionData()\n                  }, txData), this.estimateGasAsync.bind(this));\n                case 2:\n                  txDataWithDefaults = _context15.sent;\n                  if (!(opts.shouldValidate !== false)) {\n                    _context15.next = 6;\n                    break;\n                  }\n                  _context15.next = 6;\n                  return this.callAsync(txDataWithDefaults);\n                case 6:\n                  return _context15.abrupt(\"return\", self._web3Wrapper.sendTransactionAsync(txDataWithDefaults));\n                case 7:\n                case \"end\":\n                  return _context15.stop();\n              }\n            }, _callee15, this);\n          }));\n        },\n        awaitTransactionSuccessAsync: function awaitTransactionSuccessAsync(txData) {\n          var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n            shouldValidate: true\n          };\n          return self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);\n        },\n        estimateGasAsync: function estimateGasAsync(txData) {\n          return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee16() {\n            var txDataWithDefaults;\n            return _regeneratorRuntime().wrap(function _callee16$(_context16) {\n              while (1) switch (_context16.prev = _context16.next) {\n                case 0:\n                  _context16.next = 2;\n                  return self._applyDefaultsToTxDataAsync(Object.assign({\n                    data: this.getABIEncodedTransactionData()\n                  }, txData));\n                case 2:\n                  txDataWithDefaults = _context16.sent;\n                  return _context16.abrupt(\"return\", self._web3Wrapper.estimateGasAsync(txDataWithDefaults));\n                case 4:\n                case \"end\":\n                  return _context16.stop();\n              }\n            }, _callee16, this);\n          }));\n        },\n        createAccessListAsync: function createAccessListAsync(txData, defaultBlock) {\n          return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee17() {\n            var txDataWithDefaults;\n            return _regeneratorRuntime().wrap(function _callee17$(_context17) {\n              while (1) switch (_context17.prev = _context17.next) {\n                case 0:\n                  _context17.next = 2;\n                  return self._applyDefaultsToTxDataAsync(Object.assign({\n                    data: this.getABIEncodedTransactionData()\n                  }, txData));\n                case 2:\n                  txDataWithDefaults = _context17.sent;\n                  return _context17.abrupt(\"return\", self._web3Wrapper.createAccessListAsync(txDataWithDefaults, defaultBlock));\n                case 4:\n                case \"end\":\n                  return _context17.stop();\n              }\n            }, _callee17, this);\n          }));\n        },\n        callAsync: function callAsync() {\n          var callData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n          var defaultBlock = arguments.length > 1 ? arguments[1] : undefined;\n          return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee18() {\n            var rawCallResult, abiEncoder;\n            return _regeneratorRuntime().wrap(function _callee18$(_context18) {\n              while (1) switch (_context18.prev = _context18.next) {\n                case 0:\n                  base_contract_1.BaseContract._assertCallParams(callData, defaultBlock);\n                  _context18.next = 3;\n                  return self._performCallAsync(Object.assign({\n                    data: this.getABIEncodedTransactionData()\n                  }, callData), defaultBlock);\n                case 3:\n                  rawCallResult = _context18.sent;\n                  abiEncoder = self._lookupAbiEncoder(functionSignature);\n                  base_contract_1.BaseContract._throwIfUnexpectedEmptyCallResult(rawCallResult, abiEncoder);\n                  return _context18.abrupt(\"return\", abiEncoder.strictDecodeReturnValue(rawCallResult));\n                case 7:\n                case \"end\":\n                  return _context18.stop();\n              }\n            }, _callee18, this);\n          }));\n        },\n        getABIEncodedTransactionData: function getABIEncodedTransactionData() {\n          return self._strictEncodeArguments(functionSignature, [revoke]);\n        }\n      };\n    }\n  }, {\n    key: \"proxy\",\n    value: function proxy(dest, howToCall, calldata) {\n      var self = this;\n      assert_1.assert.isString('dest', dest);\n      assert_1.assert.isNumberOrBigNumber('howToCall', howToCall);\n      assert_1.assert.isString('calldata', calldata);\n      var functionSignature = 'proxy(address,uint8,bytes)';\n      var selector = self._lookupAbiEncoder(functionSignature).getSelector();\n      return {\n        selector: selector,\n        sendTransactionAsync: function sendTransactionAsync(txData) {\n          var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n            shouldValidate: true\n          };\n          return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee19() {\n            var txDataWithDefaults;\n            return _regeneratorRuntime().wrap(function _callee19$(_context19) {\n              while (1) switch (_context19.prev = _context19.next) {\n                case 0:\n                  _context19.next = 2;\n                  return self._applyDefaultsToTxDataAsync(Object.assign({\n                    data: this.getABIEncodedTransactionData()\n                  }, txData), this.estimateGasAsync.bind(this));\n                case 2:\n                  txDataWithDefaults = _context19.sent;\n                  if (!(opts.shouldValidate !== false)) {\n                    _context19.next = 6;\n                    break;\n                  }\n                  _context19.next = 6;\n                  return this.callAsync(txDataWithDefaults);\n                case 6:\n                  return _context19.abrupt(\"return\", self._web3Wrapper.sendTransactionAsync(txDataWithDefaults));\n                case 7:\n                case \"end\":\n                  return _context19.stop();\n              }\n            }, _callee19, this);\n          }));\n        },\n        awaitTransactionSuccessAsync: function awaitTransactionSuccessAsync(txData) {\n          var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n            shouldValidate: true\n          };\n          return self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);\n        },\n        estimateGasAsync: function estimateGasAsync(txData) {\n          return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee20() {\n            var txDataWithDefaults;\n            return _regeneratorRuntime().wrap(function _callee20$(_context20) {\n              while (1) switch (_context20.prev = _context20.next) {\n                case 0:\n                  _context20.next = 2;\n                  return self._applyDefaultsToTxDataAsync(Object.assign({\n                    data: this.getABIEncodedTransactionData()\n                  }, txData));\n                case 2:\n                  txDataWithDefaults = _context20.sent;\n                  return _context20.abrupt(\"return\", self._web3Wrapper.estimateGasAsync(txDataWithDefaults));\n                case 4:\n                case \"end\":\n                  return _context20.stop();\n              }\n            }, _callee20, this);\n          }));\n        },\n        createAccessListAsync: function createAccessListAsync(txData, defaultBlock) {\n          return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee21() {\n            var txDataWithDefaults;\n            return _regeneratorRuntime().wrap(function _callee21$(_context21) {\n              while (1) switch (_context21.prev = _context21.next) {\n                case 0:\n                  _context21.next = 2;\n                  return self._applyDefaultsToTxDataAsync(Object.assign({\n                    data: this.getABIEncodedTransactionData()\n                  }, txData));\n                case 2:\n                  txDataWithDefaults = _context21.sent;\n                  return _context21.abrupt(\"return\", self._web3Wrapper.createAccessListAsync(txDataWithDefaults, defaultBlock));\n                case 4:\n                case \"end\":\n                  return _context21.stop();\n              }\n            }, _callee21, this);\n          }));\n        },\n        callAsync: function callAsync() {\n          var callData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n          var defaultBlock = arguments.length > 1 ? arguments[1] : undefined;\n          return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee22() {\n            var rawCallResult, abiEncoder;\n            return _regeneratorRuntime().wrap(function _callee22$(_context22) {\n              while (1) switch (_context22.prev = _context22.next) {\n                case 0:\n                  base_contract_1.BaseContract._assertCallParams(callData, defaultBlock);\n                  _context22.next = 3;\n                  return self._performCallAsync(Object.assign({\n                    data: this.getABIEncodedTransactionData()\n                  }, callData), defaultBlock);\n                case 3:\n                  rawCallResult = _context22.sent;\n                  abiEncoder = self._lookupAbiEncoder(functionSignature);\n                  base_contract_1.BaseContract._throwIfUnexpectedEmptyCallResult(rawCallResult, abiEncoder);\n                  return _context22.abrupt(\"return\", abiEncoder.strictDecodeReturnValue(rawCallResult));\n                case 7:\n                case \"end\":\n                  return _context22.stop();\n              }\n            }, _callee22, this);\n          }));\n        },\n        getABIEncodedTransactionData: function getABIEncodedTransactionData() {\n          return self._strictEncodeArguments(functionSignature, [dest.toLowerCase(), howToCall, calldata]);\n        }\n      };\n    }\n  }, {\n    key: \"proxyAssert\",\n    value: function proxyAssert(dest, howToCall, calldata) {\n      var self = this;\n      assert_1.assert.isString('dest', dest);\n      assert_1.assert.isNumberOrBigNumber('howToCall', howToCall);\n      assert_1.assert.isString('calldata', calldata);\n      var functionSignature = 'proxyAssert(address,uint8,bytes)';\n      var selector = self._lookupAbiEncoder(functionSignature).getSelector();\n      return {\n        selector: selector,\n        sendTransactionAsync: function sendTransactionAsync(txData) {\n          var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n            shouldValidate: true\n          };\n          return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee23() {\n            var txDataWithDefaults;\n            return _regeneratorRuntime().wrap(function _callee23$(_context23) {\n              while (1) switch (_context23.prev = _context23.next) {\n                case 0:\n                  _context23.next = 2;\n                  return self._applyDefaultsToTxDataAsync(Object.assign({\n                    data: this.getABIEncodedTransactionData()\n                  }, txData), this.estimateGasAsync.bind(this));\n                case 2:\n                  txDataWithDefaults = _context23.sent;\n                  if (!(opts.shouldValidate !== false)) {\n                    _context23.next = 6;\n                    break;\n                  }\n                  _context23.next = 6;\n                  return this.callAsync(txDataWithDefaults);\n                case 6:\n                  return _context23.abrupt(\"return\", self._web3Wrapper.sendTransactionAsync(txDataWithDefaults));\n                case 7:\n                case \"end\":\n                  return _context23.stop();\n              }\n            }, _callee23, this);\n          }));\n        },\n        awaitTransactionSuccessAsync: function awaitTransactionSuccessAsync(txData) {\n          var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n            shouldValidate: true\n          };\n          return self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);\n        },\n        estimateGasAsync: function estimateGasAsync(txData) {\n          return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee24() {\n            var txDataWithDefaults;\n            return _regeneratorRuntime().wrap(function _callee24$(_context24) {\n              while (1) switch (_context24.prev = _context24.next) {\n                case 0:\n                  _context24.next = 2;\n                  return self._applyDefaultsToTxDataAsync(Object.assign({\n                    data: this.getABIEncodedTransactionData()\n                  }, txData));\n                case 2:\n                  txDataWithDefaults = _context24.sent;\n                  return _context24.abrupt(\"return\", self._web3Wrapper.estimateGasAsync(txDataWithDefaults));\n                case 4:\n                case \"end\":\n                  return _context24.stop();\n              }\n            }, _callee24, this);\n          }));\n        },\n        createAccessListAsync: function createAccessListAsync(txData, defaultBlock) {\n          return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee25() {\n            var txDataWithDefaults;\n            return _regeneratorRuntime().wrap(function _callee25$(_context25) {\n              while (1) switch (_context25.prev = _context25.next) {\n                case 0:\n                  _context25.next = 2;\n                  return self._applyDefaultsToTxDataAsync(Object.assign({\n                    data: this.getABIEncodedTransactionData()\n                  }, txData));\n                case 2:\n                  txDataWithDefaults = _context25.sent;\n                  return _context25.abrupt(\"return\", self._web3Wrapper.createAccessListAsync(txDataWithDefaults, defaultBlock));\n                case 4:\n                case \"end\":\n                  return _context25.stop();\n              }\n            }, _callee25, this);\n          }));\n        },\n        callAsync: function callAsync() {\n          var callData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n          var defaultBlock = arguments.length > 1 ? arguments[1] : undefined;\n          return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee26() {\n            var rawCallResult, abiEncoder;\n            return _regeneratorRuntime().wrap(function _callee26$(_context26) {\n              while (1) switch (_context26.prev = _context26.next) {\n                case 0:\n                  base_contract_1.BaseContract._assertCallParams(callData, defaultBlock);\n                  _context26.next = 3;\n                  return self._performCallAsync(Object.assign({\n                    data: this.getABIEncodedTransactionData()\n                  }, callData), defaultBlock);\n                case 3:\n                  rawCallResult = _context26.sent;\n                  abiEncoder = self._lookupAbiEncoder(functionSignature);\n                  base_contract_1.BaseContract._throwIfUnexpectedEmptyCallResult(rawCallResult, abiEncoder);\n                  return _context26.abrupt(\"return\", abiEncoder.strictDecodeReturnValue(rawCallResult));\n                case 7:\n                case \"end\":\n                  return _context26.stop();\n              }\n            }, _callee26, this);\n          }));\n        },\n        getABIEncodedTransactionData: function getABIEncodedTransactionData() {\n          return self._strictEncodeArguments(functionSignature, [dest.toLowerCase(), howToCall, calldata]);\n        }\n      };\n    }\n    /**\n     * Subscribe to an event type emitted by the AuthenticatedProxy contract.\n     * @param eventName The AuthenticatedProxy contract event you would like to subscribe to.\n     * @param indexFilterValues An object where the keys are indexed args returned by the event and\n     * the value is the value you are interested in. E.g `{maker: aUserAddressHex}`\n     * @param callback Callback that gets called when a log is added/removed\n     * @param isVerbose Enable verbose subscription warnings (e.g recoverable network issues encountered)\n     * @return Subscription token used later to unsubscribe\n     */\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(eventName, indexFilterValues, callback) {\n      var isVerbose = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      var blockPollingIntervalMs = arguments.length > 4 ? arguments[4] : undefined;\n      assert_1.assert.doesBelongToStringEnum('eventName', eventName, AuthenticatedProxyEvents);\n      assert_1.assert.doesConformToSchema('indexFilterValues', indexFilterValues, json_schemas_1.schemas.indexFilterValuesSchema);\n      assert_1.assert.isFunction('callback', callback);\n      var subscriptionToken = this._subscriptionManager.subscribe(this.address, eventName, indexFilterValues, AuthenticatedProxyContract.ABI(), callback, isVerbose, blockPollingIntervalMs);\n      return subscriptionToken;\n    }\n    /**\n     * Cancel a subscription\n     * @param subscriptionToken Subscription token returned by `subscribe()`\n     */\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe(subscriptionToken) {\n      this._subscriptionManager.unsubscribe(subscriptionToken);\n    }\n    /**\n     * Cancels all existing subscriptions\n     */\n  }, {\n    key: \"unsubscribeAll\",\n    value: function unsubscribeAll() {\n      this._subscriptionManager.unsubscribeAll();\n    }\n    /**\n     * Gets historical logs without creating a subscription\n     * @param eventName The AuthenticatedProxy contract event you would like to subscribe to.\n     * @param blockRange Block range to get logs from.\n     * @param indexFilterValues An object where the keys are indexed args returned by the event and\n     * the value is the value you are interested in. E.g `{_from: aUserAddressHex}`\n     * @return Array of logs that match the parameters\n     */\n  }, {\n    key: \"getLogsAsync\",\n    value: function getLogsAsync(eventName, blockRange, indexFilterValues) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee27() {\n        var logs;\n        return _regeneratorRuntime().wrap(function _callee27$(_context27) {\n          while (1) switch (_context27.prev = _context27.next) {\n            case 0:\n              assert_1.assert.doesBelongToStringEnum('eventName', eventName, AuthenticatedProxyEvents);\n              assert_1.assert.doesConformToSchema('blockRange', blockRange, json_schemas_1.schemas.blockRangeSchema);\n              assert_1.assert.doesConformToSchema('indexFilterValues', indexFilterValues, json_schemas_1.schemas.indexFilterValuesSchema);\n              _context27.next = 5;\n              return this._subscriptionManager.getLogsAsync(this.address, eventName, blockRange, indexFilterValues, AuthenticatedProxyContract.ABI());\n            case 5:\n              logs = _context27.sent;\n              return _context27.abrupt(\"return\", logs);\n            case 7:\n            case \"end\":\n              return _context27.stop();\n          }\n        }, _callee27, this);\n      }));\n    }\n  }], [{\n    key: \"deployFrom0xArtifactAsync\",\n    value: function deployFrom0xArtifactAsync(artifact, supportedProvider, txDefaults, logDecodeDependencies) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee28() {\n        var provider, bytecode, abi, logDecodeDependenciesAbiOnly, _i, _Object$keys, key;\n        return _regeneratorRuntime().wrap(function _callee28$(_context28) {\n          while (1) switch (_context28.prev = _context28.next) {\n            case 0:\n              assert_1.assert.doesConformToSchema('txDefaults', txDefaults, json_schemas_1.schemas.txDataSchema);\n              if (!(artifact.compilerOutput === undefined)) {\n                _context28.next = 3;\n                break;\n              }\n              throw new Error('Compiler output not found in the artifact file');\n            case 3:\n              provider = utils_1.providerUtils.standardizeOrThrow(supportedProvider);\n              bytecode = artifact.compilerOutput.evm.bytecode.object;\n              abi = artifact.compilerOutput.abi;\n              logDecodeDependenciesAbiOnly = {};\n              if (Object.keys(logDecodeDependencies) !== undefined) {\n                for (_i = 0, _Object$keys = Object.keys(logDecodeDependencies); _i < _Object$keys.length; _i++) {\n                  key = _Object$keys[_i];\n                  logDecodeDependenciesAbiOnly[key] = logDecodeDependencies[key].compilerOutput.abi;\n                }\n              }\n              return _context28.abrupt(\"return\", AuthenticatedProxyContract.deployAsync(bytecode, abi, provider, txDefaults, logDecodeDependenciesAbiOnly));\n            case 9:\n            case \"end\":\n              return _context28.stop();\n          }\n        }, _callee28);\n      }));\n    }\n  }, {\n    key: \"deployWithLibrariesFrom0xArtifactAsync\",\n    value: function deployWithLibrariesFrom0xArtifactAsync(artifact, libraryArtifacts, supportedProvider, txDefaults, logDecodeDependencies) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee29() {\n        var provider, abi, logDecodeDependenciesAbiOnly, _i2, _Object$keys2, key, libraryAddresses, bytecode;\n        return _regeneratorRuntime().wrap(function _callee29$(_context29) {\n          while (1) switch (_context29.prev = _context29.next) {\n            case 0:\n              assert_1.assert.doesConformToSchema('txDefaults', txDefaults, json_schemas_1.schemas.txDataSchema);\n              if (!(artifact.compilerOutput === undefined)) {\n                _context29.next = 3;\n                break;\n              }\n              throw new Error('Compiler output not found in the artifact file');\n            case 3:\n              provider = utils_1.providerUtils.standardizeOrThrow(supportedProvider);\n              abi = artifact.compilerOutput.abi;\n              logDecodeDependenciesAbiOnly = {};\n              if (Object.keys(logDecodeDependencies) !== undefined) {\n                for (_i2 = 0, _Object$keys2 = Object.keys(logDecodeDependencies); _i2 < _Object$keys2.length; _i2++) {\n                  key = _Object$keys2[_i2];\n                  logDecodeDependenciesAbiOnly[key] = logDecodeDependencies[key].compilerOutput.abi;\n                }\n              }\n              _context29.next = 9;\n              return AuthenticatedProxyContract._deployLibrariesAsync(artifact, libraryArtifacts, new web3_wrapper_1.Web3Wrapper(provider), txDefaults);\n            case 9:\n              libraryAddresses = _context29.sent;\n              bytecode = (0, base_contract_1.linkLibrariesInBytecode)(artifact, libraryAddresses);\n              return _context29.abrupt(\"return\", AuthenticatedProxyContract.deployAsync(bytecode, abi, provider, txDefaults, logDecodeDependenciesAbiOnly));\n            case 12:\n            case \"end\":\n              return _context29.stop();\n          }\n        }, _callee29);\n      }));\n    }\n  }, {\n    key: \"deployAsync\",\n    value: function deployAsync(bytecode, abi, supportedProvider, txDefaults, logDecodeDependencies) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee30() {\n        var provider, constructorAbi, _base_contract_1$Base2, _base_contract_1$Base3, iface, deployInfo, txData, web3Wrapper, txDataWithDefaults, txHash, txReceipt, contractInstance;\n        return _regeneratorRuntime().wrap(function _callee30$(_context30) {\n          while (1) switch (_context30.prev = _context30.next) {\n            case 0:\n              assert_1.assert.isHexString('bytecode', bytecode);\n              assert_1.assert.doesConformToSchema('txDefaults', txDefaults, json_schemas_1.schemas.txDataSchema);\n              provider = utils_1.providerUtils.standardizeOrThrow(supportedProvider);\n              constructorAbi = base_contract_1.BaseContract._lookupConstructorAbi(abi);\n              _base_contract_1$Base2 = base_contract_1.BaseContract._formatABIDataItemList(constructorAbi.inputs, [], base_contract_1.BaseContract._bigNumberToString);\n              _base_contract_1$Base3 = _slicedToArray(_base_contract_1$Base2, 0);\n              iface = new ethers.utils.Interface(abi);\n              deployInfo = iface.deployFunction;\n              txData = deployInfo.encode(bytecode, []);\n              web3Wrapper = new web3_wrapper_1.Web3Wrapper(provider);\n              _context30.next = 12;\n              return base_contract_1.BaseContract._applyDefaultsToContractTxDataAsync(Object.assign({\n                data: txData\n              }, txDefaults), web3Wrapper.estimateGasAsync.bind(web3Wrapper));\n            case 12:\n              txDataWithDefaults = _context30.sent;\n              _context30.next = 15;\n              return web3Wrapper.sendTransactionAsync(txDataWithDefaults);\n            case 15:\n              txHash = _context30.sent;\n              utils_1.logUtils.log(\"transactionHash: \".concat(txHash));\n              _context30.next = 19;\n              return web3Wrapper.awaitTransactionSuccessAsync(txHash);\n            case 19:\n              txReceipt = _context30.sent;\n              utils_1.logUtils.log(\"AuthenticatedProxy successfully deployed at \".concat(txReceipt.contractAddress));\n              contractInstance = new AuthenticatedProxyContract(txReceipt.contractAddress, provider, txDefaults, logDecodeDependencies);\n              contractInstance.constructorArgs = [];\n              return _context30.abrupt(\"return\", contractInstance);\n            case 24:\n            case \"end\":\n              return _context30.stop();\n          }\n        }, _callee30);\n      }));\n    }\n    /**\n     * @returns      The contract ABI\n     */\n  }, {\n    key: \"ABI\",\n    value: function ABI() {\n      var abi = [{\n        constant: true,\n        inputs: [],\n        name: 'proxyType',\n        outputs: [{\n          name: 'proxyTypeId',\n          type: 'uint256'\n        }],\n        payable: false,\n        stateMutability: 'pure',\n        type: 'function'\n      }, {\n        constant: true,\n        inputs: [],\n        name: 'user',\n        outputs: [{\n          name: '',\n          type: 'address'\n        }],\n        payable: false,\n        stateMutability: 'view',\n        type: 'function'\n      }, {\n        constant: true,\n        inputs: [],\n        name: 'implementation',\n        outputs: [{\n          name: '',\n          type: 'address'\n        }],\n        payable: false,\n        stateMutability: 'view',\n        type: 'function'\n      }, {\n        constant: true,\n        inputs: [],\n        name: 'revoked',\n        outputs: [{\n          name: '',\n          type: 'bool'\n        }],\n        payable: false,\n        stateMutability: 'view',\n        type: 'function'\n      }, {\n        constant: true,\n        inputs: [],\n        name: 'upgradeabilityOwner',\n        outputs: [{\n          name: '',\n          type: 'address'\n        }],\n        payable: false,\n        stateMutability: 'view',\n        type: 'function'\n      }, {\n        constant: true,\n        inputs: [],\n        name: 'registry',\n        outputs: [{\n          name: '',\n          type: 'address'\n        }],\n        payable: false,\n        stateMutability: 'view',\n        type: 'function'\n      }, {\n        constant: false,\n        inputs: [{\n          name: 'from',\n          type: 'address'\n        }, {\n          name: 'value',\n          type: 'uint256'\n        }, {\n          name: 'token',\n          type: 'address'\n        }, {\n          name: 'extraData',\n          type: 'bytes'\n        }],\n        name: 'receiveApproval',\n        outputs: [],\n        payable: false,\n        stateMutability: 'nonpayable',\n        type: 'function'\n      }, {\n        inputs: [],\n        outputs: [],\n        payable: true,\n        stateMutability: 'payable',\n        type: 'fallback'\n      }, {\n        anonymous: false,\n        inputs: [{\n          name: 'revoked',\n          type: 'bool',\n          indexed: false\n        }],\n        name: 'Revoked',\n        outputs: [],\n        type: 'event'\n      }, {\n        anonymous: false,\n        inputs: [{\n          name: 'sender',\n          type: 'address',\n          indexed: true\n        }, {\n          name: 'amount',\n          type: 'uint256',\n          indexed: false\n        }],\n        name: 'ReceivedEther',\n        outputs: [],\n        type: 'event'\n      }, {\n        anonymous: false,\n        inputs: [{\n          name: 'from',\n          type: 'address',\n          indexed: true\n        }, {\n          name: 'value',\n          type: 'uint256',\n          indexed: false\n        }, {\n          name: 'token',\n          type: 'address',\n          indexed: true\n        }, {\n          name: 'extraData',\n          type: 'bytes',\n          indexed: false\n        }],\n        name: 'ReceivedTokens',\n        outputs: [],\n        type: 'event'\n      }, {\n        constant: false,\n        inputs: [{\n          name: 'addrUser',\n          type: 'address'\n        }, {\n          name: 'addrRegistry',\n          type: 'address'\n        }],\n        name: 'initialize',\n        outputs: [],\n        payable: false,\n        stateMutability: 'nonpayable',\n        type: 'function'\n      }, {\n        constant: false,\n        inputs: [{\n          name: 'revoke',\n          type: 'bool'\n        }],\n        name: 'setRevoke',\n        outputs: [],\n        payable: false,\n        stateMutability: 'nonpayable',\n        type: 'function'\n      }, {\n        constant: false,\n        inputs: [{\n          name: 'dest',\n          type: 'address'\n        }, {\n          name: 'howToCall',\n          type: 'uint8'\n        }, {\n          name: 'calldata',\n          type: 'bytes'\n        }],\n        name: 'proxy',\n        outputs: [{\n          name: 'result',\n          type: 'bool'\n        }],\n        payable: false,\n        stateMutability: 'nonpayable',\n        type: 'function'\n      }, {\n        constant: false,\n        inputs: [{\n          name: 'dest',\n          type: 'address'\n        }, {\n          name: 'howToCall',\n          type: 'uint8'\n        }, {\n          name: 'calldata',\n          type: 'bytes'\n        }],\n        name: 'proxyAssert',\n        outputs: [],\n        payable: false,\n        stateMutability: 'nonpayable',\n        type: 'function'\n      }];\n      return abi;\n    }\n  }, {\n    key: \"_deployLibrariesAsync\",\n    value: function _deployLibrariesAsync(artifact, libraryArtifacts, web3Wrapper, txDefaults) {\n      var libraryAddresses = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee31() {\n        var links, _i3, _Object$values, link, _i4, _Object$keys3, libraryName, libraryArtifact, linkedLibraryBytecode, txDataWithDefaults, txHash, _yield$web3Wrapper$aw, contractAddress;\n        return _regeneratorRuntime().wrap(function _callee31$(_context31) {\n          while (1) switch (_context31.prev = _context31.next) {\n            case 0:\n              links = artifact.compilerOutput.evm.bytecode.linkReferences; // Go through all linked libraries, recursively deploying them if necessary.\n              _i3 = 0, _Object$values = Object.values(links);\n            case 2:\n              if (!(_i3 < _Object$values.length)) {\n                _context31.next = 33;\n                break;\n              }\n              link = _Object$values[_i3];\n              _i4 = 0, _Object$keys3 = Object.keys(link);\n            case 5:\n              if (!(_i4 < _Object$keys3.length)) {\n                _context31.next = 30;\n                break;\n              }\n              libraryName = _Object$keys3[_i4];\n              if (libraryAddresses[libraryName]) {\n                _context31.next = 27;\n                break;\n              }\n              // Library not yet deployed.\n              libraryArtifact = libraryArtifacts[libraryName];\n              if (libraryArtifact) {\n                _context31.next = 11;\n                break;\n              }\n              throw new Error(\"Missing artifact for linked library \\\"\".concat(libraryName, \"\\\"\"));\n            case 11:\n              _context31.next = 13;\n              return AuthenticatedProxyContract._deployLibrariesAsync(libraryArtifact, libraryArtifacts, web3Wrapper, txDefaults, libraryAddresses);\n            case 13:\n              // Deploy this library.\n              linkedLibraryBytecode = (0, base_contract_1.linkLibrariesInBytecode)(libraryArtifact, libraryAddresses);\n              _context31.next = 16;\n              return base_contract_1.BaseContract._applyDefaultsToContractTxDataAsync(Object.assign({\n                data: linkedLibraryBytecode\n              }, txDefaults), web3Wrapper.estimateGasAsync.bind(web3Wrapper));\n            case 16:\n              txDataWithDefaults = _context31.sent;\n              _context31.next = 19;\n              return web3Wrapper.sendTransactionAsync(txDataWithDefaults);\n            case 19:\n              txHash = _context31.sent;\n              utils_1.logUtils.log(\"transactionHash: \".concat(txHash));\n              _context31.next = 23;\n              return web3Wrapper.awaitTransactionSuccessAsync(txHash);\n            case 23:\n              _yield$web3Wrapper$aw = _context31.sent;\n              contractAddress = _yield$web3Wrapper$aw.contractAddress;\n              utils_1.logUtils.log(\"\".concat(libraryArtifact.contractName, \" successfully deployed at \").concat(contractAddress));\n              libraryAddresses[libraryArtifact.contractName] = contractAddress;\n            case 27:\n              _i4++;\n              _context31.next = 5;\n              break;\n            case 30:\n              _i3++;\n              _context31.next = 2;\n              break;\n            case 33:\n              return _context31.abrupt(\"return\", libraryAddresses);\n            case 34:\n            case \"end\":\n              return _context31.stop();\n          }\n        }, _callee31);\n      }));\n    }\n  }]);\n  return AuthenticatedProxyContract;\n}(base_contract_1.BaseContract);\nexports.AuthenticatedProxyContract = AuthenticatedProxyContract;\nAuthenticatedProxyContract.contractName = 'AuthenticatedProxy';\n// tslint:disable:max-file-line-count\n// tslint:enable:no-unbound-method no-parameter-reassignment no-consecutive-blank-lines ordered-imports align\n// tslint:enable:trailing-comma whitespace no-trailing-whitespace","map":null,"metadata":{},"sourceType":"script"}