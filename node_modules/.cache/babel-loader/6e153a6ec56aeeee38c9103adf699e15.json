{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.addressUtils = void 0;\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\nvar _ = require(\"lodash\");\nvar hex_utils_1 = require(\"./hex_utils\");\nvar BASIC_ADDRESS_REGEX = /^(0x)?[0-9a-f]{40}$/i;\nvar SAME_CASE_ADDRESS_REGEX = /^(0x)?([0-9a-f]{40}|[0-9A-F]{40})$/;\nvar ADDRESS_LENGTH = 40;\nexports.addressUtils = {\n  isChecksumAddress: function isChecksumAddress(address) {\n    return ethereumjs_util_1.isValidChecksumAddress(address);\n  },\n  isAddress: function isAddress(address) {\n    if (!BASIC_ADDRESS_REGEX.test(address)) {\n      // Check if it has the basic requirements of an address\n      return false;\n    } else if (SAME_CASE_ADDRESS_REGEX.test(address)) {\n      // If it's all small caps or all all caps, return true\n      return true;\n    } else {\n      // Otherwise check each case\n      var isValidChecksummedAddress = exports.addressUtils.isChecksumAddress(address);\n      return isValidChecksummedAddress;\n    }\n  },\n  padZeros: function padZeros(address) {\n    return ethereumjs_util_1.addHexPrefix(_.padStart(ethereumjs_util_1.stripHexPrefix(address), ADDRESS_LENGTH, '0'));\n  },\n  generatePseudoRandomAddress: function generatePseudoRandomAddress() {\n    // tslint:disable-next-line: custom-no-magic-numbers\n    return hex_utils_1.hexUtils.random(20);\n  }\n};","map":null,"metadata":{},"sourceType":"script"}