{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/nicholasschepisi/Desktop/code/bbb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"/Users/nicholasschepisi/Desktop/code/bbb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\nvar _possibleConstructorReturn = require(\"/Users/nicholasschepisi/Desktop/code/bbb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\nvar _getPrototypeOf = require(\"/Users/nicholasschepisi/Desktop/code/bbb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\nvar _inherits = require(\"/Users/nicholasschepisi/Desktop/code/bbb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StaticBytesDataType = void 0;\nvar ethereum_types_1 = require(\"ethereum-types\");\nvar ethUtil = require(\"ethereumjs-util\");\nvar _ = require(\"lodash\");\nvar blob_1 = require(\"../abstract_data_types/types/blob\");\nvar constants_1 = require(\"../utils/constants\");\nvar StaticBytesDataType = /*#__PURE__*/function (_blob_1$AbstractBlobD) {\n  _inherits(StaticBytesDataType, _blob_1$AbstractBlobD);\n  function StaticBytesDataType(dataItem, dataTypeFactory) {\n    var _this;\n    _classCallCheck(this, StaticBytesDataType);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(StaticBytesDataType).call(this, dataItem, dataTypeFactory, StaticBytesDataType._SIZE_KNOWN_AT_COMPILE_TIME));\n    if (!StaticBytesDataType.matchType(dataItem.type)) {\n      throw new Error(\"Tried to instantiate Static Bytes with bad input: \".concat(dataItem));\n    }\n    _this._width = StaticBytesDataType._decodeWidthFromType(dataItem.type);\n    return _this;\n  }\n  _createClass(StaticBytesDataType, [{\n    key: \"getSignatureType\",\n    value: function getSignatureType() {\n      // Note that `byte` reduces to `bytes1`\n      return \"\".concat(ethereum_types_1.SolidityTypes.Bytes).concat(this._width);\n    }\n  }, {\n    key: \"encodeValue\",\n    value: function encodeValue(value) {\n      // 1/2 Convert value into a buffer and do bounds checking\n      this._sanityCheckValue(value);\n      var valueBuf = ethUtil.toBuffer(value);\n      // 2/2 Store value as hex\n      var valuePadded = ethUtil.setLengthRight(valueBuf, constants_1.constants.EVM_WORD_WIDTH_IN_BYTES);\n      return valuePadded;\n    }\n  }, {\n    key: \"decodeValue\",\n    value: function decodeValue(calldata) {\n      var valueBufPadded = calldata.popWord();\n      var valueBuf = valueBufPadded.slice(0, this._width);\n      var value = ethUtil.bufferToHex(valueBuf);\n      this._sanityCheckValue(value);\n      return value;\n    }\n  }, {\n    key: \"getDefaultValue\",\n    value: function getDefaultValue() {\n      var valueBufPadded = constants_1.constants.EMPTY_EVM_WORD_BUFFER;\n      var valueBuf = valueBufPadded.slice(0, this._width);\n      var value = ethUtil.bufferToHex(valueBuf);\n      return value;\n    }\n  }, {\n    key: \"_sanityCheckValue\",\n    value: function _sanityCheckValue(value) {\n      if (typeof value === 'string') {\n        if (!_.startsWith(value, '0x')) {\n          throw new Error(\"Tried to encode non-hex value. Value must include '0x' prefix.\");\n        } else if (value.length % 2 !== 0) {\n          throw new Error(\"Tried to assign \".concat(value, \", which is contains a half-byte. Use full bytes only.\"));\n        }\n      }\n      var valueBuf = ethUtil.toBuffer(value);\n      if (valueBuf.byteLength > this._width) {\n        throw new Error(\"Tried to assign \".concat(value, \" (\").concat(valueBuf.byteLength, \" bytes), which exceeds max bytes that can be stored in a \").concat(this.getSignature()));\n      }\n    }\n  }], [{\n    key: \"matchType\",\n    value: function matchType(type) {\n      return StaticBytesDataType._MATCHER.test(type);\n    }\n  }, {\n    key: \"_decodeWidthFromType\",\n    value: function _decodeWidthFromType(type) {\n      var matches = StaticBytesDataType._MATCHER.exec(type);\n      var width = matches !== null && matches.length === 3 && matches[2] !== undefined ? parseInt(matches[2], constants_1.constants.DEC_BASE) : StaticBytesDataType._DEFAULT_WIDTH;\n      return width;\n    }\n  }]);\n  return StaticBytesDataType;\n}(blob_1.AbstractBlobDataType);\nexports.StaticBytesDataType = StaticBytesDataType;\nStaticBytesDataType._SIZE_KNOWN_AT_COMPILE_TIME = true;\nStaticBytesDataType._MATCHER = RegExp('^(byte|bytes(1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20|21|22|23|24|25|26|27|28|29|30|31|32))$');\nStaticBytesDataType._DEFAULT_WIDTH = 1;","map":null,"metadata":{},"sourceType":"script"}