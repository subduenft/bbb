{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function sent() {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar BN = require(\"bn.js\");\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\nvar rlp_1 = require(\"rlp\");\nvar bloom_1 = require(\"./bloom\");\nvar promisify = require('util.promisify');\nvar Trie = require('merkle-patricia-tree');\n/**\n * @ignore\n */\nfunction runBlock(opts) {\n  return __awaiter(this, void 0, void 0, function () {\n    var state, block, generateStateRoot, result, err_1, stateRoot;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (opts === undefined) {\n            throw new Error('invalid input, opts must be provided');\n          }\n          if (!opts.block) {\n            throw new Error('invalid input, block must be provided');\n          }\n          state = this.pStateManager;\n          block = opts.block;\n          generateStateRoot = !!opts.generate;\n          /**\n           * The `beforeBlock` event.\n           *\n           * @event Event: beforeBlock\n           * @type {Object}\n           * @property {Block} block emits the block that is about to be processed\n           */\n          return [4 /*yield*/, this._emit('beforeBlock', opts.block)\n          // Set state root if provided\n          ];\n\n        case 1:\n          /**\n           * The `beforeBlock` event.\n           *\n           * @event Event: beforeBlock\n           * @type {Object}\n           * @property {Block} block emits the block that is about to be processed\n           */\n          _a.sent();\n          if (!opts.root) return [3 /*break*/, 3];\n          return [4 /*yield*/, state.setStateRoot(opts.root)];\n        case 2:\n          _a.sent();\n          _a.label = 3;\n        case 3:\n          // Checkpoint state\n          return [4 /*yield*/, state.checkpoint()];\n        case 4:\n          // Checkpoint state\n          _a.sent();\n          _a.label = 5;\n        case 5:\n          _a.trys.push([5, 7,, 9]);\n          return [4 /*yield*/, applyBlock.bind(this)(block, opts)];\n        case 6:\n          result = _a.sent();\n          return [3 /*break*/, 9];\n        case 7:\n          err_1 = _a.sent();\n          return [4 /*yield*/, state.revert()];\n        case 8:\n          _a.sent();\n          throw err_1;\n        case 9:\n          // Persist state\n          return [4 /*yield*/, state.commit()];\n        case 10:\n          // Persist state\n          _a.sent();\n          return [4 /*yield*/, state.getStateRoot()\n          // Given the generate option, either set resulting header\n          // values to the current block, or validate the resulting\n          // header values against the current block.\n          ];\n\n        case 11:\n          stateRoot = _a.sent();\n          // Given the generate option, either set resulting header\n          // values to the current block, or validate the resulting\n          // header values against the current block.\n          if (generateStateRoot) {\n            block.header.stateRoot = stateRoot;\n            block.header.bloom = result.bloom.bitvector;\n          } else {\n            if (result.receiptRoot && result.receiptRoot.toString('hex') !== block.header.receiptTrie.toString('hex')) {\n              throw new Error('invalid receiptTrie ');\n            }\n            if (result.bloom.bitvector.toString('hex') !== block.header.bloom.toString('hex')) {\n              throw new Error('invalid bloom ');\n            }\n            if (ethereumjs_util_1.bufferToInt(block.header.gasUsed) !== Number(result.gasUsed)) {\n              throw new Error('invalid gasUsed ');\n            }\n            if (stateRoot.toString('hex') !== block.header.stateRoot.toString('hex')) {\n              throw new Error('invalid block stateRoot ');\n            }\n          }\n          /**\n           * The `afterBlock` event\n           *\n           * @event Event: afterBlock\n           * @type {Object}\n           * @property {Object} result emits the results of processing a block\n           */\n          return [4 /*yield*/, this._emit('afterBlock', {\n            receipts: result.receipts,\n            results: result.results\n          })];\n        case 12:\n          /**\n           * The `afterBlock` event\n           *\n           * @event Event: afterBlock\n           * @type {Object}\n           * @property {Object} result emits the results of processing a block\n           */\n          _a.sent();\n          return [2 /*return*/, {\n            receipts: result.receipts,\n            results: result.results\n          }];\n      }\n    });\n  });\n}\nexports.default = runBlock;\n/**\n * Validates and applies a block, computing the results of\n * applying its transactions. This method doesn't modify the\n * block itself. It computes the block rewards and puts\n * them on state (but doesn't persist the changes).\n * @param {Block} block\n * @param {Boolean} [skipBlockValidation=false]\n */\nfunction applyBlock(block, opts) {\n  return __awaiter(this, void 0, void 0, function () {\n    var txResults;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (!!opts.skipBlockValidation) return [3 /*break*/, 3];\n          if (!new BN(block.header.gasLimit).gte(new BN('8000000000000000', 16))) return [3 /*break*/, 1];\n          throw new Error('Invalid block with gas limit greater than (2^63 - 1)');\n        case 1:\n          return [4 /*yield*/, promisify(block.validate).bind(block)(this.blockchain)];\n        case 2:\n          _a.sent();\n          _a.label = 3;\n        case 3:\n          return [4 /*yield*/, applyTransactions.bind(this)(block, opts)\n          // Pay ommers and miners\n          ];\n\n        case 4:\n          txResults = _a.sent();\n          // Pay ommers and miners\n          return [4 /*yield*/, assignBlockRewards.bind(this)(block)];\n        case 5:\n          // Pay ommers and miners\n          _a.sent();\n          return [2 /*return*/, txResults];\n      }\n    });\n  });\n}\n/**\n * Applies the transactions in a block, computing the receipts\n * as well as gas usage and some relevant data. This method is\n * side-effect free (it doesn't modify the block nor the state).\n * @param {Block} block\n */\nfunction applyTransactions(block, opts) {\n  return __awaiter(this, void 0, void 0, function () {\n    var bloom, gasUsed, receiptTrie, receipts, txResults, txIdx, tx, gasLimitIsHigherThanBlock, txRes, txReceipt;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          bloom = new bloom_1.default();\n          gasUsed = new BN(0);\n          receiptTrie = new Trie();\n          receipts = [];\n          txResults = [];\n          txIdx = 0;\n          _a.label = 1;\n        case 1:\n          if (!(txIdx < block.transactions.length)) return [3 /*break*/, 5];\n          tx = block.transactions[txIdx];\n          gasLimitIsHigherThanBlock = new BN(block.header.gasLimit).lt(new BN(tx.gasLimit).add(gasUsed));\n          if (gasLimitIsHigherThanBlock) {\n            throw new Error('tx has a higher gas limit than the block');\n          }\n          return [4 /*yield*/, this.runTx({\n            tx: tx,\n            block: block,\n            skipBalance: opts.skipBalance,\n            skipNonce: opts.skipNonce\n          })];\n        case 2:\n          txRes = _a.sent();\n          txResults.push(txRes);\n          // Add to total block gas usage\n          gasUsed = gasUsed.add(txRes.gasUsed);\n          // Combine blooms via bitwise OR\n          bloom.or(txRes.bloom);\n          txReceipt = {\n            status: txRes.execResult.exceptionError ? 0 : 1,\n            gasUsed: gasUsed.toArrayLike(Buffer),\n            bitvector: txRes.bloom.bitvector,\n            logs: txRes.execResult.logs || []\n          };\n          receipts.push(txReceipt);\n          // Add receipt to trie to later calculate receipt root\n          return [4 /*yield*/, promisify(receiptTrie.put).bind(receiptTrie)(rlp_1.encode(txIdx), rlp_1.encode(Object.values(txReceipt)))];\n        case 3:\n          // Add receipt to trie to later calculate receipt root\n          _a.sent();\n          _a.label = 4;\n        case 4:\n          txIdx++;\n          return [3 /*break*/, 1];\n        case 5:\n          return [2 /*return*/, {\n            bloom: bloom,\n            gasUsed: gasUsed,\n            receiptRoot: receiptTrie.root,\n            receipts: receipts,\n            results: txResults\n          }];\n      }\n    });\n  });\n}\n/**\n * Calculates block rewards for miner and ommers and puts\n * the updated balances of their accounts to state.\n */\nfunction assignBlockRewards(block) {\n  return __awaiter(this, void 0, void 0, function () {\n    var state, minerReward, ommers, _i, ommers_1, ommer, reward_1, reward;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          state = this.pStateManager;\n          minerReward = new BN(this._common.param('pow', 'minerReward'));\n          ommers = block.uncleHeaders;\n          _i = 0, ommers_1 = ommers;\n          _a.label = 1;\n        case 1:\n          if (!(_i < ommers_1.length)) return [3 /*break*/, 4];\n          ommer = ommers_1[_i];\n          reward_1 = calculateOmmerReward(new BN(ommer.number), new BN(block.header.number), minerReward);\n          return [4 /*yield*/, rewardAccount(state, ommer.coinbase, reward_1)];\n        case 2:\n          _a.sent();\n          _a.label = 3;\n        case 3:\n          _i++;\n          return [3 /*break*/, 1];\n        case 4:\n          reward = calculateMinerReward(minerReward, ommers.length);\n          return [4 /*yield*/, rewardAccount(state, block.header.coinbase, reward)];\n        case 5:\n          _a.sent();\n          return [2 /*return*/];\n      }\n    });\n  });\n}\n\nfunction calculateOmmerReward(ommerBlockNumber, blockNumber, minerReward) {\n  var heightDiff = blockNumber.sub(ommerBlockNumber);\n  var reward = new BN(8).sub(heightDiff).mul(minerReward.divn(8));\n  if (reward.ltn(0)) {\n    reward = new BN(0);\n  }\n  return reward;\n}\nfunction calculateMinerReward(minerReward, ommersNum) {\n  // calculate nibling reward\n  var niblingReward = minerReward.divn(32);\n  var totalNiblingReward = niblingReward.muln(ommersNum);\n  var reward = minerReward.add(totalNiblingReward);\n  return reward;\n}\nfunction rewardAccount(state, address, reward) {\n  return __awaiter(this, void 0, void 0, function () {\n    var account;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4 /*yield*/, state.getAccount(address)];\n        case 1:\n          account = _a.sent();\n          account.balance = ethereumjs_util_1.toBuffer(new BN(account.balance).add(reward));\n          return [4 /*yield*/, state.putAccount(address, account)];\n        case 2:\n          _a.sent();\n          return [2 /*return*/];\n      }\n    });\n  });\n}","map":null,"metadata":{},"sourceType":"script"}