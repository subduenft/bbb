{"ast":null,"code":"var async = require('async');\nmodule.exports = {\n  matchingNibbleLength: matchingNibbleLength,\n  callTogether: callTogether,\n  asyncFirstSeries: asyncFirstSeries,\n  doKeysMatch: doKeysMatch\n};\n\n/**\n * Returns the number of in order matching nibbles of two give nibble arrayes\n * @method matchingNibbleLength\n * @param {Array} nib1\n * @param {Array} nib2\n */\nfunction matchingNibbleLength(nib1, nib2) {\n  var i = 0;\n  while (nib1[i] === nib2[i] && nib1.length > i) {\n    i++;\n  }\n  return i;\n}\n\n/**\n * Compare two 'nibble array' keys\n */\nfunction doKeysMatch(keyA, keyB) {\n  var length = matchingNibbleLength(keyA, keyB);\n  return length === keyA.length && length === keyB.length;\n}\n\n/**\n * Take two or more functions and returns a function  that will execute all of\n * the given functions\n */\nfunction callTogether() {\n  var funcs = arguments;\n  var length = funcs.length;\n  var index = length;\n  if (!length) {\n    return function () {};\n  }\n  return function () {\n    length = index;\n    while (length--) {\n      var fn = funcs[length];\n      if (typeof fn === 'function') {\n        var result = funcs[length].apply(this, arguments);\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Take a collection of async fns, call the cb on the first to return a truthy value.\n * If all run without a truthy result, return undefined\n */\nfunction asyncFirstSeries(array, iterator, cb) {\n  var didComplete = false;\n  async.eachSeries(array, function (item, next) {\n    if (didComplete) return next;\n    iterator(item, function (err, result) {\n      if (result) {\n        didComplete = true;\n        process.nextTick(cb.bind(null, null, result));\n      }\n      next(err);\n    });\n  }, function () {\n    if (!didComplete) {\n      cb();\n    }\n  });\n}","map":null,"metadata":{},"sourceType":"script"}