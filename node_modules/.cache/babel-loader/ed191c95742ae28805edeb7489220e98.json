{"ast":null,"code":"/* Copyright (c) 2017 Rod Vagg, MIT License */\n\nfunction AbstractChainedBatch(db) {\n  this._db = db;\n  this._operations = [];\n  this._written = false;\n}\nAbstractChainedBatch.prototype._serializeKey = function (key) {\n  return this._db._serializeKey(key);\n};\nAbstractChainedBatch.prototype._serializeValue = function (value) {\n  return this._db._serializeValue(value);\n};\nAbstractChainedBatch.prototype._checkWritten = function () {\n  if (this._written) {\n    throw new Error('write() already called on this batch');\n  }\n};\nAbstractChainedBatch.prototype.put = function (key, value) {\n  this._checkWritten();\n  var err = this._db._checkKey(key, 'key');\n  if (err) {\n    throw err;\n  }\n  key = this._serializeKey(key);\n  value = this._serializeValue(value);\n  this._put(key, value);\n  return this;\n};\nAbstractChainedBatch.prototype._put = function (key, value) {\n  this._operations.push({\n    type: 'put',\n    key: key,\n    value: value\n  });\n};\nAbstractChainedBatch.prototype.del = function (key) {\n  this._checkWritten();\n  var err = this._db._checkKey(key, 'key');\n  if (err) {\n    throw err;\n  }\n  key = this._serializeKey(key);\n  this._del(key);\n  return this;\n};\nAbstractChainedBatch.prototype._del = function (key) {\n  this._operations.push({\n    type: 'del',\n    key: key\n  });\n};\nAbstractChainedBatch.prototype.clear = function () {\n  this._checkWritten();\n  this._operations = [];\n  this._clear();\n  return this;\n};\nAbstractChainedBatch.prototype._clear = function noop() {};\nAbstractChainedBatch.prototype.write = function (options, callback) {\n  this._checkWritten();\n  if (typeof options === 'function') {\n    callback = options;\n  }\n  if (typeof callback !== 'function') {\n    throw new Error('write() requires a callback argument');\n  }\n  if (typeof options !== 'object') {\n    options = {};\n  }\n  this._written = true;\n\n  // @ts-ignore\n  if (typeof this._write === 'function') {\n    return this._write(callback);\n  }\n  if (typeof this._db._batch === 'function') {\n    return this._db._batch(this._operations, options, callback);\n  }\n  process.nextTick(callback);\n};\nmodule.exports = AbstractChainedBatch;","map":null,"metadata":{},"sourceType":"script"}