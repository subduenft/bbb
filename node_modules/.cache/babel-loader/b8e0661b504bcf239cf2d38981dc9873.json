{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar async = require('async');\n/**\n * @ignore\n */\nfunction runBlockchain(blockchain) {\n  var _this = this;\n  return new Promise(function (resolve, reject) {\n    var self = _this;\n    var headBlock;\n    var parentState;\n    blockchain = blockchain || _this.blockchain;\n    // setup blockchain iterator\n    blockchain.iterator('vm', processBlock, function (err) {\n      if (err) {\n        reject(err);\n      } else {\n        resolve();\n      }\n    });\n    function processBlock(block, reorg, cb) {\n      async.series([getStartingState, runBlock], cb);\n      // determine starting state for block run\n      function getStartingState(cb) {\n        // if we are just starting or if a chain re-org has happened\n        if (!headBlock || reorg) {\n          blockchain.getBlock(block.header.parentHash, function (err, parentBlock) {\n            parentState = parentBlock.header.stateRoot;\n            // generate genesis state if we are at the genesis block\n            // we don't have the genesis state\n            if (!headBlock) {\n              return self.stateManager.generateCanonicalGenesis(cb);\n            } else {\n              cb(err);\n            }\n          });\n        } else {\n          parentState = headBlock.header.stateRoot;\n          cb();\n        }\n      }\n      // run block, update head if valid\n      function runBlock(cb) {\n        self.runBlock({\n          block: block,\n          root: parentState\n        }).then(function () {\n          // set as new head block\n          headBlock = block;\n          cb();\n        }).catch(function (err) {\n          // remove invalid block\n          blockchain.delBlock(block.header.hash(), function () {\n            cb(err);\n          });\n        });\n      }\n    }\n  });\n}\nexports.default = runBlockchain;","map":null,"metadata":{},"sourceType":"script"}