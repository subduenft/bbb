{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/nicholasschepisi/Desktop/code/bbb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"/Users/nicholasschepisi/Desktop/code/bbb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\nvar _possibleConstructorReturn = require(\"/Users/nicholasschepisi/Desktop/code/bbb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\nvar _getPrototypeOf = require(\"/Users/nicholasschepisi/Desktop/code/bbb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\nvar _inherits = require(\"/Users/nicholasschepisi/Desktop/code/bbb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StringDataType = void 0;\nvar ethereum_types_1 = require(\"ethereum-types\");\nvar ethUtil = require(\"ethereumjs-util\");\nvar blob_1 = require(\"../abstract_data_types/types/blob\");\nvar constants_1 = require(\"../utils/constants\");\nvar StringDataType = /*#__PURE__*/function (_blob_1$AbstractBlobD) {\n  _inherits(StringDataType, _blob_1$AbstractBlobD);\n  function StringDataType(dataItem, dataTypeFactory) {\n    var _this;\n    _classCallCheck(this, StringDataType);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(StringDataType).call(this, dataItem, dataTypeFactory, StringDataType._SIZE_KNOWN_AT_COMPILE_TIME));\n    if (!StringDataType.matchType(dataItem.type)) {\n      throw new Error(\"Tried to instantiate String with bad input: \".concat(dataItem));\n    }\n    return _this;\n  }\n  _createClass(StringDataType, [{\n    key: \"encodeValue\",\n    // Disable prefer-function-over-method for inherited abstract methods.\n    /* tslint:disable prefer-function-over-method */\n    value: function encodeValue(value) {\n      // Encoded value is of the form: <length><value>, with each field padded to be word-aligned.\n      // 1/3 Construct the value\n      var valueBuf = Buffer.from(value);\n      var valueLengthInBytes = valueBuf.byteLength;\n      var wordsToStoreValuePadded = Math.ceil(valueLengthInBytes / constants_1.constants.EVM_WORD_WIDTH_IN_BYTES);\n      var bytesToStoreValuePadded = wordsToStoreValuePadded * constants_1.constants.EVM_WORD_WIDTH_IN_BYTES;\n      var valueBufPadded = ethUtil.setLengthRight(valueBuf, bytesToStoreValuePadded);\n      // 2/3 Construct the length\n      var lengthBuf = ethUtil.toBuffer(valueLengthInBytes);\n      var lengthBufPadded = ethUtil.setLengthLeft(lengthBuf, constants_1.constants.EVM_WORD_WIDTH_IN_BYTES);\n      // 3/3 Combine length and value\n      var encodedValue = Buffer.concat([lengthBufPadded, valueBufPadded]);\n      return encodedValue;\n    }\n  }, {\n    key: \"decodeValue\",\n    value: function decodeValue(calldata) {\n      // Encoded value is of the form: <length><value>, with each field padded to be word-aligned.\n      // 1/2 Decode length\n      var lengthBufPadded = calldata.popWord();\n      var lengthHexPadded = ethUtil.bufferToHex(lengthBufPadded);\n      var length = parseInt(lengthHexPadded, constants_1.constants.HEX_BASE);\n      // 2/2 Decode value\n      var wordsToStoreValuePadded = Math.ceil(length / constants_1.constants.EVM_WORD_WIDTH_IN_BYTES);\n      var valueBufPadded = calldata.popWords(wordsToStoreValuePadded);\n      var valueBuf = valueBufPadded.slice(0, length);\n      var value = valueBuf.toString('UTF-8');\n      return value;\n    }\n  }, {\n    key: \"getDefaultValue\",\n    value: function getDefaultValue() {\n      return StringDataType._DEFAULT_VALUE;\n    }\n  }, {\n    key: \"getSignatureType\",\n    value: function getSignatureType() {\n      return ethereum_types_1.SolidityTypes.String;\n    }\n  }], [{\n    key: \"matchType\",\n    value: function matchType(type) {\n      return type === ethereum_types_1.SolidityTypes.String;\n    }\n  }]);\n  return StringDataType;\n}(blob_1.AbstractBlobDataType);\nexports.StringDataType = StringDataType;\nStringDataType._SIZE_KNOWN_AT_COMPILE_TIME = false;\nStringDataType._DEFAULT_VALUE = '';","map":null,"metadata":{},"sourceType":"script"}