{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/nicholasschepisi/Desktop/code/bbb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"/Users/nicholasschepisi/Desktop/code/bbb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DataType = void 0;\nvar _ = require(\"lodash\");\nvar calldata_1 = require(\"../calldata/calldata\");\nvar raw_calldata_1 = require(\"../calldata/raw_calldata\");\nvar constants_1 = require(\"../utils/constants\");\nvar DataType = /*#__PURE__*/function () {\n  function DataType(dataItem, factory) {\n    _classCallCheck(this, DataType);\n    this._dataItem = dataItem;\n    this._factory = factory;\n  }\n  _createClass(DataType, [{\n    key: \"getDataItem\",\n    value: function getDataItem() {\n      return this._dataItem;\n    }\n  }, {\n    key: \"getFactory\",\n    value: function getFactory() {\n      return this._factory;\n    }\n  }, {\n    key: \"encode\",\n    value: function encode(value, rules, selector) {\n      var rules_ = Object.assign(Object.assign({}, constants_1.constants.DEFAULT_ENCODING_RULES), rules);\n      var calldata = new calldata_1.Calldata(rules_);\n      if (selector !== undefined) {\n        calldata.setSelector(selector);\n      }\n      var block = this.generateCalldataBlock(value);\n      calldata.setRoot(block);\n      var encodedCalldata = calldata.toString();\n      return encodedCalldata;\n    }\n  }, {\n    key: \"decode\",\n    value: function decode(calldata, rules, selector) {\n      if (selector !== undefined && !_.startsWith(calldata, selector)) {\n        throw new Error(\"Tried to decode calldata, but it was missing the function selector. Expected prefix '\".concat(selector, \"'. Got '\").concat(calldata, \"'.\"));\n      }\n      var hasSelector = selector !== undefined;\n      var rawCalldata = new raw_calldata_1.RawCalldata(calldata, hasSelector);\n      var rules_ = Object.assign(Object.assign({}, constants_1.constants.DEFAULT_DECODING_RULES), rules);\n      var value = rules_.isStrictMode || rawCalldata.getSizeInBytes() > 0 ? this.generateValue(rawCalldata, rules_) : this.getDefaultValue(rules_);\n      return value;\n    }\n  }, {\n    key: \"decodeAsArray\",\n    value: function decodeAsArray(returndata, rules) {\n      var value = this.decode(returndata, rules);\n      var valuesAsArray = _.isObject(value) ? _.values(value) : [value];\n      return valuesAsArray;\n    }\n  }, {\n    key: \"getSignature\",\n    value: function getSignature(isDetailed) {\n      if (_.isEmpty(this._dataItem.name) || !isDetailed) {\n        return this.getSignatureType();\n      }\n      var name = this.getDataItem().name;\n      var lastIndexOfScopeDelimiter = name.lastIndexOf('.');\n      var isScopedName = lastIndexOfScopeDelimiter !== undefined && lastIndexOfScopeDelimiter > 0;\n      var shortName = isScopedName ? name.substr(lastIndexOfScopeDelimiter + 1) : name;\n      var detailedSignature = \"\".concat(shortName, \" \").concat(this.getSignatureType());\n      return detailedSignature;\n    }\n  }]);\n  return DataType;\n}();\nexports.DataType = DataType;","map":null,"metadata":{},"sourceType":"script"}