{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/nicholasschepisi/Desktop/code/bbb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\nvar _classCallCheck = require(\"/Users/nicholasschepisi/Desktop/code/bbb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"/Users/nicholasschepisi/Desktop/code/bbb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BaseContract = exports.PromiseWithTransactionHash = exports.SubscriptionErrors = exports.SubscriptionManager = exports.methodAbiToFunctionSignature = exports.linkLibrariesInBytecode = void 0;\nvar assert_1 = require(\"@0x/assert\");\nvar json_schemas_1 = require(\"@0x/json-schemas\");\nvar utils_1 = require(\"@0x/utils\");\nvar web3_wrapper_1 = require(\"@0x/web3-wrapper\");\nvar ethereum_types_1 = require(\"ethereum-types\");\nvar ethereumjs_account_1 = require(\"ethereumjs-account\");\nvar util = require(\"ethereumjs-util\");\nvar ethereumjs_vm_1 = require(\"ethereumjs-vm\");\nvar promisified_1 = require(\"ethereumjs-vm/dist/state/promisified\");\nvar utils_2 = require(\"./utils\");\nObject.defineProperty(exports, \"linkLibrariesInBytecode\", {\n  enumerable: true,\n  get: function get() {\n    return utils_2.linkLibrariesInBytecode;\n  }\n});\nObject.defineProperty(exports, \"methodAbiToFunctionSignature\", {\n  enumerable: true,\n  get: function get() {\n    return utils_2.methodAbiToFunctionSignature;\n  }\n});\nvar utils_3 = require(\"./utils\");\nvar subscription_manager_1 = require(\"./subscription_manager\");\nObject.defineProperty(exports, \"SubscriptionManager\", {\n  enumerable: true,\n  get: function get() {\n    return subscription_manager_1.SubscriptionManager;\n  }\n});\nvar types_1 = require(\"./types\");\nObject.defineProperty(exports, \"SubscriptionErrors\", {\n  enumerable: true,\n  get: function get() {\n    return types_1.SubscriptionErrors;\n  }\n});\nvar ARBITRARY_PRIVATE_KEY = 'e331b6d69882b4cb4ea581d88e0b604039a3de5967688d3dcffdd2270c0fd109';\n// tslint:disable: max-classes-per-file\n/**\n * @dev A promise-compatible type that exposes a `txHash` field.\n *      Not used by BaseContract, but generated contracts will return it in\n *      `awaitTransactionSuccessAsync()`.\n *      Maybe there's a better place for this.\n */\nvar PromiseWithTransactionHash = /*#__PURE__*/function () {\n  function PromiseWithTransactionHash(txHashPromise, promise) {\n    _classCallCheck(this, PromiseWithTransactionHash);\n    this.txHashPromise = txHashPromise;\n    this._promise = promise;\n  }\n  // tslint:disable:promise-function-async\n  // tslint:disable:async-suffix\n  _createClass(PromiseWithTransactionHash, [{\n    key: \"then\",\n    value: function then(onFulfilled, onRejected) {\n      return this._promise.then(onFulfilled, onRejected);\n    }\n  }, {\n    key: \"catch\",\n    value: function _catch(onRejected) {\n      return this._promise.catch(onRejected);\n    }\n  }, {\n    key: \"finally\",\n    value: function _finally(onFinally) {\n      return this._promise.finally(onFinally);\n    } // tslint:enable:promise-function-async\n    // tslint:enable:async-suffix\n  }, {\n    key: Symbol.toStringTag,\n    get: function get() {\n      return this._promise[Symbol.toStringTag];\n    }\n  }]);\n  return PromiseWithTransactionHash;\n}();\nexports.PromiseWithTransactionHash = PromiseWithTransactionHash;\nvar BaseContract = /*#__PURE__*/function () {\n  /// @dev Constructs a contract wrapper.\n  /// @param contractName Name of contract.\n  /// @param abi of the contract.\n  /// @param address of the deployed contract.\n  /// @param supportedProvider for communicating with an ethereum node.\n  /// @param logDecodeDependencies the name and ABI of contracts whose event logs are\n  ///        decoded by this wrapper.\n  /// @param deployedBytecode the deployedBytecode of the contract, used for executing\n  ///        pure Solidity functions in memory. This is different from the bytecode.\n  function BaseContract(contractName, abi, address, supportedProvider, callAndTxnDefaults, logDecodeDependencies, deployedBytecode, encoderOverrides) {\n    var _this = this;\n    _classCallCheck(this, BaseContract);\n    this.constructorArgs = [];\n    assert_1.assert.isString('contractName', contractName);\n    assert_1.assert.isETHAddressHex('address', address);\n    if (deployedBytecode !== undefined && deployedBytecode !== '') {\n      // `deployedBytecode` might contain references to\n      // unlinked libraries and, hence, would not be a hex string. We'll just\n      // leave `_deployedBytecodeIfExists` empty if this is the case.\n      // TODO(dorothy-zbornak): We should link the `deployedBytecode`\n      // beforehand in the generated wrappers.\n      try {\n        assert_1.assert.isHexString('deployedBytecode', deployedBytecode);\n        this._deployedBytecodeIfExists = Buffer.from(deployedBytecode.substr(2), 'hex');\n      } catch (err) {\n        // Do nothing.\n      }\n    }\n    var provider = utils_1.providerUtils.standardizeOrThrow(supportedProvider);\n    if (callAndTxnDefaults !== undefined) {\n      assert_1.assert.doesConformToSchema('callAndTxnDefaults', callAndTxnDefaults, json_schemas_1.schemas.callDataSchema);\n    }\n    this.contractName = contractName;\n    this._web3Wrapper = new web3_wrapper_1.Web3Wrapper(provider, callAndTxnDefaults);\n    this._encoderOverrides = encoderOverrides || {};\n    this.abi = abi;\n    this.address = address;\n    var methodAbis = this.abi.filter(function (abiDefinition) {\n      return abiDefinition.type === ethereum_types_1.AbiType.Function;\n    });\n    this._abiEncoderByFunctionSignature = {};\n    methodAbis.forEach(function (methodAbi) {\n      var abiEncoder = new utils_1.AbiEncoder.Method(methodAbi);\n      var functionSignature = abiEncoder.getSignature();\n      _this._abiEncoderByFunctionSignature[functionSignature] = abiEncoder;\n      _this._web3Wrapper.abiDecoder.addABI(abi, contractName);\n    });\n    if (logDecodeDependencies) {\n      Object.entries(logDecodeDependencies).forEach(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n          dependencyName = _ref2[0],\n          dependencyAbi = _ref2[1];\n        return _this._web3Wrapper.abiDecoder.addABI(dependencyAbi, dependencyName);\n      });\n    }\n  }\n  _createClass(BaseContract, [{\n    key: \"_promiseWithTransactionHash\",\n    value: function _promiseWithTransactionHash(txHashPromise, opts) {\n      var _this2 = this;\n      return new PromiseWithTransactionHash(txHashPromise, function () {\n        return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n          return _regeneratorRuntime().wrap(function _callee$(_context) {\n            while (1) switch (_context.prev = _context.next) {\n              case 0:\n                _context.t0 = this._web3Wrapper;\n                _context.next = 3;\n                return txHashPromise;\n              case 3:\n                _context.t1 = _context.sent;\n                _context.t2 = opts.pollingIntervalMs;\n                _context.t3 = opts.timeoutMs;\n                return _context.abrupt(\"return\", _context.t0.awaitTransactionSuccessAsync.call(_context.t0, _context.t1, _context.t2, _context.t3));\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }, _callee, this);\n        }));\n      }());\n    }\n  }, {\n    key: \"_applyDefaultsToTxDataAsync\",\n    value: function _applyDefaultsToTxDataAsync(txData, estimateGasAsync) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var txDataWithDefaults;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              // Gas amount sourced with the following priorities:\n              // 1. Optional param passed in to public method call\n              // 2. Global config passed in at library instantiation\n              // 3. Gas estimate calculation + safety margin\n              // tslint:disable-next-line:no-object-literal-type-assertion\n              txDataWithDefaults = Object.assign(Object.assign({\n                to: this.address\n              }, this._web3Wrapper.getContractDefaults()), BaseContract._removeUndefinedProperties(txData));\n              if (!(txDataWithDefaults.gas === undefined && estimateGasAsync !== undefined)) {\n                _context2.next = 5;\n                break;\n              }\n              _context2.next = 4;\n              return estimateGasAsync(txDataWithDefaults);\n            case 4:\n              txDataWithDefaults.gas = _context2.sent;\n            case 5:\n              if (txDataWithDefaults.from !== undefined) {\n                txDataWithDefaults.from = txDataWithDefaults.from.toLowerCase();\n              }\n              return _context2.abrupt(\"return\", txDataWithDefaults);\n            case 7:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n    }\n  }, {\n    key: \"_evmExecAsync\",\n    value: function _evmExecAsync(encodedData) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var encodedDataBytes, addressBuf, vm, psm, accountPk, accountAddress, account, contractCode, rawCallResult, result;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              encodedDataBytes = Buffer.from(encodedData.substr(2), 'hex');\n              addressBuf = Buffer.from(this.address.substr(2), 'hex'); // should only run once, the first time it is called\n              if (!(this._evmIfExists === undefined)) {\n                _context3.next = 19;\n                break;\n              }\n              vm = new ethereumjs_vm_1.default({});\n              psm = new promisified_1.default(vm.stateManager); // create an account with 1 ETH\n              accountPk = Buffer.from(ARBITRARY_PRIVATE_KEY, 'hex');\n              accountAddress = util.privateToAddress(accountPk);\n              account = new ethereumjs_account_1.default({\n                balance: 1e18\n              });\n              _context3.next = 10;\n              return psm.putAccount(accountAddress, account);\n            case 10:\n              if (!(this._deployedBytecodeIfExists === undefined)) {\n                _context3.next = 15;\n                break;\n              }\n              _context3.next = 13;\n              return this._web3Wrapper.getContractCodeAsync(this.address);\n            case 13:\n              contractCode = _context3.sent;\n              this._deployedBytecodeIfExists = Buffer.from(contractCode.substr(2), 'hex');\n            case 15:\n              _context3.next = 17;\n              return psm.putContractCode(addressBuf, this._deployedBytecodeIfExists);\n            case 17:\n              // save for later\n              this._evmIfExists = vm;\n              this._evmAccountIfExists = accountAddress;\n            case 19:\n              _context3.prev = 19;\n              _context3.next = 22;\n              return this._evmIfExists.runCall({\n                to: addressBuf,\n                caller: this._evmAccountIfExists,\n                origin: this._evmAccountIfExists,\n                data: encodedDataBytes\n              });\n            case 22:\n              result = _context3.sent;\n              rawCallResult = \"0x\".concat(result.execResult.returnValue.toString('hex'));\n              _context3.next = 30;\n              break;\n            case 26:\n              _context3.prev = 26;\n              _context3.t0 = _context3[\"catch\"](19);\n              BaseContract._throwIfThrownErrorIsRevertError(_context3.t0);\n              throw _context3.t0;\n            case 30:\n              BaseContract._throwIfCallResultIsRevertError(rawCallResult);\n              return _context3.abrupt(\"return\", rawCallResult);\n            case 32:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this, [[19, 26]]);\n      }));\n    }\n  }, {\n    key: \"_performCallAsync\",\n    value: function _performCallAsync(callData, defaultBlock) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var callDataWithDefaults, rawCallResult;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return this._applyDefaultsToTxDataAsync(callData);\n            case 2:\n              callDataWithDefaults = _context4.sent;\n              _context4.prev = 3;\n              _context4.next = 6;\n              return this._web3Wrapper.callAsync(callDataWithDefaults, defaultBlock);\n            case 6:\n              rawCallResult = _context4.sent;\n              _context4.next = 13;\n              break;\n            case 9:\n              _context4.prev = 9;\n              _context4.t0 = _context4[\"catch\"](3);\n              BaseContract._throwIfThrownErrorIsRevertError(_context4.t0);\n              throw _context4.t0;\n            case 13:\n              BaseContract._throwIfCallResultIsRevertError(rawCallResult);\n              return _context4.abrupt(\"return\", rawCallResult);\n            case 15:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this, [[3, 9]]);\n      }));\n    }\n  }, {\n    key: \"_lookupAbiEncoder\",\n    value: function _lookupAbiEncoder(functionSignature) {\n      var abiEncoder = this._abiEncoderByFunctionSignature[functionSignature];\n      if (abiEncoder === undefined) {\n        throw new Error(\"Failed to lookup method with function signature '\".concat(functionSignature, \"'\"));\n      }\n      return abiEncoder;\n    }\n  }, {\n    key: \"_lookupAbi\",\n    value: function _lookupAbi(functionSignature) {\n      var methodAbi = this.abi.find(function (abiDefinition) {\n        if (abiDefinition.type !== ethereum_types_1.AbiType.Function) {\n          return false;\n        }\n        // tslint:disable-next-line:no-unnecessary-type-assertion\n        var abiFunctionSignature = new utils_1.AbiEncoder.Method(abiDefinition).getSignature();\n        if (abiFunctionSignature === functionSignature) {\n          return true;\n        }\n        return false;\n      });\n      return methodAbi;\n    }\n  }, {\n    key: \"_strictEncodeArguments\",\n    value: function _strictEncodeArguments(functionSignature, functionArguments) {\n      if (this._encoderOverrides.encodeInput) {\n        return this._encoderOverrides.encodeInput(functionSignature.split('(')[0], functionArguments);\n      }\n      var abiEncoder = this._lookupAbiEncoder(functionSignature);\n      var inputAbi = abiEncoder.getDataItem().components;\n      if (inputAbi === undefined) {\n        throw new Error(\"Undefined Method Input ABI\");\n      }\n      var abiEncodedArguments = abiEncoder.encode(functionArguments);\n      return abiEncodedArguments;\n    }\n  }], [{\n    key: \"_formatABIDataItemList\",\n    value: function _formatABIDataItemList(abis, values, formatter) {\n      return values.map(function (value, i) {\n        return utils_3.formatABIDataItem(abis[i], value, formatter);\n      });\n    }\n  }, {\n    key: \"_lowercaseAddress\",\n    value: function _lowercaseAddress(type, value) {\n      return type === 'address' ? value.toLowerCase() : value;\n    }\n  }, {\n    key: \"_bigNumberToString\",\n    value: function _bigNumberToString(_type, value) {\n      return utils_1.BigNumber.isBigNumber(value) ? value.toString() : value;\n    }\n  }, {\n    key: \"_lookupConstructorAbi\",\n    value: function _lookupConstructorAbi(abi) {\n      var constructorAbiIfExists = abi.find(function (abiDefinition) {\n        return abiDefinition.type === ethereum_types_1.AbiType.Constructor;\n      });\n      if (constructorAbiIfExists !== undefined) {\n        return constructorAbiIfExists;\n      } else {\n        // If the constructor is not explicitly defined, it won't be included in the ABI. It is\n        // still callable however, so we construct what the ABI would look like were it to exist.\n        var defaultConstructorAbi = {\n          type: ethereum_types_1.AbiType.Constructor,\n          stateMutability: 'nonpayable',\n          payable: false,\n          inputs: []\n        };\n        return defaultConstructorAbi;\n      }\n    }\n  }, {\n    key: \"_throwIfCallResultIsRevertError\",\n    value: function _throwIfCallResultIsRevertError(rawCallResult) {\n      // Try to decode the call result as a revert error.\n      var revert;\n      try {\n        revert = utils_1.decodeBytesAsRevertError(rawCallResult);\n      } catch (err) {\n        // Can't decode it as a revert error, so assume it didn't revert.\n        return;\n      }\n      throw revert;\n    }\n  }, {\n    key: \"_throwIfThrownErrorIsRevertError\",\n    value: function _throwIfThrownErrorIsRevertError(error) {\n      // Try to decode a thrown error.\n      var revertError;\n      try {\n        revertError = utils_1.decodeThrownErrorAsRevertError(error);\n      } catch (err) {\n        // Can't decode it.\n        return;\n      }\n      // Re-cast StringRevertErrors as plain Errors for backwards-compatibility.\n      if (revertError instanceof utils_1.StringRevertError) {\n        throw new Error(revertError.values.message);\n      }\n      throw revertError;\n    }\n  }, {\n    key: \"_throwIfUnexpectedEmptyCallResult\",\n    value: function _throwIfUnexpectedEmptyCallResult(rawCallResult, methodAbi) {\n      // With live nodes, we will receive an empty call result if:\n      // 1. The function has no return value.\n      // 2. The contract reverts without data.\n      // 3. The contract reverts with an invalid opcode (`assert(false)` or `invalid()`).\n      if (!rawCallResult || rawCallResult === '0x') {\n        var returnValueDataItem = methodAbi.getReturnValueDataItem();\n        if (returnValueDataItem.components === undefined || returnValueDataItem.components.length === 0) {\n          // Expected no result (which makes it hard to tell if the call reverted).\n          return;\n        }\n        throw new Error(\"Function \\\"\".concat(methodAbi.getSignature(), \"\\\" reverted with no data\"));\n      }\n    } // Throws if the given arguments cannot be safely/correctly encoded based on\n    // the given inputAbi. An argument may not be considered safely encodeable\n    // if it overflows the corresponding Solidity type, there is a bug in the\n    // encoder, or the encoder performs unsafe type coercion.\n  }, {\n    key: \"strictArgumentEncodingCheck\",\n    value: function strictArgumentEncodingCheck(inputAbi, args) {\n      var abiEncoder = utils_1.AbiEncoder.create(inputAbi);\n      var params = utils_1.abiUtils.parseEthersParams(inputAbi);\n      var rawEncoded = abiEncoder.encode(args);\n      var rawDecoded = abiEncoder.decodeAsArray(rawEncoded);\n      for (var i = 0; i < rawDecoded.length; i++) {\n        var original = args[i];\n        var decoded = rawDecoded[i];\n        if (!utils_1.abiUtils.isAbiDataEqual(params.names[i], params.types[i], original, decoded)) {\n          throw new Error(\"Cannot safely encode argument: \".concat(params.names[i], \" (\").concat(original, \") of type \").concat(params.types[i], \". (Possible type overflow or other encoding error)\"));\n        }\n      }\n      return rawEncoded;\n    }\n  }, {\n    key: \"_applyDefaultsToContractTxDataAsync\",\n    value: function _applyDefaultsToContractTxDataAsync(txData, estimateGasAsync) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var txDataWithDefaults;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              txDataWithDefaults = BaseContract._removeUndefinedProperties(txData);\n              if (!(txDataWithDefaults.gas === undefined && estimateGasAsync !== undefined)) {\n                _context5.next = 5;\n                break;\n              }\n              _context5.next = 4;\n              return estimateGasAsync(txDataWithDefaults);\n            case 4:\n              txDataWithDefaults.gas = _context5.sent;\n            case 5:\n              if (txDataWithDefaults.from !== undefined) {\n                txDataWithDefaults.from = txDataWithDefaults.from.toLowerCase();\n              }\n              return _context5.abrupt(\"return\", txDataWithDefaults);\n            case 7:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5);\n      }));\n    }\n  }, {\n    key: \"_assertCallParams\",\n    value: function _assertCallParams(callData, defaultBlock) {\n      assert_1.assert.doesConformToSchema('callData', callData, json_schemas_1.schemas.callDataSchema);\n      if (defaultBlock !== undefined) {\n        assert_1.assert.isBlockParam('defaultBlock', defaultBlock);\n      }\n    }\n  }, {\n    key: \"_removeUndefinedProperties\",\n    value: function _removeUndefinedProperties(props) {\n      var clonedProps = Object.assign({}, props);\n      Object.keys(clonedProps).forEach(function (key) {\n        return clonedProps[key] === undefined && delete clonedProps[key];\n      });\n      return clonedProps;\n    }\n  }]);\n  return BaseContract;\n}();\nexports.BaseContract = BaseContract;","map":null,"metadata":{},"sourceType":"script"}