{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"/Users/nicholasschepisi/Desktop/code/bbb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.filterUtils = void 0;\nvar utils_1 = require(\"@0x/utils\");\nvar ethUtil = require(\"ethereumjs-util\");\nvar jsSHA3 = require(\"js-sha3\");\nvar uuid = require(\"uuid/v4\");\nvar TOPIC_LENGTH = 32;\nexports.filterUtils = {\n  generateUUID: function generateUUID() {\n    return uuid();\n  },\n  getFilter: function getFilter(address, eventName, indexFilterValues, abi, blockRange) {\n    // tslint:disable:next-line no-unnecessary-type-assertion\n    var eventAbi = abi.find(function (abiDefinition) {\n      return abiDefinition.name === eventName;\n    });\n    var eventSignature = exports.filterUtils.getEventSignatureFromAbiByName(eventAbi);\n    var topicForEventSignature = ethUtil.addHexPrefix(jsSHA3.keccak256(eventSignature));\n    var topicsForIndexedArgs = exports.filterUtils.getTopicsForIndexedArgs(eventAbi, indexFilterValues);\n    var topics = [topicForEventSignature].concat(_toConsumableArray(topicsForIndexedArgs));\n    var filter = {\n      address: address,\n      topics: topics\n    };\n    if (blockRange !== undefined) {\n      filter = Object.assign(Object.assign({}, blockRange), filter);\n    }\n    return filter;\n  },\n  getEventSignatureFromAbiByName: function getEventSignatureFromAbiByName(eventAbi) {\n    var types = eventAbi.inputs.map(function (i) {\n      return i.type;\n    });\n    var signature = \"\".concat(eventAbi.name, \"(\").concat(types.join(','), \")\");\n    return signature;\n  },\n  getTopicsForIndexedArgs: function getTopicsForIndexedArgs(abi, indexFilterValues) {\n    var topics = [];\n    var _iterator = _createForOfIteratorHelper(abi.inputs),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var eventInput = _step.value;\n        if (!eventInput.indexed) {\n          continue;\n        }\n        if (indexFilterValues[eventInput.name] === undefined) {\n          // Null is a wildcard topic in a JSON-RPC call\n          topics.push(null);\n        } else {\n          // tslint:disable: no-unnecessary-type-assertion\n          var value = indexFilterValues[eventInput.name];\n          if (utils_1.BigNumber.isBigNumber(value)) {\n            // tslint:disable-next-line custom-no-magic-numbers\n            value = ethUtil.fromSigned(value.toString(10));\n          }\n          // tslint:enable: no-unnecessary-type-assertion\n          var buffer = ethUtil.toBuffer(value);\n          var paddedBuffer = ethUtil.setLengthLeft(buffer, TOPIC_LENGTH);\n          var topic = ethUtil.bufferToHex(paddedBuffer);\n          topics.push(topic);\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n    return topics;\n  },\n  matchesFilter: function matchesFilter(log, filter) {\n    if (filter.address !== undefined && log.address !== filter.address) {\n      return false;\n    }\n    if (filter.topics !== undefined) {\n      return exports.filterUtils.doesMatchTopics(log.topics, filter.topics);\n    }\n    return true;\n  },\n  doesMatchTopics: function doesMatchTopics(logTopics, filterTopics) {\n    var matchesTopic = logTopics.map(function (logTopic, i) {\n      return exports.filterUtils.matchesTopic(logTopic, filterTopics[i]);\n    });\n    var doesMatchTopics = matchesTopic.every(function (m) {\n      return m;\n    });\n    return doesMatchTopics;\n  },\n  matchesTopic: function matchesTopic(logTopic, filterTopic) {\n    if (Array.isArray(filterTopic)) {\n      return filterTopic.includes(logTopic);\n    }\n    if (typeof filterTopic === 'string') {\n      return filterTopic === logTopic;\n    }\n    // null topic is a wildcard\n    return true;\n  }\n};","map":null,"metadata":{},"sourceType":"script"}