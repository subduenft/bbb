{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function sent() {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar BN = require(\"bn.js\");\nvar exceptions_1 = require(\"../exceptions\");\nvar memory_1 = require(\"./memory\");\nvar stack_1 = require(\"./stack\");\nvar opFns_1 = require(\"./opFns\");\n/**\n * Parses and executes EVM bytecode.\n */\nvar Interpreter = /** @class */function () {\n  function Interpreter(vm, eei) {\n    this._vm = vm; // TODO: remove when not needed\n    this._state = vm.pStateManager;\n    this._eei = eei;\n    this._runState = {\n      programCounter: 0,\n      opCode: 0xfe,\n      memory: new memory_1.default(),\n      memoryWordCount: new BN(0),\n      highestMemCost: new BN(0),\n      stack: new stack_1.default(),\n      code: Buffer.alloc(0),\n      validJumps: [],\n      // TODO: Replace with EEI methods\n      _common: this._vm._common,\n      stateManager: this._state._wrapped,\n      eei: this._eei\n    };\n  }\n  Interpreter.prototype.run = function (code, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    return __awaiter(this, void 0, void 0, function () {\n      var pc, err, opCode, e_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this._runState.code = code;\n            this._runState.programCounter = opts.pc || this._runState.programCounter;\n            this._runState.validJumps = this._getValidJumpDests(code);\n            pc = this._runState.programCounter;\n            if (pc !== 0 && (pc < 0 || pc >= this._runState.code.length)) {\n              throw new Error('Internal error: program counter not in range');\n            }\n            _a.label = 1;\n          case 1:\n            if (!(this._runState.programCounter < this._runState.code.length)) return [3 /*break*/, 7];\n            opCode = this._runState.code[this._runState.programCounter];\n            this._runState.opCode = opCode;\n            return [4 /*yield*/, this._runStepHook()];\n          case 2:\n            _a.sent();\n            _a.label = 3;\n          case 3:\n            _a.trys.push([3, 5,, 6]);\n            return [4 /*yield*/, this.runStep()];\n          case 4:\n            _a.sent();\n            return [3 /*break*/, 6];\n          case 5:\n            e_1 = _a.sent();\n            // STOP is not an exception\n            if (e_1.error !== exceptions_1.ERROR.STOP) {\n              err = e_1;\n            }\n            // TODO: Throw on non-VmError exceptions\n            return [3 /*break*/, 7];\n          case 6:\n            return [3 /*break*/, 1];\n          case 7:\n            return [2 /*return*/, {\n              runState: this._runState,\n              exceptionError: err\n            }];\n        }\n      });\n    });\n  };\n  /**\n   * Executes the opcode to which the program counter is pointing,\n   * reducing it's base gas cost, and increments the program counter.\n   */\n  Interpreter.prototype.runStep = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var opInfo, opFn;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            opInfo = this.lookupOpInfo(this._runState.opCode);\n            // Check for invalid opcode\n            if (opInfo.name === 'INVALID') {\n              throw new exceptions_1.VmError(exceptions_1.ERROR.INVALID_OPCODE);\n            }\n            // Reduce opcode's base fee\n            this._eei.useGas(new BN(opInfo.fee));\n            // Advance program counter\n            this._runState.programCounter++;\n            opFn = this.getOpHandler(opInfo);\n            if (!opInfo.isAsync) return [3 /*break*/, 2];\n            return [4 /*yield*/, opFn.apply(null, [this._runState])];\n          case 1:\n            _a.sent();\n            return [3 /*break*/, 3];\n          case 2:\n            opFn.apply(null, [this._runState]);\n            _a.label = 3;\n          case 3:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * Get the handler function for an opcode.\n   */\n  Interpreter.prototype.getOpHandler = function (opInfo) {\n    return opFns_1.handlers[opInfo.name];\n  };\n  /**\n   * Get info for an opcode from VM's list of opcodes.\n   */\n  Interpreter.prototype.lookupOpInfo = function (op, full) {\n    if (full === void 0) {\n      full = false;\n    }\n    var opcode = this._vm._opcodes[op] ? this._vm._opcodes[op] : {\n      name: 'INVALID',\n      fee: 0,\n      isAsync: false\n    };\n    if (full) {\n      var name = opcode.name;\n      if (name === 'LOG') {\n        name += op - 0xa0;\n      }\n      if (name === 'PUSH') {\n        name += op - 0x5f;\n      }\n      if (name === 'DUP') {\n        name += op - 0x7f;\n      }\n      if (name === 'SWAP') {\n        name += op - 0x8f;\n      }\n      return __assign(__assign({}, opcode), {\n        name: name\n      });\n    }\n    return opcode;\n  };\n  Interpreter.prototype._runStepHook = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var eventObj;\n      return __generator(this, function (_a) {\n        eventObj = {\n          pc: this._runState.programCounter,\n          gasLeft: this._eei.getGasLeft(),\n          opcode: this.lookupOpInfo(this._runState.opCode, true),\n          stack: this._runState.stack._store,\n          depth: this._eei._env.depth,\n          address: this._eei._env.address,\n          account: this._eei._env.contract,\n          stateManager: this._runState.stateManager,\n          memory: this._runState.memory._store,\n          memoryWordCount: this._runState.memoryWordCount,\n          codeAddress: this._eei._env.codeAddress\n        };\n        /**\n         * The `step` event for trace output\n         *\n         * @event Event: step\n         * @type {Object}\n         * @property {Number} pc representing the program counter\n         * @property {String} opcode the next opcode to be ran\n         * @property {BN} gasLeft amount of gasLeft\n         * @property {Array} stack an `Array` of `Buffers` containing the stack\n         * @property {Account} account the [`Account`](https://github.com/ethereum/ethereumjs-account) which owns the code running\n         * @property {Buffer} address the address of the `account`\n         * @property {Number} depth the current number of calls deep the contract is\n         * @property {Buffer} memory the memory of the VM as a `buffer`\n         * @property {BN} memoryWordCount current size of memory in words\n         * @property {StateManager} stateManager a [`StateManager`](stateManager.md) instance (Beta API)\n         */\n        return [2 /*return*/, this._vm._emit('step', eventObj)];\n      });\n    });\n  };\n  // Returns all valid jump destinations.\n  Interpreter.prototype._getValidJumpDests = function (code) {\n    var jumps = [];\n    for (var i = 0; i < code.length; i++) {\n      var curOpCode = this.lookupOpInfo(code[i]).name;\n      // no destinations into the middle of PUSH\n      if (curOpCode === 'PUSH') {\n        i += code[i] - 0x5f;\n      }\n      if (curOpCode === 'JUMPDEST') {\n        jumps.push(i);\n      }\n    }\n    return jumps;\n  };\n  return Interpreter;\n}();\nexports.default = Interpreter;","map":null,"metadata":{},"sourceType":"script"}