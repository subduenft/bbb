{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MerkleTree = void 0;\nvar ethers_1 = require(\"ethers\");\nvar utils_1 = require(\"ethers/lib/utils\");\nvar merkletreejs_1 = __importDefault(require(\"merkletreejs\"));\nvar hashIdentifier = function hashIdentifier(identifier) {\n  return (0, utils_1.keccak256)(Buffer.from(ethers_1.BigNumber.from(identifier).toHexString().slice(2).padStart(64, \"0\"), \"hex\"));\n};\n/**\n * Simple wrapper over the MerkleTree in merkletreejs.\n * Handles hashing identifiers to be compatible with Seaport.\n */\nvar MerkleTree = /** @class */function () {\n  function MerkleTree(identifiers) {\n    this.tree = new merkletreejs_1.default(identifiers.map(hashIdentifier), utils_1.keccak256, {\n      sort: true\n    });\n  }\n  MerkleTree.prototype.getProof = function (identifier) {\n    return this.tree.getHexProof(hashIdentifier(identifier));\n  };\n  MerkleTree.prototype.getRoot = function () {\n    return this.tree.getRoot().toString(\"hex\") ? this.tree.getHexRoot() : \"0\";\n  };\n  return MerkleTree;\n}();\nexports.MerkleTree = MerkleTree;","map":null,"metadata":{},"sourceType":"script"}