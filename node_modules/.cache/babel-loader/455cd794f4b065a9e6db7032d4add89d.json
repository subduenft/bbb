{"ast":null,"code":"import _classCallCheck from \"/Users/nicholasschepisi/Desktop/code/bbb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/nicholasschepisi/Desktop/code/bbb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"/Users/nicholasschepisi/Desktop/code/bbb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"/Users/nicholasschepisi/Desktop/code/bbb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nvar _networks;\nimport { urlClean, logger } from '@0xsequence/utils';\nimport { ethers } from 'ethers';\nimport { JsonRpcProvider } from '@ethersproject/providers';\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction isNetworkConfig(cand) {\n  return cand && cand.chainId !== undefined && cand.name !== undefined && cand.rpcUrl !== undefined && cand.relayer !== undefined;\n}\nvar getChainId = function getChainId(chainId) {\n  if (typeof chainId === 'number') {\n    return chainId;\n  }\n  if (chainId.chainId) {\n    return chainId.chainId;\n  }\n  return ethers.BigNumber.from(chainId).toNumber();\n};\nvar maybeChainId = function maybeChainId(chainId) {\n  if (!chainId) return undefined;\n  return getChainId(chainId);\n};\nvar getAuthNetwork = function getAuthNetwork(networks) {\n  return networks.find(function (network) {\n    return network.isAuthChain;\n  });\n};\nvar isValidNetworkConfig = function isValidNetworkConfig(networkConfig) {\n  var raise = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var skipRelayerCheck = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  if (!networkConfig) throw new Error(\"invalid network config: empty config\");\n  var configs = [];\n  if (Array.isArray(networkConfig)) {\n    configs.push.apply(configs, _toConsumableArray(networkConfig));\n  } else {\n    configs.push(networkConfig);\n  }\n  if (configs.length === 0) {\n    if (raise) throw new Error(\"invalid network config: empty config\");\n    return false;\n  } // Ensure distinct chainId configs\n\n  var chainIds = configs.map(function (c) {\n    return c.chainId;\n  }).sort();\n  var dupes = chainIds.filter(function (c, i) {\n    return chainIds.indexOf(c) !== i;\n  });\n  if (dupes.length > 0) {\n    if (raise) throw new Error(\"invalid network config: duplicate chainIds \".concat(dupes));\n    return false;\n  } // Downcase all network names\n\n  configs.forEach(function (c) {\n    return c.name = c.name.toLowerCase();\n  }); // Ensure distinct network names\n\n  var names = configs.map(function (c) {\n    return c.name;\n  }).sort();\n  var nameDupes = names.filter(function (c, i) {\n    return names.indexOf(c) !== i;\n  });\n  if (nameDupes.length > 0) {\n    if (raise) throw new Error(\"invalid network config: duplicate network names \".concat(nameDupes));\n    return false;\n  } // Ensure rpcUrl or provider is specified\n  // Ensure relayerUrl or relayer is specified\n  // Ensure one default chain\n  // Ensure one auth chain\n\n  var defaultChain = false;\n  var authChain = false;\n  for (var i = 0; i < configs.length; i++) {\n    var c = configs[i];\n    if ((!c.rpcUrl || c.rpcUrl === '') && !c.provider) {\n      if (raise) throw new Error(\"invalid network config for chainId \".concat(c.chainId, \": rpcUrl or provider must be provided\"));\n      return false;\n    }\n    if (!skipRelayerCheck) {\n      if (!c.relayer) {\n        if (raise) throw new Error(\"invalid network config for chainId \".concat(c.chainId, \": relayer must be provided\"));\n        return false;\n      }\n    }\n    if (c.isDefaultChain) {\n      if (defaultChain) {\n        if (raise) throw new Error(\"invalid network config for chainId \".concat(c.chainId, \": DefaultChain is already set by another config\"));\n        return false;\n      }\n      defaultChain = true;\n    }\n    if (c.isAuthChain) {\n      if (authChain) {\n        if (raise) throw new Error(\"invalid network config for chainId \".concat(c.chainId, \": AuthChain is already set by another config\"));\n      }\n      authChain = true;\n    }\n  }\n  if (!defaultChain) {\n    if (raise) throw new Error(\"invalid network config: DefaultChain must be set\");\n    return false;\n  }\n  if (!authChain) {\n    if (raise) throw new Error(\"invalid network config: AuthChain must be set\");\n    return false;\n  }\n  return true;\n};\nvar ensureValidNetworks = function ensureValidNetworks(networks) {\n  var skipRelayerCheck = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  isValidNetworkConfig(networks, true, skipRelayerCheck);\n  return networks;\n};\nvar ensureUniqueNetworks = function ensureUniqueNetworks(networks) {\n  var raise = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  var chainIds = networks.map(function (c) {\n    return c.chainId;\n  }).sort();\n  var dupes = chainIds.filter(function (c, i) {\n    return chainIds.indexOf(c) !== i;\n  });\n  if (dupes.length > 0) {\n    if (raise) throw new Error(\"invalid network config: duplicate chainIds \".concat(dupes));\n    return false;\n  }\n  return true;\n};\nvar updateNetworkConfig = function updateNetworkConfig(src, dest) {\n  if (!src || !dest) return;\n  if (!src.chainId && !src.name) {\n    throw new Error('failed to update network config: source config is missing chainId or name');\n  }\n  if (src.chainId !== dest.chainId && src.name !== dest.name) {\n    throw new Error('failed to update network config: one of chainId or name must match');\n  }\n  if (src.rpcUrl) {\n    dest.rpcUrl = src.rpcUrl;\n    dest.provider = undefined;\n  }\n  if (src.provider) {\n    dest.provider = src.provider;\n  }\n  if (src.relayer) {\n    dest.relayer = src.relayer;\n  }\n  if (src.ensAddress) {\n    dest.ensAddress = src.ensAddress;\n  } // NOTE: we do not set default or auth chain from here\n  // if (src.isDefaultChain) {\n  //   dest.isDefaultChain = src.isDefaultChain\n  // }\n  // if (src.isAuthChain) {\n  //   dest.isAuthChain = src.isAuthChain\n  // }\n};\n\nvar createNetworkConfig = function createNetworkConfig(networks, defaultChainId, vars) {\n  var config = [];\n  if (typeof networks === 'function' && vars) {\n    config = networks(vars);\n  } else {\n    config = networks;\n  }\n  if (defaultChainId) {\n    config.forEach(function (n) {\n      return n.isDefaultChain = false;\n    });\n    var mainNetwork = config.filter(function (n) {\n      return n.chainId === defaultChainId;\n    });\n    if (!mainNetwork || mainNetwork.length === 0) {\n      throw new Error(\"defaultChainId \".concat(defaultChainId, \" cannot be found in network list\"));\n    } else {\n      mainNetwork[0].isDefaultChain = true;\n    }\n  }\n  return ensureValidNetworks(sortNetworks(config));\n};\nvar findNetworkConfig = function findNetworkConfig(networks, chainId) {\n  if (typeof chainId === 'string') {\n    if (chainId.startsWith('0x')) {\n      var id = ethers.BigNumber.from(chainId).toNumber();\n      return networks.find(function (n) {\n        return n.chainId === id;\n      });\n    } else {\n      return networks.find(function (n) {\n        return n.name === chainId;\n      });\n    }\n  } else if (typeof chainId === 'number') {\n    return networks.find(function (n) {\n      return n.chainId === chainId;\n    });\n  } else if (chainId.chainId) {\n    return networks.find(function (n) {\n      return n.chainId === chainId.chainId;\n    });\n  } else {\n    return undefined;\n  }\n};\nvar checkNetworkConfig = function checkNetworkConfig(network, chainId) {\n  if (!network) return false;\n  if (network.name === chainId) return true;\n  if (network.chainId === chainId) return true;\n  return false;\n};\nvar networksIndex = function networksIndex(networks) {\n  var index = {};\n  for (var i = 0; i < networks.length; i++) {\n    index[networks[i].name] = networks[i];\n  }\n  return index;\n}; // TODO: we should remove sortNetworks in the future but this is a breaking change for dapp integrations on older versions <-> wallet\n// sortNetworks orders the network config list by: defaultChain, authChain, ..rest by chainId ascending numbers\n\nvar sortNetworks = function sortNetworks(networks) {\n  if (!networks) {\n    return [];\n  }\n  var config = networks.sort(function (a, b) {\n    if (a.chainId === b.chainId) return 0;\n    return a.chainId < b.chainId ? -1 : 1;\n  }); // DefaultChain goes first\n\n  var defaultConfigIdx = config.findIndex(function (c) {\n    return c.isDefaultChain;\n  });\n  if (defaultConfigIdx > 0) config.splice(0, 0, config.splice(defaultConfigIdx, 1)[0]); // AuthChain goes second\n\n  var authConfigIdx = config.findIndex(function (c) {\n    return c.isAuthChain && c.isDefaultChain !== true;\n  });\n  if (authConfigIdx > 0) config.splice(1, 0, config.splice(authConfigIdx, 1)[0]);\n  return config;\n};\nvar ChainId;\n(function (ChainId) {\n  ChainId[ChainId[\"MAINNET\"] = 1] = \"MAINNET\";\n  ChainId[ChainId[\"ROPSTEN\"] = 3] = \"ROPSTEN\";\n  ChainId[ChainId[\"RINKEBY\"] = 4] = \"RINKEBY\";\n  ChainId[ChainId[\"GOERLI\"] = 5] = \"GOERLI\";\n  ChainId[ChainId[\"KOVAN\"] = 42] = \"KOVAN\";\n  ChainId[ChainId[\"POLYGON\"] = 137] = \"POLYGON\";\n  ChainId[ChainId[\"POLYGON_MUMBAI\"] = 80001] = \"POLYGON_MUMBAI\";\n  ChainId[ChainId[\"BSC\"] = 56] = \"BSC\";\n  ChainId[ChainId[\"BSC_TESTNET\"] = 97] = \"BSC_TESTNET\";\n  ChainId[ChainId[\"OPTIMISM\"] = 10] = \"OPTIMISM\";\n  ChainId[ChainId[\"OPTIMISM_TESTNET\"] = 69] = \"OPTIMISM_TESTNET\";\n  ChainId[ChainId[\"ARBITRUM\"] = 42161] = \"ARBITRUM\";\n  ChainId[ChainId[\"ARBITRUM_TESTNET\"] = 421611] = \"ARBITRUM_TESTNET\";\n  ChainId[ChainId[\"AVALANCHE\"] = 43114] = \"AVALANCHE\";\n  ChainId[ChainId[\"AVALANCHE_TESTNET\"] = 43113] = \"AVALANCHE_TESTNET\";\n  ChainId[ChainId[\"FANTOM\"] = 250] = \"FANTOM\";\n  ChainId[ChainId[\"FANTOM_TESTNET\"] = 4002] = \"FANTOM_TESTNET\";\n  ChainId[ChainId[\"GNOSIS\"] = 100] = \"GNOSIS\";\n  ChainId[ChainId[\"AURORA\"] = 1313161554] = \"AURORA\";\n  ChainId[ChainId[\"AURORA_TESTNET\"] = 1313161556] = \"AURORA_TESTNET\";\n})(ChainId || (ChainId = {}));\nvar networks = (_networks = {}, _defineProperty(_networks, ChainId.MAINNET, {\n  chainId: ChainId.MAINNET,\n  name: 'mainnet',\n  title: 'Ethereum',\n  blockExplorer: {\n    name: 'Etherscan',\n    rootUrl: 'https://etherscan.io/'\n  }\n}), _defineProperty(_networks, ChainId.ROPSTEN, {\n  chainId: ChainId.ROPSTEN,\n  name: 'ropsten',\n  title: 'Ropsten',\n  testnet: true,\n  blockExplorer: {\n    name: 'Etherscan (Ropsten)',\n    rootUrl: 'https://ropsten.etherscan.io/'\n  }\n}), _defineProperty(_networks, ChainId.RINKEBY, {\n  chainId: ChainId.RINKEBY,\n  name: 'rinkeby',\n  title: 'Rinkeby',\n  testnet: true,\n  blockExplorer: {\n    name: 'Etherscan (Rinkeby)',\n    rootUrl: 'https://rinkeby.etherscan.io/'\n  }\n}), _defineProperty(_networks, ChainId.GOERLI, {\n  chainId: ChainId.GOERLI,\n  name: 'goerli',\n  title: 'Goerli',\n  testnet: true,\n  blockExplorer: {\n    name: 'Etherscan (Goerli)',\n    rootUrl: 'https://goerli.etherscan.io/'\n  }\n}), _defineProperty(_networks, ChainId.KOVAN, {\n  chainId: ChainId.KOVAN,\n  name: 'kovan',\n  title: 'Kovan',\n  testnet: true,\n  blockExplorer: {\n    name: 'Etherscan (Kovan)',\n    rootUrl: 'https://kovan.etherscan.io/'\n  }\n}), _defineProperty(_networks, ChainId.POLYGON, {\n  chainId: ChainId.POLYGON,\n  name: 'polygon',\n  title: 'Polygon',\n  blockExplorer: {\n    name: 'Polygonscan',\n    rootUrl: 'https://polygonscan.com/'\n  }\n}), _defineProperty(_networks, ChainId.POLYGON_MUMBAI, {\n  chainId: ChainId.POLYGON_MUMBAI,\n  name: 'mumbai',\n  title: 'Polygon Mumbai',\n  testnet: true,\n  blockExplorer: {\n    name: 'Polygonscan (Mumbai)',\n    rootUrl: 'https://mumbai.polygonscan.com/'\n  }\n}), _defineProperty(_networks, ChainId.BSC, {\n  chainId: ChainId.BSC,\n  name: 'bsc',\n  title: 'BNB Smart Chain',\n  blockExplorer: {\n    name: 'BSCScan',\n    rootUrl: 'https://bscscan.com/'\n  }\n}), _defineProperty(_networks, ChainId.BSC_TESTNET, {\n  chainId: ChainId.BSC_TESTNET,\n  name: 'bsc-testnet',\n  title: 'BNB Smart Chain Testnet',\n  testnet: true,\n  blockExplorer: {\n    name: 'BSCScan (Testnet)',\n    rootUrl: 'https://testnet.bscscan.com/'\n  }\n}), _defineProperty(_networks, ChainId.OPTIMISM, {\n  chainId: ChainId.OPTIMISM,\n  name: 'optimism',\n  title: 'Optimism',\n  blockExplorer: {\n    name: 'Etherscan (Optimism)',\n    rootUrl: 'https://optimistic.etherscan.io/'\n  }\n}), _defineProperty(_networks, ChainId.OPTIMISM_TESTNET, {\n  chainId: ChainId.OPTIMISM_TESTNET,\n  name: 'optimism-testnet',\n  title: 'Optimistic Kovan',\n  testnet: true,\n  blockExplorer: {\n    name: 'Etherscan (Optimism Testnet)',\n    rootUrl: 'https://kovan-optimistic.etherscan.io/'\n  }\n}), _defineProperty(_networks, ChainId.ARBITRUM, {\n  chainId: ChainId.ARBITRUM,\n  name: 'arbitrum',\n  title: 'Arbitrum',\n  blockExplorer: {\n    name: 'Arbiscan',\n    rootUrl: 'https://arbiscan.io/'\n  }\n}), _defineProperty(_networks, ChainId.ARBITRUM_TESTNET, {\n  chainId: ChainId.ARBITRUM_TESTNET,\n  name: 'arbitrum-testnet',\n  title: 'Arbitrum Testnet',\n  testnet: true,\n  blockExplorer: {\n    name: 'Arbiscan (Testnet)',\n    rootUrl: 'https://testnet.arbiscan.io/'\n  }\n}), _defineProperty(_networks, ChainId.AVALANCHE, {\n  chainId: ChainId.AVALANCHE,\n  name: 'avalanche',\n  title: 'Avalanche',\n  blockExplorer: {\n    name: 'Snowtrace',\n    rootUrl: 'https://snowtrace.io/'\n  }\n}), _defineProperty(_networks, ChainId.AVALANCHE_TESTNET, {\n  chainId: ChainId.AVALANCHE_TESTNET,\n  name: 'avalanche-testnet',\n  title: 'Avalanche Testnet',\n  testnet: true,\n  blockExplorer: {\n    name: 'Snowtrace (Testnet)',\n    rootUrl: 'https://testnet.snowtrace.io/'\n  }\n}), _defineProperty(_networks, ChainId.FANTOM, {\n  chainId: ChainId.FANTOM,\n  name: 'fantom',\n  title: 'Fantom',\n  blockExplorer: {\n    name: 'FTMScan',\n    rootUrl: 'https://ftmscan.com/'\n  }\n}), _defineProperty(_networks, ChainId.FANTOM_TESTNET, {\n  chainId: ChainId.FANTOM_TESTNET,\n  name: 'fantom-testnet',\n  title: 'Fantom Testnet',\n  testnet: true,\n  blockExplorer: {\n    name: 'FTMScan (Testnet)',\n    rootUrl: 'https://testnet.ftmscan.com/'\n  }\n}), _defineProperty(_networks, ChainId.GNOSIS, {\n  chainId: ChainId.GNOSIS,\n  name: 'gnosis',\n  title: 'Gnosis Chain',\n  blockExplorer: {\n    name: 'Gnosis Chain Explorer',\n    rootUrl: 'https://blockscout.com/xdai/mainnet/'\n  }\n}), _defineProperty(_networks, ChainId.AURORA, {\n  chainId: ChainId.AURORA,\n  name: 'aurora',\n  title: 'Aurora',\n  blockExplorer: {\n    name: 'Aurora Explorer',\n    rootUrl: 'https://aurorascan.dev/'\n  }\n}), _defineProperty(_networks, ChainId.AURORA_TESTNET, {\n  chainId: ChainId.AURORA_TESTNET,\n  name: 'aurora-testnet',\n  title: 'Aurora Testnet',\n  blockExplorer: {\n    name: 'Aurora Explorer (Testnet)',\n    rootUrl: 'https://testnet.aurorascan.dev/'\n  }\n}), _networks);\nvar mainnetNetworks = createNetworkConfig(function (vars) {\n  return [_extends({}, networks[ChainId.MAINNET], {\n    ensAddress: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\n    rpcUrl: urlClean(\"\".concat(vars.baseRpcUrl, \"/mainnet\")),\n    relayer: {\n      url: urlClean(\"\".concat(vars.baseRelayerUrl, \"/mainnet\"))\n    },\n    isDefaultChain: true\n  }), _extends({}, networks[ChainId.POLYGON], {\n    rpcUrl: 'https://rpc-mainnet.matic.network',\n    relayer: {\n      url: urlClean(\"\".concat(vars.baseRelayerUrl, \"/matic\"))\n    },\n    isAuthChain: true\n  })];\n}, 1, {\n  baseRpcUrl: 'https://nodes.sequence.app',\n  baseRelayerUrl: 'https://relayers.sequence.app'\n});\nvar testnetNetworks = createNetworkConfig(function (vars) {\n  return [_extends({}, networks[ChainId.RINKEBY], {\n    ensAddress: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\n    rpcUrl: urlClean(\"\".concat(vars.baseRpcUrl, \"/rinkeby\")),\n    relayer: {\n      url: urlClean(\"\".concat(vars.baseRelayerUrl, \"/rinkeby\"))\n    },\n    isDefaultChain: true\n  }), _extends({}, networks[ChainId.GOERLI], {\n    ensAddress: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\n    rpcUrl: urlClean(\"\".concat(vars.baseRpcUrl, \"/goerli\")),\n    relayer: {\n      url: urlClean(\"\".concat(vars.baseRelayerUrl, \"/goerli\"))\n    },\n    isAuthChain: true\n  })];\n}, undefined, {\n  baseRpcUrl: 'https://nodes.sequence.app',\n  baseRelayerUrl: 'https://relayers.sequence.app'\n});\n\n// WalletContext is the module addresses deployed on a network, aka the context / environment\n// of the Sequence Smart Wallet system on Ethereum.\n// sequenceContext are the deployed addresses of modules available on public networks.\nvar sequenceContext = {\n  factory: '0xf9D09D634Fb818b05149329C1dcCFAeA53639d96',\n  mainModule: '0xd01F11855bCcb95f88D7A48492F66410d4637313',\n  mainModuleUpgradable: '0x7EFE6cE415956c5f80C6530cC6cc81b4808F6118',\n  guestModule: '0x02390F3E6E5FD1C6786CB78FD3027C117a9955A7',\n  sequenceUtils: '0xd130B43062D875a4B7aF3f8fc036Bc6e9D3E1B3E',\n  libs: {\n    requireFreshSigner: '0xE6B9B21C077F382333220a072e4c44280b873907'\n  }\n};\nvar JsonRpcVersion = '2.0';\nvar JsonRpcRouter = /*#__PURE__*/function () {\n  function JsonRpcRouter(middlewares, sender) {\n    _classCallCheck(this, JsonRpcRouter);\n    this.sender = void 0;\n    this.handler = void 0;\n    this.sender = sender;\n    if (middlewares) {\n      this.setMiddleware(middlewares);\n    }\n  }\n  _createClass(JsonRpcRouter, [{\n    key: \"setMiddleware\",\n    value: function setMiddleware(middlewares) {\n      this.handler = createJsonRpcMiddlewareStack(middlewares, this.sender.sendAsync);\n    }\n  }, {\n    key: \"sendAsync\",\n    value: function sendAsync(request, callback, chainId) {\n      try {\n        this.handler(request, callback, chainId);\n      } catch (err) {\n        callback(err, undefined);\n      }\n    } // createWeb3Provider(network?: Networkish): EthersWeb3Provider {\n    //   return new EthersWeb3Provider(this.sender, network)\n    // }\n  }]);\n  return JsonRpcRouter;\n}();\nvar createJsonRpcMiddlewareStack = function createJsonRpcMiddlewareStack(middlewares, handler) {\n  if (middlewares.length === 0) return handler;\n  var toMiddleware = function toMiddleware(v) {\n    if (v.sendAsyncMiddleware) {\n      return v.sendAsyncMiddleware;\n    } else {\n      return v;\n    }\n  };\n  var chain;\n  chain = toMiddleware(middlewares[middlewares.length - 1])(handler);\n  for (var i = middlewares.length - 2; i >= 0; i--) {\n    chain = toMiddleware(middlewares[i])(chain);\n  }\n  return chain;\n};\nfunction isJsonRpcProvider(cand) {\n  return cand !== undefined && cand.send !== undefined && cand.constructor.defaultUrl !== undefined && cand.detectNetwork !== undefined && cand.getSigner !== undefined && cand.perform !== undefined;\n}\nfunction isJsonRpcHandler(cand) {\n  return cand !== undefined && cand.sendAsync !== undefined;\n}\nvar _nextId = 0;\nvar JsonRpcSender = function JsonRpcSender(provider, defaultChainId) {\n  var _this = this;\n  _classCallCheck(this, JsonRpcSender);\n  this.send = void 0;\n  this.request = void 0;\n  this.defaultChainId = void 0;\n  this.sendAsync = function (request, callback, chainId) {\n    _this.send(request.method, request.params, chainId || _this.defaultChainId).then(function (r) {\n      callback(undefined, {\n        jsonrpc: '2.0',\n        id: request.id,\n        result: r\n      });\n    }).catch(function (e) {\n      callback(e, undefined);\n    });\n  };\n  this.defaultChainId = defaultChainId;\n  if (isJsonRpcProvider(provider)) {\n    // we can ignore defaultChainId for JsonRpcProviders as they are already chain-bound\n    this.send = provider.send.bind(provider);\n  } else if (isJsonRpcHandler(provider)) {\n    this.send = function (method, params, chainId) {\n      return new Promise(function (resolve, reject) {\n        provider.sendAsync({\n          // TODO: really shouldn't have to set these here?\n          jsonrpc: JsonRpcVersion,\n          id: ++_nextId,\n          method: method,\n          params: params\n        }, function (error, response) {\n          if (error) {\n            reject(error);\n          } else if (response) {\n            resolve(response.result);\n          } else {\n            resolve(undefined);\n          }\n        }, chainId || _this.defaultChainId);\n      });\n    };\n  } else {\n    this.send = provider;\n  }\n  this.request = function (request, chainId) {\n    return _this.send(request.method, request.params, chainId);\n  };\n};\nvar JsonRpcExternalProvider = function JsonRpcExternalProvider(provider) {\n  var _this2 = this;\n  _classCallCheck(this, JsonRpcExternalProvider);\n  this.provider = provider;\n  this.sendAsync = function (request, callback) {\n    _this2.provider.send(request.method, request.params).then(function (r) {\n      callback(undefined, {\n        jsonrpc: '2.0',\n        id: request.id,\n        result: r\n      });\n    }).catch(function (e) {\n      callback(e, undefined);\n    });\n  };\n  this.send = this.sendAsync;\n};\nvar AllowProvider = /*#__PURE__*/function () {\n  function AllowProvider(isAllowedFunc) {\n    _classCallCheck(this, AllowProvider);\n    this.sendAsyncMiddleware = void 0;\n    this.isAllowedFunc = void 0;\n    if (isAllowedFunc) {\n      this.isAllowedFunc = isAllowedFunc;\n    } else {\n      this.isAllowedFunc = function (request) {\n        return true;\n      };\n    }\n    this.sendAsyncMiddleware = allowProviderMiddleware(this.isAllowedFunc);\n  }\n  _createClass(AllowProvider, [{\n    key: \"setIsAllowedFunc\",\n    value: function setIsAllowedFunc(fn) {\n      this.isAllowedFunc = fn;\n      this.sendAsyncMiddleware = allowProviderMiddleware(this.isAllowedFunc);\n    }\n  }]);\n  return AllowProvider;\n}();\nvar allowProviderMiddleware = function allowProviderMiddleware(isAllowed) {\n  return function (next) {\n    return function (request, callback, chainId) {\n      // ensure precondition is met or do not allow the request to continue\n      if (!isAllowed(request)) {\n        throw new Error('allowProvider middleware precondition is unmet.');\n      } // request is allowed. keep going..\n\n      next(request, callback, chainId);\n    };\n  };\n};\nvar CachedProvider = /*#__PURE__*/function () {\n  function CachedProvider(defaultChainId) {\n    var _this3 = this;\n    _classCallCheck(this, CachedProvider);\n    this.cachableJsonRpcMethods = ['net_version', 'eth_chainId', 'eth_accounts', 'sequence_getWalletContext', 'sequence_getNetworks'];\n    this.cache = void 0;\n    this.onUpdateCallback = void 0;\n    this.defaultChainId = void 0;\n    this.sendAsyncMiddleware = function (next) {\n      return function (request, callback, chainId) {\n        // Respond early with cached result\n        if (_this3.cachableJsonRpcMethods.includes(request.method)) {\n          var key = _this3.cacheKey(request.method, request.params, chainId || _this3.defaultChainId);\n          var result = _this3.getCacheValue(key);\n          if (result && result !== '') {\n            callback(undefined, {\n              jsonrpc: '2.0',\n              id: request.id,\n              result: result\n            });\n            return;\n          }\n        } // Continue down the handler chain\n\n        next(request, function (error, response, chainId) {\n          // Store result in cache and continue\n          if (_this3.cachableJsonRpcMethods.includes(request.method)) {\n            if (response && response.result) {\n              var _key = _this3.cacheKey(request.method, request.params, chainId || _this3.defaultChainId);\n              _this3.setCacheValue(_key, response.result);\n            }\n          } // Exec next handler\n\n          callback(error, response);\n        }, chainId || _this3.defaultChainId);\n      };\n    };\n    this.cacheKey = function (method, params, chainId) {\n      var key = '';\n      if (chainId) {\n        key = \"\".concat(chainId, \":\").concat(method, \":\");\n      } else {\n        key = \":\".concat(method, \":\");\n      }\n      if (!params || params.length === 0) {\n        return key + '[]';\n      }\n      return key + JSON.stringify(params);\n    };\n    this.getCache = function () {\n      return _this3.cache;\n    };\n    this.setCache = function (cache) {\n      _this3.cache = cache;\n      if (_this3.onUpdateCallback) {\n        _this3.onUpdateCallback();\n      }\n    };\n    this.getCacheValue = function (key) {\n      return _this3.cache[key];\n    };\n    this.setCacheValue = function (key, value) {\n      _this3.cache[key] = value;\n      if (_this3.onUpdateCallback) {\n        _this3.onUpdateCallback(key, value);\n      }\n    };\n    this.clearCache = function () {\n      _this3.cache = {};\n    };\n    this.cache = {};\n    this.defaultChainId = defaultChainId;\n  }\n  _createClass(CachedProvider, [{\n    key: \"onUpdate\",\n    value: function onUpdate(callback) {\n      this.onUpdateCallback = callback;\n    }\n  }]);\n  return CachedProvider;\n}();\nvar EagerProvider = function EagerProvider(props) {\n  var _this4 = this;\n  _classCallCheck(this, EagerProvider);\n  this.props = void 0;\n  this.sendAsyncMiddleware = function (next) {\n    return function (request, callback, chainId) {\n      var id = request.id,\n        method = request.method;\n      switch (method) {\n        case 'net_version':\n          if (_this4.props.chainId) {\n            callback(undefined, {\n              jsonrpc: '2.0',\n              id: id,\n              result: \"\".concat(_this4.props.chainId)\n            });\n            return;\n          }\n          break;\n        case 'eth_chainId':\n          if (_this4.props.chainId) {\n            callback(undefined, {\n              jsonrpc: '2.0',\n              id: id,\n              result: ethers.utils.hexlify(_this4.props.chainId)\n            });\n            return;\n          }\n          break;\n        case 'eth_accounts':\n          if (_this4.props.accountAddress) {\n            callback(undefined, {\n              jsonrpc: '2.0',\n              id: id,\n              result: [ethers.utils.getAddress(_this4.props.accountAddress)]\n            });\n            return;\n          }\n          break;\n        case 'sequence_getWalletContext':\n          if (_this4.props.walletContext) {\n            callback(undefined, {\n              jsonrpc: '2.0',\n              id: id,\n              result: _this4.props.walletContext\n            });\n            return;\n          }\n          break;\n      }\n      next(request, callback, chainId);\n    };\n  };\n  this.props = props;\n};\nvar exceptionProviderMiddleware = function exceptionProviderMiddleware(next) {\n  return function (request, callback, chainId) {\n    next(request, function (error, response) {\n      if (!error && response && response.error) {\n        if (typeof response.error === 'string') {\n          throw new Error(response.error);\n        } else {\n          throw new Error(response.error.message);\n        }\n      }\n      callback(error, response);\n    }, chainId);\n  };\n};\nvar loggingProviderMiddleware = function loggingProviderMiddleware(next) {\n  return function (request, callback, chainId) {\n    var chainIdLabel = chainId ? \" chainId:\".concat(chainId) : '';\n    logger.info(\"[provider request]\".concat(chainIdLabel, \" id:\").concat(request.id, \" method:\").concat(request.method, \" params:\"), request.params);\n    next(request, function (error, response) {\n      if (error) {\n        logger.warn(\"[provider response]\".concat(chainIdLabel, \" id:\").concat(request.id, \" method:\").concat(request.method, \" params:\"), request.params, \"error:\", error);\n      } else {\n        logger.info(\"[provider response]\".concat(chainIdLabel, \" id:\").concat(request.id, \" method:\").concat(request.method, \" params:\"), request.params, \"response:\", response);\n      }\n      callback(error, response);\n    }, chainId);\n  };\n};\nvar networkProviderMiddleware = function networkProviderMiddleware(getChainId) {\n  return function (next) {\n    return function (request, callback, chainId) {\n      var networkChainId = getChainId(request);\n      var id = request.id,\n        method = request.method;\n      switch (method) {\n        case 'net_version':\n          callback(undefined, {\n            jsonrpc: '2.0',\n            id: id,\n            result: \"\".concat(networkChainId)\n          });\n          return;\n        case 'eth_chainId':\n          callback(undefined, {\n            jsonrpc: '2.0',\n            id: id,\n            result: ethers.utils.hexlify(networkChainId)\n          });\n          return;\n      } // request is allowed. keep going..\n\n      next(request, callback, chainId);\n    };\n  };\n};\nvar SignerJsonRpcMethods = ['personal_sign', 'eth_sign', 'eth_signTypedData', 'eth_signTypedData_v4', 'eth_sendTransaction', 'eth_sendRawTransaction', 'sequence_getWalletContext', 'sequence_getWalletConfig', 'sequence_getWalletState', 'sequence_getNetworks', 'sequence_updateConfig', 'sequence_publishConfig', 'sequence_estimateGasLimits', 'sequence_gasRefundOptions', 'sequence_getNonce', 'sequence_relay', 'eth_decrypt', 'eth_getEncryptionPublicKey', 'wallet_addEthereumChain', 'wallet_switchEthereumChain', 'wallet_registerOnboarding', 'wallet_watchAsset', 'wallet_scanQRCode'];\nvar SigningProvider = function SigningProvider(provider) {\n  var _this5 = this;\n  _classCallCheck(this, SigningProvider);\n  this.provider = void 0;\n  this.sendAsyncMiddleware = function (next) {\n    return function (request, callback, chainId) {\n      // Forward signing requests to the signing provider\n      if (SignerJsonRpcMethods.includes(request.method)) {\n        _this5.provider.sendAsync(request, callback, chainId);\n        return;\n      } // Continue to next handler\n\n      next(request, callback, chainId);\n    };\n  };\n  this.provider = provider;\n};\nvar PublicProvider = /*#__PURE__*/function () {\n  function PublicProvider(rpcUrl) {\n    var _this6 = this;\n    _classCallCheck(this, PublicProvider);\n    this.privateJsonRpcMethods = ['net_version', 'eth_chainId', 'eth_accounts'].concat(SignerJsonRpcMethods);\n    this.provider = void 0;\n    this.rpcUrl = void 0;\n    this.sendAsyncMiddleware = function (next) {\n      return function (request, callback) {\n        // When provider is configured, send non-private methods to our local public provider\n        if (_this6.provider && !_this6.privateJsonRpcMethods.includes(request.method)) {\n          _this6.provider.send(request.method, request.params).then(function (r) {\n            callback(undefined, {\n              jsonrpc: '2.0',\n              id: request.id,\n              result: r\n            });\n          }).catch(function (e) {\n            return callback(e);\n          });\n          return;\n        } // Continue to next handler\n\n        logger.debug('[public-provider] sending request to signer window', request.method);\n        next(request, callback);\n      };\n    };\n    if (rpcUrl) {\n      this.setRpcUrl(rpcUrl);\n    }\n  }\n  _createClass(PublicProvider, [{\n    key: \"getRpcUrl\",\n    value: function getRpcUrl() {\n      return this.rpcUrl;\n    }\n  }, {\n    key: \"setRpcUrl\",\n    value: function setRpcUrl(rpcUrl) {\n      if (!rpcUrl || rpcUrl === '') {\n        this.rpcUrl = undefined;\n        this.provider = undefined;\n      } else {\n        this.rpcUrl = rpcUrl;\n        this.provider = new JsonRpcProvider(rpcUrl);\n      }\n    }\n  }]);\n  return PublicProvider;\n}();\nexport { AllowProvider, CachedProvider, ChainId, EagerProvider, JsonRpcExternalProvider, JsonRpcRouter, JsonRpcSender, JsonRpcVersion, PublicProvider, SigningProvider, allowProviderMiddleware, checkNetworkConfig, createJsonRpcMiddlewareStack, createNetworkConfig, ensureUniqueNetworks, ensureValidNetworks, exceptionProviderMiddleware, findNetworkConfig, getAuthNetwork, getChainId, isJsonRpcHandler, isJsonRpcProvider, isNetworkConfig, isValidNetworkConfig, loggingProviderMiddleware, mainnetNetworks, maybeChainId, networkProviderMiddleware, networks, networksIndex, sequenceContext, sortNetworks, testnetNetworks, updateNetworkConfig };","map":null,"metadata":{},"sourceType":"module"}