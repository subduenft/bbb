{"ast":null,"code":"\"use strict\";\n\nvar _possibleConstructorReturn = require(\"/Users/nicholasschepisi/Desktop/code/bbb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\nvar _getPrototypeOf = require(\"/Users/nicholasschepisi/Desktop/code/bbb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\nvar _inherits = require(\"/Users/nicholasschepisi/Desktop/code/bbb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\nvar _createClass = require(\"/Users/nicholasschepisi/Desktop/code/bbb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\nvar _classCallCheck = require(\"/Users/nicholasschepisi/Desktop/code/bbb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MerkleSumTree = exports.ProofStep = exports.Leaf = exports.Bucket = void 0;\nvar Base_1 = require(\"./Base\");\nvar Bucket = function Bucket(size, hashed) {\n  _classCallCheck(this, Bucket);\n  this.size = BigInt(size);\n  this.hashed = hashed;\n  // each node in the tree can have a parent, and a left or right sibling\n  this.parent = null;\n  this.left = null;\n  this.right = null;\n};\nexports.Bucket = Bucket;\nvar Leaf = /*#__PURE__*/function () {\n  function Leaf(hashFn, rng, data) {\n    _classCallCheck(this, Leaf);\n    this.hashFn = hashFn;\n    this.rng = rng.map(function (x) {\n      return BigInt(x);\n    });\n    this.data = data;\n  }\n  _createClass(Leaf, [{\n    key: \"getBucket\",\n    value: function getBucket() {\n      var hashed;\n      if (this.data) {\n        hashed = this.hashFn(this.data);\n      } else {\n        hashed = Buffer.alloc(32);\n      }\n      return new Bucket(BigInt(this.rng[1]) - BigInt(this.rng[0]), hashed);\n    }\n  }]);\n  return Leaf;\n}();\nexports.Leaf = Leaf;\nvar ProofStep = function ProofStep(bucket, right) {\n  _classCallCheck(this, ProofStep);\n  this.bucket = bucket;\n  this.right = right; // whether the bucket hash should be appeded on the right side in this step (default is left\n};\n\nexports.ProofStep = ProofStep;\nvar MerkleSumTree = /*#__PURE__*/function (_Base_1$Base) {\n  _inherits(MerkleSumTree, _Base_1$Base);\n  function MerkleSumTree(leaves, hashFn) {\n    var _this;\n    _classCallCheck(this, MerkleSumTree);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MerkleSumTree).call(this));\n    _this.leaves = leaves;\n    _this.hashFn = hashFn;\n    MerkleSumTree.checkConsecutive(leaves);\n    _this.buckets = [];\n    var _iterator = _createForOfIteratorHelper(leaves),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var l = _step.value;\n        _this.buckets.push(l.getBucket());\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n    var buckets = [];\n    var _iterator2 = _createForOfIteratorHelper(_this.buckets),\n      _step2;\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var bucket = _step2.value;\n        buckets.push(bucket);\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n    while (buckets.length !== 1) {\n      var newBuckets = [];\n      while (buckets.length) {\n        if (buckets.length >= 2) {\n          var b1 = buckets.shift();\n          var b2 = buckets.shift();\n          var size = b1.size + b2.size;\n          var hashed = _this.hashFn(Buffer.concat([_this.sizeToBuffer(b1.size), _this.bufferify(b1.hashed), _this.sizeToBuffer(b2.size), _this.bufferify(b2.hashed)]));\n          var b = new Bucket(size, hashed);\n          b2.parent = b;\n          b1.parent = b2.parent;\n          b1.right = b2;\n          b2.left = b1;\n          newBuckets.push(b);\n        } else {\n          newBuckets.push(buckets.shift());\n        }\n      }\n      buckets = newBuckets;\n    }\n    _this.root = buckets[0];\n    return _this;\n  }\n  _createClass(MerkleSumTree, [{\n    key: \"sizeToBuffer\",\n    value: function sizeToBuffer(size) {\n      var buf = Buffer.alloc(8);\n      var view = new DataView(buf.buffer);\n      view.setBigInt64(0, BigInt(size), false); // true when little endian\n      return buf;\n    }\n  }, {\n    key: \"getProof\",\n    // gets inclusion/exclusion proof of a bucket in the specified index\n    value: function getProof(index) {\n      var curr = this.buckets[Number(index)];\n      var proof = [];\n      while (curr && curr.parent) {\n        var right = !!curr.right;\n        var bucket = curr.right ? curr.right : curr.left;\n        curr = curr.parent;\n        proof.push(new ProofStep(bucket, right));\n      }\n      return proof;\n    }\n  }, {\n    key: \"sum\",\n    value: function sum(arr) {\n      var total = BigInt(0);\n      var _iterator3 = _createForOfIteratorHelper(arr),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var value = _step3.value;\n          total += BigInt(value);\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n      return total;\n    } // validates the suppplied proof for a specified leaf according to the root bucket\n  }, {\n    key: \"verifyProof\",\n    value: function verifyProof(root, leaf, proof) {\n      var rng = [this.sum(proof.filter(function (x) {\n        return !x.right;\n      }).map(function (x) {\n        return x.bucket.size;\n      })), BigInt(root.size) - this.sum(proof.filter(function (x) {\n        return x.right;\n      }).map(function (x) {\n        return x.bucket.size;\n      }))];\n      if (!(rng[0] === leaf.rng[0] && rng[1] === leaf.rng[1])) {\n        // supplied steps are not routing to the range specified\n        return false;\n      }\n      var curr = leaf.getBucket();\n      var hashed;\n      var _iterator4 = _createForOfIteratorHelper(proof),\n        _step4;\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var step = _step4.value;\n          if (step.right) {\n            hashed = this.hashFn(Buffer.concat([this.sizeToBuffer(curr.size), this.bufferify(curr.hashed), this.sizeToBuffer(step.bucket.size), this.bufferify(step.bucket.hashed)]));\n          } else {\n            hashed = this.hashFn(Buffer.concat([this.sizeToBuffer(step.bucket.size), this.bufferify(step.bucket.hashed), this.sizeToBuffer(curr.size), this.bufferify(curr.hashed)]));\n          }\n          curr = new Bucket(BigInt(curr.size) + BigInt(step.bucket.size), hashed);\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n      return curr.size === root.size && curr.hashed.toString('hex') === root.hashed.toString('hex');\n    }\n  }], [{\n    key: \"checkConsecutive\",\n    value: function checkConsecutive(leaves) {\n      var curr = BigInt(0);\n      var _iterator5 = _createForOfIteratorHelper(leaves),\n        _step5;\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var leaf = _step5.value;\n          if (leaf.rng[0] !== curr) {\n            throw new Error('leaf ranges are invalid');\n          }\n          curr = BigInt(leaf.rng[1]);\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n    }\n  }]);\n  return MerkleSumTree;\n}(Base_1.Base);\nexports.MerkleSumTree = MerkleSumTree;\nif (typeof window !== 'undefined') {\n  ;\n  window.MerkleSumTree = MerkleSumTree;\n}\nexports.default = MerkleSumTree;","map":null,"metadata":{},"sourceType":"script"}