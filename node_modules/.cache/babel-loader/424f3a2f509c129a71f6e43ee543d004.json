{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.logUtils = void 0;\nvar chalk_1 = require(\"chalk\");\nvar _ = require(\"lodash\");\nvar DEFAULT_TERMINAL_WIDTH = 80;\nvar TERMINAL_WIDTH = _.get(process, 'stdout.columns') || DEFAULT_TERMINAL_WIDTH;\nexports.logUtils = {\n  log: function log() {\n    var _console;\n    (_console = console).log.apply(_console, arguments); // tslint:disable-line:no-console\n  },\n  header: function header(text) {\n    var padStr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '=';\n    var padLength = TERMINAL_WIDTH - text.length;\n    var padLengthEnd = (padLength + 1) / 2;\n    var leftPadded = text.padStart(TERMINAL_WIDTH - padLengthEnd, padStr);\n    var padded = leftPadded.padEnd(TERMINAL_WIDTH, padStr);\n    console.log(padded); // tslint:disable-line:no-console\n  },\n  warn: function warn() {\n    var _console2;\n    (_console2 = console).warn.apply(_console2, arguments); // tslint:disable-line:no-console\n  },\n  table: function table(columnarData) {\n    var formattedColumnarData = _.mapValues(columnarData, function (columnOrColumns, _rowName) {\n      return _.isNumber(columnOrColumns) ? columnOrColumns.toLocaleString() : columnOrColumns;\n    });\n    console.table(formattedColumnarData); // tslint:disable-line:no-console\n  },\n  logWithTime: function logWithTime(arg) {\n    exports.logUtils.log(\"[\".concat(chalk_1.default.gray(new Date().toLocaleTimeString()), \"] \").concat(arg));\n  }\n};","map":null,"metadata":{},"sourceType":"script"}