{"ast":null,"code":"\"use strict\";\n\n/* Sourced from 0x.js */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.utils = void 0;\nvar utils_1 = require(\"@0x/utils\");\nvar BN = require(\"bn.js\");\nvar ethABI = require(\"ethereumjs-abi\");\nvar ethUtil = require(\"ethereumjs-util\");\nvar _ = require(\"lodash\");\nvar types_1 = require(\"../types\");\nexports.utils = {\n  /**\n   * Converts BigNumber instance to BN\n   * The only reason we convert to BN is to remain compatible with `ethABI. soliditySHA3` that\n   * expects values of Solidity type `uint` to be passed as type `BN`.\n   * We do not use BN anywhere else in the codebase.\n   */\n  bigNumberToBN: function bigNumberToBN(value) {\n    return new BN(value.toString(), 10);\n  },\n  consoleLog: function consoleLog(message) {\n    // tslint:disable-next-line: no-console\n    console.log(message);\n  },\n  isParityNode: function isParityNode(nodeVersion) {\n    return _.includes(nodeVersion, 'Parity');\n  },\n  isTestRpc: function isTestRpc(nodeVersion) {\n    return _.includes(nodeVersion, 'TestRPC');\n  },\n  spawnSwitchErr: function spawnSwitchErr(name, value) {\n    return new Error(\"Unexpected switch value: \".concat(value, \" encountered for \").concat(name));\n  },\n  getAssetHashHex: function getAssetHashHex(assetHash, schema) {\n    var concat = schema + ':' + assetHash;\n    var hashBuf = ethABI.soliditySHA3(['string'], [concat]);\n    return ethUtil.bufferToHex(hashBuf);\n  },\n  getOrderHashHex: function getOrderHashHex(order) {\n    var orderParts = [{\n      value: order.exchange,\n      type: types_1.SolidityTypes.Address\n    }, {\n      value: order.maker,\n      type: types_1.SolidityTypes.Address\n    }, {\n      value: order.taker,\n      type: types_1.SolidityTypes.Address\n    }, {\n      value: exports.utils.bigNumberToBN(order.makerRelayerFee),\n      type: types_1.SolidityTypes.Uint256\n    }, {\n      value: exports.utils.bigNumberToBN(order.takerRelayerFee),\n      type: types_1.SolidityTypes.Uint256\n    }, {\n      value: exports.utils.bigNumberToBN(order.makerProtocolFee),\n      type: types_1.SolidityTypes.Uint256\n    }, {\n      value: exports.utils.bigNumberToBN(order.takerProtocolFee),\n      type: types_1.SolidityTypes.Uint256\n    }, {\n      value: order.feeRecipient,\n      type: types_1.SolidityTypes.Address\n    }, {\n      value: order.feeMethod,\n      type: types_1.SolidityTypes.Uint8\n    }, {\n      value: order.side,\n      type: types_1.SolidityTypes.Uint8\n    }, {\n      value: order.saleKind,\n      type: types_1.SolidityTypes.Uint8\n    }, {\n      value: order.target,\n      type: types_1.SolidityTypes.Address\n    }, {\n      value: order.howToCall,\n      type: types_1.SolidityTypes.Uint8\n    }, {\n      value: Buffer.from(order.calldata.slice(2), 'hex'),\n      type: types_1.SolidityTypes.Bytes\n    }, {\n      value: Buffer.from(order.replacementPattern.slice(2), 'hex'),\n      type: types_1.SolidityTypes.Bytes\n    }, {\n      value: order.staticTarget,\n      type: types_1.SolidityTypes.Address\n    }, {\n      value: Buffer.from(order.staticExtradata.slice(2), 'hex'),\n      type: types_1.SolidityTypes.Bytes\n    }, {\n      value: order.paymentToken,\n      type: types_1.SolidityTypes.Address\n    }, {\n      value: exports.utils.bigNumberToBN(order.basePrice),\n      type: types_1.SolidityTypes.Uint256\n    }, {\n      value: exports.utils.bigNumberToBN(order.extra),\n      type: types_1.SolidityTypes.Uint256\n    }, {\n      value: exports.utils.bigNumberToBN(order.listingTime),\n      type: types_1.SolidityTypes.Uint256\n    }, {\n      value: exports.utils.bigNumberToBN(order.expirationTime),\n      type: types_1.SolidityTypes.Uint256\n    }, {\n      value: exports.utils.bigNumberToBN(order.salt),\n      type: types_1.SolidityTypes.Uint256\n    }];\n    var types = _.map(orderParts, function (o) {\n      return o.type;\n    });\n    var values = _.map(orderParts, function (o) {\n      return o.value;\n    });\n    var hash = ethABI.soliditySHA3(types, values);\n    return ethUtil.bufferToHex(hash);\n  },\n  getCurrentUnixTimestampSec: function getCurrentUnixTimestampSec() {\n    return new utils_1.BigNumber(Date.now() / 1000).integerValue();\n  },\n  getCurrentUnixTimestampMs: function getCurrentUnixTimestampMs() {\n    return new utils_1.BigNumber(Date.now());\n  }\n};","map":null,"metadata":{},"sourceType":"script"}