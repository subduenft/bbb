{"ast":null,"code":"'use strict';\n\nvar hasPropertyDescriptors = require('has-property-descriptors');\nvar GetIntrinsic = require('get-intrinsic');\nvar $defineProperty = hasPropertyDescriptors() && GetIntrinsic('%Object.defineProperty%', true);\nvar hasArrayLengthDefineBug = hasPropertyDescriptors.hasArrayLengthDefineBug();\n\n// eslint-disable-next-line global-require\nvar isArray = hasArrayLengthDefineBug && require('../helpers/IsArray');\nvar callBound = require('call-bind/callBound');\nvar $isEnumerable = callBound('Object.prototype.propertyIsEnumerable');\n\n// eslint-disable-next-line max-params\nmodule.exports = function DefineOwnProperty(IsDataDescriptor, SameValue, FromPropertyDescriptor, O, P, desc) {\n  if (!$defineProperty) {\n    if (!IsDataDescriptor(desc)) {\n      // ES3 does not support getters/setters\n      return false;\n    }\n    if (!desc['[[Configurable]]'] || !desc['[[Writable]]']) {\n      return false;\n    }\n\n    // fallback for ES3\n    if (P in O && $isEnumerable(O, P) !== !!desc['[[Enumerable]]']) {\n      // a non-enumerable existing property\n      return false;\n    }\n\n    // property does not exist at all, or exists but is enumerable\n    var V = desc['[[Value]]'];\n    // eslint-disable-next-line no-param-reassign\n    O[P] = V; // will use [[Define]]\n    return SameValue(O[P], V);\n  }\n  if (hasArrayLengthDefineBug && P === 'length' && '[[Value]]' in desc && isArray(O) && O.length !== desc['[[Value]]']) {\n    // eslint-disable-next-line no-param-reassign\n    O.length = desc['[[Value]]'];\n    return O.length === desc['[[Value]]'];\n  }\n  $defineProperty(O, P, FromPropertyDescriptor(desc));\n  return true;\n};","map":null,"metadata":{},"sourceType":"script"}