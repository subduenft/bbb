{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*\n\nThis is the core of the Ethereum Virtual Machine (EVM or just VM).\n\nNOTES:\n\nstack items are lazily duplicated.\nSo you must never directly change a buffer from the stack,\ninstead you should `copy` it first\n\nnot all stack items are 32 bytes, so if the operation relies on the stack\nitem length then you must use utils.pad(<item>, 32) first.\n*/\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\nvar txContext_1 = require(\"./evm/txContext\");\nvar message_1 = require(\"./evm/message\");\nvar evm_1 = require(\"./evm/evm\");\nvar Block = require('ethereumjs-block');\n/**\n * @ignore\n */\nfunction runCode(opts) {\n  if (!opts.block) {\n    opts.block = new Block();\n  }\n  // Backwards compatibility\n  if (!opts.txContext) {\n    opts.txContext = new txContext_1.default(opts.gasPrice || Buffer.alloc(0), opts.origin || opts.caller || ethereumjs_util_1.zeros(32));\n  }\n  if (!opts.message) {\n    opts.message = new message_1.default({\n      code: opts.code,\n      data: opts.data,\n      gasLimit: opts.gasLimit,\n      to: opts.address || ethereumjs_util_1.zeros(32),\n      caller: opts.caller,\n      value: opts.value,\n      depth: opts.depth || 0,\n      selfdestruct: opts.selfdestruct || {},\n      isStatic: opts.isStatic || false\n    });\n  }\n  var evm = opts.evm;\n  if (!evm) {\n    evm = new evm_1.default(this, opts.txContext, opts.block);\n  }\n  return evm.runInterpreter(opts.message, {\n    pc: opts.pc\n  });\n}\nexports.default = runCode;","map":null,"metadata":{},"sourceType":"script"}