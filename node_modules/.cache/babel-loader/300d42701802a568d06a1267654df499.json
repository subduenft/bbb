{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function sent() {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar rlp = require(\"rlp\");\nvar cache_1 = require(\"./cache\");\nvar util_1 = require(\"./util\");\nvar BN = require(\"bn.js\");\nvar level = require('level-mem');\nvar Block = require('ethereumjs-block');\n/**\n * Abstraction over a DB to facilitate storing/fetching blockchain-related\n * data, such as blocks and headers, indices, and the head block.\n * @hidden\n */\nvar DBManager = /** @class */function () {\n  function DBManager(db, common) {\n    this._db = db;\n    this._common = common;\n    this._cache = {\n      td: new cache_1.default({\n        max: 1024\n      }),\n      header: new cache_1.default({\n        max: 512\n      }),\n      body: new cache_1.default({\n        max: 256\n      }),\n      numberToHash: new cache_1.default({\n        max: 2048\n      }),\n      hashToNumber: new cache_1.default({\n        max: 2048\n      })\n    };\n  }\n  /**\n   * Fetches iterator heads from the db.\n   */\n  DBManager.prototype.getHeads = function () {\n    return this.get(util_1.headsKey, {\n      valueEncoding: 'json'\n    });\n  };\n  /**\n   * Fetches header of the head block.\n   */\n  DBManager.prototype.getHeadHeader = function () {\n    return this.get(util_1.headHeaderKey);\n  };\n  /**\n   * Fetches head block.\n   */\n  DBManager.prototype.getHeadBlock = function () {\n    return this.get(util_1.headBlockKey);\n  };\n  /**\n   * Fetches a block (header and body), given a block tag\n   * which can be either its hash or its number.\n   */\n  DBManager.prototype.getBlock = function (blockTag) {\n    return __awaiter(this, void 0, void 0, function () {\n      var number, hash, header, body, e_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            // determine BlockTag type\n            if (typeof blockTag === 'number' && Number.isInteger(blockTag)) {\n              blockTag = new BN(blockTag);\n            }\n            if (!Buffer.isBuffer(blockTag)) return [3 /*break*/, 2];\n            hash = blockTag;\n            return [4 /*yield*/, this.hashToNumber(blockTag)];\n          case 1:\n            number = _a.sent();\n            return [3 /*break*/, 5];\n          case 2:\n            if (!BN.isBN(blockTag)) return [3 /*break*/, 4];\n            number = blockTag;\n            return [4 /*yield*/, this.numberToHash(blockTag)];\n          case 3:\n            hash = _a.sent();\n            return [3 /*break*/, 5];\n          case 4:\n            throw new Error('Unknown blockTag type');\n          case 5:\n            return [4 /*yield*/, this.getHeader(hash, number)];\n          case 6:\n            header = _a.sent().raw;\n            _a.label = 7;\n          case 7:\n            _a.trys.push([7, 9,, 10]);\n            return [4 /*yield*/, this.getBody(hash, number)];\n          case 8:\n            body = _a.sent();\n            return [3 /*break*/, 10];\n          case 9:\n            e_1 = _a.sent();\n            body = [[], []];\n            return [3 /*break*/, 10];\n          case 10:\n            return [2 /*return*/, new Block([header].concat(body), {\n              common: this._common\n            })];\n        }\n      });\n    });\n  };\n  /**\n   * Fetches body of a block given its hash and number.\n   */\n  DBManager.prototype.getBody = function (hash, number) {\n    return __awaiter(this, void 0, void 0, function () {\n      var key, _a, _b;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            key = util_1.bodyKey(number, hash);\n            _b = (_a = rlp).decode;\n            return [4 /*yield*/, this.get(key, {\n              cache: 'body'\n            })];\n          case 1:\n            return [2 /*return*/, _b.apply(_a, [_c.sent()])];\n        }\n      });\n    });\n  };\n  /**\n   * Fetches header of a block given its hash and number.\n   */\n  DBManager.prototype.getHeader = function (hash, number) {\n    return __awaiter(this, void 0, void 0, function () {\n      var key, encodedHeader;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            key = util_1.headerKey(number, hash);\n            return [4 /*yield*/, this.get(key, {\n              cache: 'header'\n            })];\n          case 1:\n            encodedHeader = _a.sent();\n            return [2 /*return*/, new Block.Header(rlp.decode(encodedHeader), {\n              common: this._common\n            })];\n        }\n      });\n    });\n  };\n  /**\n   * Fetches total difficulty for a block given its hash and number.\n   */\n  DBManager.prototype.getTd = function (hash, number) {\n    return __awaiter(this, void 0, void 0, function () {\n      var key, td;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            key = util_1.tdKey(number, hash);\n            return [4 /*yield*/, this.get(key, {\n              cache: 'td'\n            })];\n          case 1:\n            td = _a.sent();\n            return [2 /*return*/, new BN(rlp.decode(td))];\n        }\n      });\n    });\n  };\n  /**\n   * Performs a block hash to block number lookup.\n   */\n  DBManager.prototype.hashToNumber = function (hash) {\n    return __awaiter(this, void 0, void 0, function () {\n      var key, _a;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            key = util_1.hashToNumberKey(hash);\n            _a = BN.bind;\n            return [4 /*yield*/, this.get(key, {\n              cache: 'hashToNumber'\n            })];\n          case 1:\n            return [2 /*return*/, new (_a.apply(BN, [void 0, _b.sent()]))()];\n        }\n      });\n    });\n  };\n  /**\n   * Performs a block number to block hash lookup.\n   */\n  DBManager.prototype.numberToHash = function (number) {\n    return __awaiter(this, void 0, void 0, function () {\n      var key;\n      return __generator(this, function (_a) {\n        if (number.ltn(0)) {\n          throw new level.errors.NotFoundError();\n        }\n        key = util_1.numberToHashKey(number);\n        return [2 /*return*/, this.get(key, {\n          cache: 'numberToHash'\n        })];\n      });\n    });\n  };\n  /**\n   * Fetches a key from the db. If `opts.cache` is specified\n   * it first tries to load from cache, and on cache miss will\n   * try to put the fetched item on cache afterwards.\n   */\n  DBManager.prototype.get = function (key, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    return __awaiter(this, void 0, void 0, function () {\n      var dbOpts, value;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            dbOpts = {\n              keyEncoding: opts.keyEncoding || 'binary',\n              valueEncoding: opts.valueEncoding || 'binary'\n            };\n            if (!opts.cache) return [3 /*break*/, 3];\n            if (!this._cache[opts.cache]) {\n              throw new Error(\"Invalid cache: \" + opts.cache);\n            }\n            value = this._cache[opts.cache].get(key);\n            if (!!value) return [3 /*break*/, 2];\n            return [4 /*yield*/, this._db.get(key, dbOpts)];\n          case 1:\n            value = _a.sent();\n            this._cache[opts.cache].set(key, value);\n            _a.label = 2;\n          case 2:\n            return [2 /*return*/, value];\n          case 3:\n            return [2 /*return*/, this._db.get(key, dbOpts)];\n        }\n      });\n    });\n  };\n  /**\n   * Performs a batch operation on db.\n   */\n  DBManager.prototype.batch = function (ops) {\n    return this._db.batch(ops);\n  };\n  return DBManager;\n}();\nexports.default = DBManager;","map":null,"metadata":{},"sourceType":"script"}