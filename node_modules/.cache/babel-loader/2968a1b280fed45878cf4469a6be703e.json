{"ast":null,"code":"\"use strict\";\n\n/* Sourced from 0x.js */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.signatureUtils = void 0;\nvar ethUtil = require(\"ethereumjs-util\");\nexports.signatureUtils = {\n  isValidSignature: function isValidSignature(data, signature, signerAddress) {\n    var dataBuff = ethUtil.toBuffer(data);\n    // const msgHashBuff = ethUtil.hashPersonalMessage(dataBuff);\n    var msgHashBuff = dataBuff;\n    try {\n      var pubKey = ethUtil.ecrecover(msgHashBuff, signature.v, ethUtil.toBuffer(signature.r), ethUtil.toBuffer(signature.s));\n      var retrievedAddress = ethUtil.bufferToHex(ethUtil.pubToAddress(pubKey));\n      return retrievedAddress === signerAddress;\n    } catch (err) {\n      return false;\n    }\n  },\n  parseSignatureHexAsVRS: function parseSignatureHexAsVRS(signatureHex) {\n    var signatureBuffer = ethUtil.toBuffer(signatureHex);\n    var v = signatureBuffer[0];\n    if (v < 27) {\n      v += 27;\n    }\n    var r = signatureBuffer.slice(1, 33);\n    var s = signatureBuffer.slice(33, 65);\n    var ecSignature = {\n      v: v,\n      r: ethUtil.bufferToHex(r),\n      s: ethUtil.bufferToHex(s)\n    };\n    return ecSignature;\n  },\n  parseSignatureHexAsRSV: function parseSignatureHexAsRSV(signatureHex) {\n    var _ethUtil$fromRpcSig = ethUtil.fromRpcSig(signatureHex),\n      v = _ethUtil$fromRpcSig.v,\n      r = _ethUtil$fromRpcSig.r,\n      s = _ethUtil$fromRpcSig.s;\n    var ecSignature = {\n      v: v,\n      r: ethUtil.bufferToHex(r),\n      s: ethUtil.bufferToHex(s)\n    };\n    return ecSignature;\n  }\n};","map":null,"metadata":{},"sourceType":"script"}