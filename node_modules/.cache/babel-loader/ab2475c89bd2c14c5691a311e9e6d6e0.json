{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/nicholasschepisi/Desktop/code/bbb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"/Users/nicholasschepisi/Desktop/code/bbb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SchemaValidator = void 0;\nvar AJV = require(\"ajv\"); // namespace and constructor\nvar values = require(\"lodash.values\");\nvar schemas_1 = require(\"./schemas\");\n/**\n * A validator wrapping (AJV) [https://github.com/ajv-validator/ajv]\n */\nvar SchemaValidator = /*#__PURE__*/function () {\n  /**\n   * Instantiates a SchemaValidator instance\n   */\n  function SchemaValidator() {\n    var newSchemas = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    _classCallCheck(this, SchemaValidator);\n    this._validator = new AJV({\n      schemaId: 'auto',\n      allErrors: true\n    });\n    this._validator.addSchema(values(schemas_1.schemas).filter(function (s) {\n      return s !== undefined && s.id !== undefined;\n    }));\n    this._validator.addSchema(newSchemas.filter(function (s) {\n      return s !== undefined;\n    }));\n  }\n  /**\n   * Add a schema to the validator. All schemas and sub-schemas must be added to\n   * the validator before the `validate` and `isValid` methods can be called with\n   * instances of that schema.\n   * @param schema The schema to add\n   */\n  _createClass(SchemaValidator, [{\n    key: \"addSchema\",\n    value: function addSchema(schemaObjectOrArray) {\n      var _schemas = Array.isArray(schemaObjectOrArray) ? schemaObjectOrArray : [schemaObjectOrArray];\n      var _iterator = _createForOfIteratorHelper(_schemas),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var s = _step.value;\n          try {\n            this._validator.addSchema(s); // AJV validates upon adding\n          } catch (err) {\n            // Ignore duplicate errors.\n            if (!err.message.endsWith('already exists')) {\n              throw err;\n            }\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    } // In order to validate a complex JS object using jsonschema, we must replace any complex\n    // sub-types (e.g BigNumber) with a simpler string representation. Since BigNumber and other\n    // complex types implement the `toString` method, we can stringify the object and\n    // then parse it. The resultant object can then be checked using jsonschema.\n    /**\n     * Validate the JS object conforms to a specific JSON schema\n     * @param instance JS object in question\n     * @param schema Schema to check against\n     * @returns The results of the validation\n     */\n  }, {\n    key: \"validate\",\n    value: function validate(instance, schema) {\n      this.isValid(instance, schema);\n      return this._validator; // errors field is returned here. Will be overwritten on the next validation.\n    }\n    /**\n     * Check whether an instance properly adheres to a JSON schema\n     * @param instance JS object in question\n     * @param schema Schema to check against\n     * @returns Whether or not the instance adheres to the schema\n     */\n  }, {\n    key: \"isValid\",\n    value: function isValid(instance, schema) {\n      return this._validator.validate(schema, JSON.parse(JSON.stringify(instance)));\n    }\n  }]);\n  return SchemaValidator;\n}();\nexports.SchemaValidator = SchemaValidator;","map":null,"metadata":{},"sourceType":"script"}