{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/nicholasschepisi/Desktop/code/bbb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.linkLibrariesInBytecode = exports.methodAbiToFunctionSignature = exports.formatABIDataItem = void 0;\nvar utils_1 = require(\"@0x/utils\");\n// tslint:disable-next-line:completed-docs\nfunction formatABIDataItem(abi, value, formatter) {\n  var trailingArrayRegex = /\\[\\d*\\]$/;\n  if (abi.type.match(trailingArrayRegex)) {\n    var arrayItemType = abi.type.replace(trailingArrayRegex, '');\n    return value.map(function (val) {\n      var arrayItemAbi = Object.assign(Object.assign({}, abi), {\n        type: arrayItemType\n      });\n      return formatABIDataItem(arrayItemAbi, val, formatter);\n    });\n  } else if (abi.type === 'tuple') {\n    var formattedTuple = {};\n    if (abi.components) {\n      abi.components.forEach(function (componentABI) {\n        formattedTuple[componentABI.name] = formatABIDataItem(componentABI, value[componentABI.name], formatter);\n      });\n    }\n    return formattedTuple;\n  } else {\n    return formatter(abi.type, value);\n  }\n}\nexports.formatABIDataItem = formatABIDataItem;\n/**\n * Takes a MethodAbi and returns a function signature for ABI encoding/decoding\n * @return a function signature as a string, e.g. 'functionName(uint256, bytes[])'\n */\nfunction methodAbiToFunctionSignature(methodAbi) {\n  var method = utils_1.AbiEncoder.createMethod(methodAbi.name, methodAbi.inputs);\n  return method.getSignature();\n}\nexports.methodAbiToFunctionSignature = methodAbiToFunctionSignature;\n/**\n * Replaces unliked library references in the bytecode of a contract artifact\n * with real addresses and returns the bytecode.\n */\nfunction linkLibrariesInBytecode(artifact, libraryAddresses) {\n  var bytecodeArtifact = artifact.compilerOutput.evm.bytecode;\n  var bytecode = bytecodeArtifact.object.substr(2);\n  for (var _i = 0, _Object$values = Object.values(bytecodeArtifact.linkReferences); _i < _Object$values.length; _i++) {\n    var link = _Object$values[_i];\n    for (var _i2 = 0, _Object$entries = Object.entries(link); _i2 < _Object$entries.length; _i2++) {\n      var _Object$entries$_i = _slicedToArray(_Object$entries[_i2], 2),\n        libraryName = _Object$entries$_i[0],\n        libraryRefs = _Object$entries$_i[1];\n      var libraryAddress = libraryAddresses[libraryName];\n      if (!libraryAddress) {\n        throw new Error(\"\".concat(artifact.contractName, \" has an unlinked reference library \").concat(libraryName, \" but no addresses was provided'.\"));\n      }\n      var _iterator = _createForOfIteratorHelper(libraryRefs),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var ref = _step.value;\n          bytecode = [bytecode.substring(0, ref.start * 2), libraryAddress.toLowerCase().substr(2), bytecode.substring((ref.start + ref.length) * 2)].join('');\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }\n  return \"0x\".concat(bytecode);\n}\nexports.linkLibrariesInBytecode = linkLibrariesInBytecode;","map":null,"metadata":{},"sourceType":"script"}