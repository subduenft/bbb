{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\nvar $TypeError = GetIntrinsic('%TypeError%');\nvar DefineOwnProperty = require('../helpers/DefineOwnProperty');\nvar isFullyPopulatedPropertyDescriptor = require('../helpers/isFullyPopulatedPropertyDescriptor');\nvar isPropertyDescriptor = require('../helpers/isPropertyDescriptor');\nvar FromPropertyDescriptor = require('./FromPropertyDescriptor');\nvar IsAccessorDescriptor = require('./IsAccessorDescriptor');\nvar IsDataDescriptor = require('./IsDataDescriptor');\nvar IsGenericDescriptor = require('./IsGenericDescriptor');\nvar IsPropertyKey = require('./IsPropertyKey');\nvar SameValue = require('./SameValue');\nvar Type = require('./Type');\n\n// https://262.ecma-international.org/13.0/#sec-validateandapplypropertydescriptor\n\n// see https://github.com/tc39/ecma262/pull/2468 for ES2022 changes\n\n// eslint-disable-next-line max-lines-per-function, max-statements, max-params\nmodule.exports = function ValidateAndApplyPropertyDescriptor(O, P, extensible, Desc, current) {\n  var oType = Type(O);\n  if (oType !== 'Undefined' && oType !== 'Object') {\n    throw new $TypeError('Assertion failed: O must be undefined or an Object');\n  }\n  if (!IsPropertyKey(P)) {\n    throw new $TypeError('Assertion failed: P must be a Property Key');\n  }\n  if (Type(extensible) !== 'Boolean') {\n    throw new $TypeError('Assertion failed: extensible must be a Boolean');\n  }\n  if (!isPropertyDescriptor({\n    Type: Type,\n    IsDataDescriptor: IsDataDescriptor,\n    IsAccessorDescriptor: IsAccessorDescriptor\n  }, Desc)) {\n    throw new $TypeError('Assertion failed: Desc must be a Property Descriptor');\n  }\n  if (Type(current) !== 'Undefined' && !isPropertyDescriptor({\n    Type: Type,\n    IsDataDescriptor: IsDataDescriptor,\n    IsAccessorDescriptor: IsAccessorDescriptor\n  }, current)) {\n    throw new $TypeError('Assertion failed: current must be a Property Descriptor, or undefined');\n  }\n  if (Type(current) === 'Undefined') {\n    // step 2\n    if (!extensible) {\n      return false; // step 2.a\n    }\n\n    if (oType === 'Undefined') {\n      return true; // step 2.b\n    }\n\n    if (IsAccessorDescriptor(Desc)) {\n      // step 2.c\n      return DefineOwnProperty(IsDataDescriptor, SameValue, FromPropertyDescriptor, O, P, Desc);\n    }\n    // step 2.d\n    return DefineOwnProperty(IsDataDescriptor, SameValue, FromPropertyDescriptor, O, P, {\n      '[[Configurable]]': !!Desc['[[Configurable]]'],\n      '[[Enumerable]]': !!Desc['[[Enumerable]]'],\n      '[[Value]]': Desc['[[Value]]'],\n      '[[Writable]]': !!Desc['[[Writable]]']\n    });\n  }\n\n  // 3. Assert: current is a fully populated Property Descriptor.\n  if (!isFullyPopulatedPropertyDescriptor({\n    IsAccessorDescriptor: IsAccessorDescriptor,\n    IsDataDescriptor: IsDataDescriptor\n  }, current)) {\n    throw new $TypeError('`current`, when present, must be a fully populated and valid Property Descriptor');\n  }\n\n  // 4. If every field in Desc is absent, return true.\n  // this can't really match the assertion that it's a Property Descriptor in our JS implementation\n\n  // 5. If current.[[Configurable]] is false, then\n  if (!current['[[Configurable]]']) {\n    if ('[[Configurable]]' in Desc && Desc['[[Configurable]]']) {\n      // step 5.a\n      return false;\n    }\n    if ('[[Enumerable]]' in Desc && !SameValue(Desc['[[Enumerable]]'], current['[[Enumerable]]'])) {\n      // step 5.b\n      return false;\n    }\n    if (!IsGenericDescriptor(Desc) && !SameValue(IsAccessorDescriptor(Desc), IsAccessorDescriptor(current))) {\n      // step 5.c\n      return false;\n    }\n    if (IsAccessorDescriptor(current)) {\n      // step 5.d\n      if ('[[Get]]' in Desc && !SameValue(Desc['[[Get]]'], current['[[Get]]'])) {\n        return false;\n      }\n      if ('[[Set]]' in Desc && !SameValue(Desc['[[Set]]'], current['[[Set]]'])) {\n        return false;\n      }\n    } else if (!current['[[Writable]]']) {\n      // step 5.e\n      if ('[[Writable]]' in Desc && Desc['[[Writable]]']) {\n        return false;\n      }\n      if ('[[Value]]' in Desc && !SameValue(Desc['[[Value]]'], current['[[Value]]'])) {\n        return false;\n      }\n    }\n  }\n\n  // 6. If O is not undefined, then\n  if (oType !== 'Undefined') {\n    var configurable;\n    var enumerable;\n    if (IsDataDescriptor(current) && IsAccessorDescriptor(Desc)) {\n      // step 6.a\n      configurable = ('[[Configurable]]' in Desc ? Desc : current)['[[Configurable]]'];\n      enumerable = ('[[Enumerable]]' in Desc ? Desc : current)['[[Enumerable]]'];\n      // Replace the property named P of object O with an accessor property having [[Configurable]] and [[Enumerable]] attributes as described by current and each other attribute set to its default value.\n      return DefineOwnProperty(IsDataDescriptor, SameValue, FromPropertyDescriptor, O, P, {\n        '[[Configurable]]': !!configurable,\n        '[[Enumerable]]': !!enumerable,\n        '[[Get]]': ('[[Get]]' in Desc ? Desc : current)['[[Get]]'],\n        '[[Set]]': ('[[Set]]' in Desc ? Desc : current)['[[Set]]']\n      });\n    } else if (IsAccessorDescriptor(current) && IsDataDescriptor(Desc)) {\n      configurable = ('[[Configurable]]' in Desc ? Desc : current)['[[Configurable]]'];\n      enumerable = ('[[Enumerable]]' in Desc ? Desc : current)['[[Enumerable]]'];\n      // i. Replace the property named P of object O with a data property having [[Configurable]] and [[Enumerable]] attributes as described by current and each other attribute set to its default value.\n      return DefineOwnProperty(IsDataDescriptor, SameValue, FromPropertyDescriptor, O, P, {\n        '[[Configurable]]': !!configurable,\n        '[[Enumerable]]': !!enumerable,\n        '[[Value]]': ('[[Value]]' in Desc ? Desc : current)['[[Value]]'],\n        '[[Writable]]': !!('[[Writable]]' in Desc ? Desc : current)['[[Writable]]']\n      });\n    }\n\n    // For each field of Desc that is present, set the corresponding attribute of the property named P of object O to the value of the field.\n    return DefineOwnProperty(IsDataDescriptor, SameValue, FromPropertyDescriptor, O, P, Desc);\n  }\n  return true; // step 7\n};","map":null,"metadata":{},"sourceType":"script"}