{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getMaximumSizeForOrder = exports.getSummedTokenAndIdentifierAmounts = exports.getPresentItemAmount = exports.isCriteriaItem = exports.isErc1155Item = exports.isErc721Item = exports.isErc20Item = exports.isNativeCurrencyItem = exports.isCurrencyItem = void 0;\nvar ethers_1 = require(\"ethers\");\nvar constants_1 = require(\"../constants\");\nvar criteria_1 = require(\"./criteria\");\nvar gcd_1 = require(\"./gcd\");\nvar isCurrencyItem = function isCurrencyItem(_a) {\n  var itemType = _a.itemType;\n  return [constants_1.ItemType.NATIVE, constants_1.ItemType.ERC20].includes(itemType);\n};\nexports.isCurrencyItem = isCurrencyItem;\nvar isNativeCurrencyItem = function isNativeCurrencyItem(_a) {\n  var itemType = _a.itemType;\n  return itemType === constants_1.ItemType.NATIVE;\n};\nexports.isNativeCurrencyItem = isNativeCurrencyItem;\nvar isErc20Item = function isErc20Item(itemType) {\n  return itemType === constants_1.ItemType.ERC20;\n};\nexports.isErc20Item = isErc20Item;\nvar isErc721Item = function isErc721Item(itemType) {\n  return [constants_1.ItemType.ERC721, constants_1.ItemType.ERC721_WITH_CRITERIA].includes(itemType);\n};\nexports.isErc721Item = isErc721Item;\nvar isErc1155Item = function isErc1155Item(itemType) {\n  return [constants_1.ItemType.ERC1155, constants_1.ItemType.ERC1155_WITH_CRITERIA].includes(itemType);\n};\nexports.isErc1155Item = isErc1155Item;\nvar isCriteriaItem = function isCriteriaItem(itemType) {\n  return [constants_1.ItemType.ERC721_WITH_CRITERIA, constants_1.ItemType.ERC1155_WITH_CRITERIA].includes(itemType);\n};\nexports.isCriteriaItem = isCriteriaItem;\nvar getPresentItemAmount = function getPresentItemAmount(_a) {\n  var startAmount = _a.startAmount,\n    endAmount = _a.endAmount,\n    timeBasedItemParams = _a.timeBasedItemParams;\n  var startAmountBn = ethers_1.BigNumber.from(startAmount);\n  var endAmountBn = ethers_1.BigNumber.from(endAmount);\n  if (!timeBasedItemParams) {\n    return startAmountBn.gt(endAmountBn) ? startAmountBn : endAmountBn;\n  }\n  var isConsiderationItem = timeBasedItemParams.isConsiderationItem,\n    currentBlockTimestamp = timeBasedItemParams.currentBlockTimestamp,\n    ascendingAmountTimestampBuffer = timeBasedItemParams.ascendingAmountTimestampBuffer,\n    startTime = timeBasedItemParams.startTime,\n    endTime = timeBasedItemParams.endTime;\n  var duration = ethers_1.BigNumber.from(endTime).sub(startTime);\n  var isAscending = endAmountBn.gt(startAmount);\n  var adjustedBlockTimestamp = ethers_1.BigNumber.from(isAscending ? currentBlockTimestamp + ascendingAmountTimestampBuffer : currentBlockTimestamp);\n  if (adjustedBlockTimestamp.lt(startTime)) {\n    return startAmountBn;\n  }\n  var elapsed = (adjustedBlockTimestamp.gt(endTime) ? ethers_1.BigNumber.from(endTime) : adjustedBlockTimestamp).sub(startTime);\n  var remaining = duration.sub(elapsed);\n  // Adjust amounts based on current time\n  // For offer items, we round down\n  // For consideration items, we round up\n  return startAmountBn.mul(remaining).add(endAmountBn.mul(elapsed)).add(isConsiderationItem ? duration.sub(1) : 0).div(duration);\n};\nexports.getPresentItemAmount = getPresentItemAmount;\nvar getSummedTokenAndIdentifierAmounts = function getSummedTokenAndIdentifierAmounts(_a) {\n  var items = _a.items,\n    criterias = _a.criterias,\n    timeBasedItemParams = _a.timeBasedItemParams;\n  var itemToCriteria = (0, criteria_1.getItemToCriteriaMap)(items, criterias);\n  var tokenAndIdentifierToSummedAmount = items.reduce(function (map, item) {\n    var _a, _b;\n    var _c, _d, _e, _f;\n    var identifierOrCriteria = (_d = (_c = itemToCriteria.get(item)) === null || _c === void 0 ? void 0 : _c.identifier) !== null && _d !== void 0 ? _d : item.identifierOrCriteria;\n    return __assign(__assign({}, map), (_a = {}, _a[item.token] = __assign(__assign({}, map[item.token]), (_b = {}, _b[identifierOrCriteria] = ((_f = (_e = map[item.token]) === null || _e === void 0 ? void 0 : _e[identifierOrCriteria]) !== null && _f !== void 0 ? _f : ethers_1.BigNumber.from(0)).add((0, exports.getPresentItemAmount)({\n      startAmount: item.startAmount,\n      endAmount: item.endAmount,\n      timeBasedItemParams: timeBasedItemParams\n    })), _b)), _a));\n  }, {});\n  return tokenAndIdentifierToSummedAmount;\n};\nexports.getSummedTokenAndIdentifierAmounts = getSummedTokenAndIdentifierAmounts;\n/**\n * Returns the maximum size of units possible for the order\n * If any of the items on a partially fillable order specify a different \"startAmount\" and \"endAmount\n * (e.g. they are ascending-amount or descending-amount items), the fraction will be applied to both amounts\n * prior to determining the current price. This ensures that cleanly divisible amounts can be chosen when\n * constructing the order without a dependency on the time when the order is ultimately fulfilled.\n */\nvar getMaximumSizeForOrder = function getMaximumSizeForOrder(_a) {\n  var _b = _a.parameters,\n    offer = _b.offer,\n    consideration = _b.consideration;\n  var allItems = __spreadArray(__spreadArray([], __read(offer), false), __read(consideration), false);\n  var amounts = allItems.flatMap(function (_a) {\n    var startAmount = _a.startAmount,\n      endAmount = _a.endAmount;\n    return [startAmount, endAmount];\n  });\n  return (0, gcd_1.findGcd)(amounts);\n};\nexports.getMaximumSizeForOrder = getMaximumSizeForOrder;","map":null,"metadata":{},"sourceType":"script"}