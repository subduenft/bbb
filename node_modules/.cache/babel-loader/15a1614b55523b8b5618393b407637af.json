{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/nicholasschepisi/Desktop/code/bbb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\nvar _classCallCheck = require(\"/Users/nicholasschepisi/Desktop/code/bbb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"/Users/nicholasschepisi/Desktop/code/bbb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\nvar _possibleConstructorReturn = require(\"/Users/nicholasschepisi/Desktop/code/bbb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\nvar _getPrototypeOf = require(\"/Users/nicholasschepisi/Desktop/code/bbb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\nvar _inherits = require(\"/Users/nicholasschepisi/Desktop/code/bbb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AbstractSetDataType = void 0;\nvar ethUtil = require(\"ethereumjs-util\");\nvar _ = require(\"lodash\");\nvar configured_bignumber_1 = require(\"../../../configured_bignumber\");\nvar set_1 = require(\"../../calldata/blocks/set\");\nvar constants_1 = require(\"../../utils/constants\");\nvar data_type_1 = require(\"../data_type\");\nvar pointer_1 = require(\"./pointer\");\nvar AbstractSetDataType = /*#__PURE__*/function (_data_type_1$DataType) {\n  _inherits(AbstractSetDataType, _data_type_1$DataType);\n  function AbstractSetDataType(dataItem, factory) {\n    var _this;\n    var isArray = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    var arrayLength = arguments.length > 3 ? arguments[3] : undefined;\n    var arrayElementType = arguments.length > 4 ? arguments[4] : undefined;\n    _classCallCheck(this, AbstractSetDataType);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AbstractSetDataType).call(this, dataItem, factory));\n    _this._memberIndexByName = {};\n    _this._members = [];\n    _this._isArray = isArray;\n    _this._arrayLength = arrayLength;\n    _this._arrayElementType = arrayElementType;\n    if (isArray && arrayLength !== undefined) {\n      var _this$_createMembersW = _this._createMembersWithLength(dataItem, arrayLength);\n      var _this$_createMembersW2 = _slicedToArray(_this$_createMembersW, 2);\n      _this._members = _this$_createMembersW2[0];\n      _this._memberIndexByName = _this$_createMembersW2[1];\n    } else if (!isArray) {\n      var _this$_createMembersW3 = _this._createMembersWithKeys(dataItem);\n      var _this$_createMembersW4 = _slicedToArray(_this$_createMembersW3, 2);\n      _this._members = _this$_createMembersW4[0];\n      _this._memberIndexByName = _this$_createMembersW4[1];\n    }\n    return _this;\n  }\n  _createClass(AbstractSetDataType, [{\n    key: \"generateCalldataBlock\",\n    value: function generateCalldataBlock(value, parentBlock) {\n      var block = Array.isArray(value) ? this._generateCalldataBlockFromArray(value, parentBlock) : this._generateCalldataBlockFromObject(value, parentBlock);\n      return block;\n    }\n  }, {\n    key: \"generateValue\",\n    value: function generateValue(calldata, rules) {\n      var _this2 = this;\n      var members = this._members;\n      // Case 1: This is an array of undefined length, which means that `this._members` was not\n      //         populated in the constructor. So we must construct the set of members now.\n      if (this._isArray && this._arrayLength === undefined) {\n        var arrayLengthBuf = calldata.popWord();\n        var arrayLengthHex = ethUtil.bufferToHex(arrayLengthBuf);\n        var arrayLength = new configured_bignumber_1.BigNumber(arrayLengthHex, constants_1.constants.HEX_BASE);\n        var _this$_createMembersW5 = this._createMembersWithLength(this.getDataItem(), arrayLength.toNumber());\n        var _this$_createMembersW6 = _slicedToArray(_this$_createMembersW5, 1);\n        members = _this$_createMembersW6[0];\n      }\n      // Create a new scope in the calldata, before descending into the members of this set.\n      calldata.startScope();\n      var value;\n      if (rules.shouldConvertStructsToObjects && !this._isArray) {\n        // Construct an object with values for each member of the set.\n        value = {};\n        _.each(this._memberIndexByName, function (idx, key) {\n          var member = _this2._members[idx];\n          var memberValue = member.generateValue(calldata, rules);\n          value[key] = memberValue;\n        });\n      } else {\n        // Construct an array with values for each member of the set.\n        value = [];\n        _.each(members, function (member, idx) {\n          var memberValue = member.generateValue(calldata, rules);\n          value.push(memberValue);\n        });\n      }\n      // Close this scope and return tetheh value.\n      calldata.endScope();\n      return value;\n    }\n  }, {\n    key: \"isStatic\",\n    value: function isStatic() {\n      // An array with an undefined length is never static.\n      if (this._isArray && this._arrayLength === undefined) {\n        return false;\n      }\n      // If any member of the set is a pointer then the set is not static.\n      var dependentMember = _.find(this._members, function (member) {\n        return member instanceof pointer_1.AbstractPointerDataType;\n      });\n      var isStatic = dependentMember === undefined;\n      return isStatic;\n    }\n  }, {\n    key: \"getDefaultValue\",\n    value: function getDefaultValue(rules) {\n      var _this3 = this;\n      var defaultValue;\n      if (this._isArray && this._arrayLength === undefined) {\n        defaultValue = [];\n      } else if (rules !== undefined && rules.shouldConvertStructsToObjects && !this._isArray) {\n        defaultValue = {};\n        _.each(this._memberIndexByName, function (idx, key) {\n          var member = _this3._members[idx];\n          var memberValue = member.getDefaultValue();\n          defaultValue[key] = memberValue;\n        });\n      } else {\n        defaultValue = [];\n        _.each(this._members, function (member, idx) {\n          var memberValue = member.getDefaultValue();\n          defaultValue.push(memberValue);\n        });\n      }\n      return defaultValue;\n    }\n  }, {\n    key: \"_generateCalldataBlockFromArray\",\n    value: function _generateCalldataBlockFromArray(value, parentBlock) {\n      // Sanity check: if the set has a defined length then `value` must have the same length.\n      if (this._arrayLength !== undefined && value.length !== this._arrayLength) {\n        throw new Error(\"Expected array of \".concat(JSON.stringify(this._arrayLength), \" elements, but got array of length \").concat(JSON.stringify(value.length)));\n      }\n      // Create a new calldata block for this set.\n      var parentName = parentBlock === undefined ? '' : parentBlock.getName();\n      var block = new set_1.SetCalldataBlock(this.getDataItem().name, this.getSignature(), parentName);\n      // If this set has an undefined length then set its header to be the number of elements.\n      var members = this._members;\n      if (this._isArray && this._arrayLength === undefined) {\n        var _this$_createMembersW7 = this._createMembersWithLength(this.getDataItem(), value.length);\n        var _this$_createMembersW8 = _slicedToArray(_this$_createMembersW7, 1);\n        members = _this$_createMembersW8[0];\n        var lenBuf = ethUtil.setLengthLeft(ethUtil.toBuffer(\"0x\".concat(value.length.toString(constants_1.constants.HEX_BASE))), constants_1.constants.EVM_WORD_WIDTH_IN_BYTES);\n        block.setHeader(lenBuf);\n      }\n      // Create blocks for members of set.\n      var memberCalldataBlocks = [];\n      _.each(members, function (member, idx) {\n        var memberBlock = member.generateCalldataBlock(value[idx], block);\n        memberCalldataBlocks.push(memberBlock);\n      });\n      block.setMembers(memberCalldataBlocks);\n      return block;\n    }\n  }, {\n    key: \"_generateCalldataBlockFromObject\",\n    value: function _generateCalldataBlockFromObject(obj, parentBlock) {\n      var _this4 = this;\n      // Create a new calldata block for this set.\n      var parentName = parentBlock === undefined ? '' : parentBlock.getName();\n      var block = new set_1.SetCalldataBlock(this.getDataItem().name, this.getSignature(), parentName);\n      // Create blocks for members of set.\n      var memberCalldataBlocks = [];\n      _.forEach(this._memberIndexByName, function (memberIndex, memberName) {\n        if (!(memberName in obj)) {\n          throw new Error(\"Could not assign tuple to object: missing key '\".concat(memberName, \"' in object \").concat(JSON.stringify(obj)));\n        }\n        var memberValue = obj[memberName];\n        var memberBlock = _this4._members[memberIndex].generateCalldataBlock(memberValue, block);\n        memberCalldataBlocks.push(memberBlock);\n      });\n      // Associate member blocks with Set block.\n      block.setMembers(memberCalldataBlocks);\n      return block;\n    }\n  }, {\n    key: \"_computeSignatureOfMembers\",\n    value: function _computeSignatureOfMembers(isDetailed) {\n      var _this5 = this;\n      // Compute signature of members\n      var signature = \"(\";\n      _.each(this._members, function (member, i) {\n        signature += member.getSignature(isDetailed);\n        if (i < _this5._members.length - 1) {\n          signature += ',';\n        }\n      });\n      signature += ')';\n      return signature;\n    }\n  }, {\n    key: \"_createMembersWithKeys\",\n    value: function _createMembersWithKeys(dataItem) {\n      var _this6 = this;\n      // Sanity check\n      if (dataItem.components === undefined) {\n        throw new Error(\"Tried to create a set using key/value pairs, but no components were defined by the input DataItem '\".concat(dataItem.name, \"'.\"));\n      }\n      // Create one member for each component of `dataItem`\n      var members = [];\n      var memberIndexByName = {};\n      var memberNames = [];\n      _.each(dataItem.components, function (memberItem) {\n        // If a component with `name` already exists then\n        // rename to `name_nameIdx` to avoid naming conflicts.\n        var memberName = memberItem.name;\n        var nameIdx = 0;\n        while (_.includes(memberNames, memberName) || _.isEmpty(memberName)) {\n          nameIdx++;\n          memberName = \"\".concat(memberItem.name, \"_\").concat(nameIdx);\n        }\n        memberNames.push(memberName);\n        var childDataItem = {\n          type: memberItem.type,\n          name: \"\".concat(dataItem.name, \".\").concat(memberName)\n        };\n        var components = memberItem.components;\n        if (components !== undefined) {\n          childDataItem.components = components;\n        }\n        var child = _this6.getFactory().create(childDataItem, _this6);\n        memberIndexByName[memberName] = members.length;\n        members.push(child);\n      });\n      return [members, memberIndexByName];\n    }\n  }, {\n    key: \"_createMembersWithLength\",\n    value: function _createMembersWithLength(dataItem, length) {\n      var _this7 = this;\n      // Create `length` members, deriving the type from `dataItem`\n      var members = [];\n      var memberIndexByName = {};\n      var range = _.range(length);\n      _.each(range, function (idx) {\n        var memberDataItem = {\n          type: _this7._arrayElementType === undefined ? '' : _this7._arrayElementType,\n          name: \"\".concat(dataItem.name, \"[\").concat(idx.toString(constants_1.constants.DEC_BASE), \"]\")\n        };\n        var components = dataItem.components;\n        if (components !== undefined) {\n          memberDataItem.components = components;\n        }\n        var memberType = _this7.getFactory().create(memberDataItem, _this7);\n        memberIndexByName[idx.toString(constants_1.constants.DEC_BASE)] = members.length;\n        members.push(memberType);\n      });\n      return [members, memberIndexByName];\n    }\n  }]);\n  return AbstractSetDataType;\n}(data_type_1.DataType);\nexports.AbstractSetDataType = AbstractSetDataType;","map":null,"metadata":{},"sourceType":"script"}