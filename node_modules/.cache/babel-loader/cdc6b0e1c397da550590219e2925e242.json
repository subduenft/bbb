{"ast":null,"code":"'use strict';\n\nvar hasSymbols = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol';\nvar isPrimitive = require('./helpers/isPrimitive');\nvar isCallable = require('is-callable');\nvar isDate = require('is-date-object');\nvar isSymbol = require('is-symbol');\nvar ordinaryToPrimitive = function OrdinaryToPrimitive(O, hint) {\n  if (typeof O === 'undefined' || O === null) {\n    throw new TypeError('Cannot call method on ' + O);\n  }\n  if (typeof hint !== 'string' || hint !== 'number' && hint !== 'string') {\n    throw new TypeError('hint must be \"string\" or \"number\"');\n  }\n  var methodNames = hint === 'string' ? ['toString', 'valueOf'] : ['valueOf', 'toString'];\n  var method, result, i;\n  for (i = 0; i < methodNames.length; ++i) {\n    method = O[methodNames[i]];\n    if (isCallable(method)) {\n      result = method.call(O);\n      if (isPrimitive(result)) {\n        return result;\n      }\n    }\n  }\n  throw new TypeError('No default value');\n};\nvar GetMethod = function GetMethod(O, P) {\n  var func = O[P];\n  if (func !== null && typeof func !== 'undefined') {\n    if (!isCallable(func)) {\n      throw new TypeError(func + ' returned for property ' + P + ' of object ' + O + ' is not a function');\n    }\n    return func;\n  }\n  return void 0;\n};\n\n// http://www.ecma-international.org/ecma-262/6.0/#sec-toprimitive\nmodule.exports = function ToPrimitive(input) {\n  if (isPrimitive(input)) {\n    return input;\n  }\n  var hint = 'default';\n  if (arguments.length > 1) {\n    if (arguments[1] === String) {\n      hint = 'string';\n    } else if (arguments[1] === Number) {\n      hint = 'number';\n    }\n  }\n  var exoticToPrim;\n  if (hasSymbols) {\n    if (Symbol.toPrimitive) {\n      exoticToPrim = GetMethod(input, Symbol.toPrimitive);\n    } else if (isSymbol(input)) {\n      exoticToPrim = Symbol.prototype.valueOf;\n    }\n  }\n  if (typeof exoticToPrim !== 'undefined') {\n    var result = exoticToPrim.call(input, hint);\n    if (isPrimitive(result)) {\n      return result;\n    }\n    throw new TypeError('unable to convert exotic object to primitive');\n  }\n  if (hint === 'default' && (isDate(input) || isSymbol(input))) {\n    hint = 'string';\n  }\n  return ordinaryToPrimitive(input, hint === 'default' ? 'number' : hint);\n};","map":null,"metadata":{},"sourceType":"script"}