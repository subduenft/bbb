{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function sent() {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (g && (g = 0, op[0] && (_ = 0)), _) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getApprovalActions = exports.approvedItemAmount = void 0;\nvar ethers_1 = require(\"ethers\");\nvar ERC20_1 = require(\"../abi/ERC20\");\nvar ERC721_1 = require(\"../abi/ERC721\");\nvar constants_1 = require(\"../constants\");\nvar item_1 = require(\"./item\");\nvar usecase_1 = require(\"./usecase\");\nvar approvedItemAmount = function approvedItemAmount(owner, item, operator, multicallProvider) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contract, contract;\n    return __generator(this, function (_a) {\n      if ((0, item_1.isErc721Item)(item.itemType) || (0, item_1.isErc1155Item)(item.itemType)) {\n        contract = new ethers_1.Contract(item.token, ERC721_1.ERC721ABI, multicallProvider);\n        return [2 /*return*/, contract.isApprovedForAll(owner, operator).then(function (isApprovedForAll) {\n          // Setting to the max int to consolidate types and simplify\n          return isApprovedForAll ? constants_1.MAX_INT : ethers_1.BigNumber.from(0);\n        })];\n      } else if (item.itemType === constants_1.ItemType.ERC20) {\n        contract = new ethers_1.Contract(item.token, ERC20_1.ERC20ABI, multicallProvider);\n        return [2 /*return*/, contract.allowance(owner, operator)];\n      }\n      // We don't need to check approvals for native tokens\n      return [2 /*return*/, constants_1.MAX_INT];\n    });\n  });\n};\nexports.approvedItemAmount = approvedItemAmount;\n/**\n * Get approval actions given a list of insufficent approvals.\n */\nfunction getApprovalActions(insufficientApprovals, exactApproval, signer) {\n  var _this = this;\n  return Promise.all(insufficientApprovals.filter(function (approval, index) {\n    return index === insufficientApprovals.length - 1 || insufficientApprovals[index + 1].token !== approval.token;\n  }).map(function (_a) {\n    var token = _a.token,\n      operator = _a.operator,\n      itemType = _a.itemType,\n      identifierOrCriteria = _a.identifierOrCriteria,\n      requiredApprovedAmount = _a.requiredApprovedAmount;\n    return __awaiter(_this, void 0, void 0, function () {\n      var isErc1155, contract, contract;\n      return __generator(this, function (_b) {\n        isErc1155 = (0, item_1.isErc1155Item)(itemType);\n        if ((0, item_1.isErc721Item)(itemType) || isErc1155) {\n          contract = new ethers_1.Contract(token, ERC721_1.ERC721ABI, signer);\n          return [2 /*return*/, {\n            type: \"approval\",\n            token: token,\n            identifierOrCriteria: identifierOrCriteria,\n            itemType: itemType,\n            operator: operator,\n            transactionMethods: (0, usecase_1.getTransactionMethods)(contract.connect(signer), exactApproval && !isErc1155 ? \"approve\" : \"setApprovalForAll\", [operator, exactApproval && !isErc1155 ? identifierOrCriteria : true])\n          }];\n        } else {\n          contract = new ethers_1.Contract(token, ERC20_1.ERC20ABI, signer);\n          return [2 /*return*/, {\n            type: \"approval\",\n            token: token,\n            identifierOrCriteria: identifierOrCriteria,\n            itemType: itemType,\n            transactionMethods: (0, usecase_1.getTransactionMethods)(contract.connect(signer), \"approve\", [operator, exactApproval ? requiredApprovedAmount : constants_1.MAX_INT]),\n            operator: operator\n          }];\n        }\n        return [2 /*return*/];\n      });\n    });\n  }));\n}\n\nexports.getApprovalActions = getApprovalActions;","map":null,"metadata":{},"sourceType":"script"}