{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar assert = require(\"assert\");\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\nvar BYTE_SIZE = 256;\nvar Bloom = /** @class */function () {\n  /**\n   * Represents a Bloom filter.\n   */\n  function Bloom(bitvector) {\n    if (!bitvector) {\n      this.bitvector = ethereumjs_util_1.zeros(BYTE_SIZE);\n    } else {\n      assert(bitvector.length === BYTE_SIZE, 'bitvectors must be 2048 bits long');\n      this.bitvector = bitvector;\n    }\n  }\n  /**\n   * Adds an element to a bit vector of a 64 byte bloom filter.\n   * @param e - The element to add\n   */\n  Bloom.prototype.add = function (e) {\n    assert(Buffer.isBuffer(e), 'Element should be buffer');\n    e = ethereumjs_util_1.keccak256(e);\n    var mask = 2047; // binary 11111111111\n    for (var i = 0; i < 3; i++) {\n      var first2bytes = e.readUInt16BE(i * 2);\n      var loc = mask & first2bytes;\n      var byteLoc = loc >> 3;\n      var bitLoc = 1 << loc % 8;\n      this.bitvector[BYTE_SIZE - byteLoc - 1] |= bitLoc;\n    }\n  };\n  /**\n   * Checks if an element is in the bloom.\n   * @param e - The element to check\n   */\n  Bloom.prototype.check = function (e) {\n    assert(Buffer.isBuffer(e), 'Element should be Buffer');\n    e = ethereumjs_util_1.keccak256(e);\n    var mask = 2047; // binary 11111111111\n    var match = true;\n    for (var i = 0; i < 3 && match; i++) {\n      var first2bytes = e.readUInt16BE(i * 2);\n      var loc = mask & first2bytes;\n      var byteLoc = loc >> 3;\n      var bitLoc = 1 << loc % 8;\n      match = (this.bitvector[BYTE_SIZE - byteLoc - 1] & bitLoc) !== 0;\n    }\n    return Boolean(match);\n  };\n  /**\n   * Checks if multiple topics are in a bloom.\n   * @returns `true` if every topic is in the bloom\n   */\n  Bloom.prototype.multiCheck = function (topics) {\n    var _this = this;\n    return topics.every(function (t) {\n      return _this.check(t);\n    });\n  };\n  /**\n   * Bitwise or blooms together.\n   */\n  Bloom.prototype.or = function (bloom) {\n    if (bloom) {\n      for (var i = 0; i <= BYTE_SIZE; i++) {\n        this.bitvector[i] = this.bitvector[i] | bloom.bitvector[i];\n      }\n    }\n  };\n  return Bloom;\n}();\nexports.default = Bloom;","map":null,"metadata":{},"sourceType":"script"}