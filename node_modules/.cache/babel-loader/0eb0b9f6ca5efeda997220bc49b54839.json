{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"/Users/nicholasschepisi/Desktop/code/bbb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/defineProperty\");\nvar _classCallCheck = require(\"/Users/nicholasschepisi/Desktop/code/bbb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"/Users/nicholasschepisi/Desktop/code/bbb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AbiDecoder = void 0;\nvar ethereum_types_1 = require(\"ethereum-types\");\nvar ethers = require(\"ethers\");\nvar _ = require(\"lodash\");\nvar _1 = require(\".\");\n/**\n * AbiDecoder allows you to decode event logs given a set of supplied contract ABI's. It takes the contract's event\n * signature from the ABI and attempts to decode the logs using it.\n */\nvar AbiDecoder = /*#__PURE__*/function () {\n  /**\n   * Instantiate an AbiDecoder\n   * @param abiArrays An array of contract ABI's\n   * @return AbiDecoder instance\n   */\n  function AbiDecoder(abiArrays) {\n    var _this = this;\n    _classCallCheck(this, AbiDecoder);\n    this._eventIds = {};\n    this._selectorToFunctionInfo = {};\n    _.each(abiArrays, function (abi) {\n      _this.addABI(abi);\n    });\n  }\n  /**\n   * Retrieves the function selector from calldata.\n   * @param calldata hex-encoded calldata.\n   * @return hex-encoded function selector.\n   */\n  _createClass(AbiDecoder, [{\n    key: \"tryToDecodeLogOrNoop\",\n    /**\n     * Attempt to decode a log given the ABI's the AbiDecoder knows about.\n     * @param log The log to attempt to decode\n     * @return The decoded log if the requisite ABI was available. Otherwise the log unaltered.\n     */\n    value: function tryToDecodeLogOrNoop(log) {\n      // Lookup event corresponding to log\n      var eventId = log.topics[0];\n      var numIndexedArgs = log.topics.length - 1;\n      if (this._eventIds[eventId] === undefined || this._eventIds[eventId][numIndexedArgs] === undefined) {\n        return log;\n      }\n      var event = this._eventIds[eventId][numIndexedArgs];\n      // Create decoders for indexed data\n      var indexedDataDecoders = _.mapValues(_.filter(event.inputs, {\n        indexed: true\n      }), function (input) {\n        return (\n          // tslint:disable:next-line no-unnecessary-type-assertion\n          _1.AbiEncoder.create(input)\n        );\n      });\n      // Decode indexed data\n      var decodedIndexedData = _.map(log.topics.slice(1),\n      // ignore first topic, which is the event id.\n      function (input, i) {\n        return indexedDataDecoders[i].decode(input);\n      });\n      // Decode non-indexed data\n      var decodedNonIndexedData = _1.AbiEncoder.create(_.filter(event.inputs, {\n        indexed: false\n      })).decodeAsArray(log.data);\n      // Construct DecodedLogArgs struct by mapping event parameters to their respective decoded argument.\n      var decodedArgs = {};\n      var indexedOffset = 0;\n      var nonIndexedOffset = 0;\n      var _iterator = _createForOfIteratorHelper(event.inputs),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var param = _step.value;\n          var value = param.indexed ? decodedIndexedData[indexedOffset++] : decodedNonIndexedData[nonIndexedOffset++];\n          if (value === undefined) {\n            return log;\n          }\n          decodedArgs[param.name] = value;\n        }\n        // Decoding was successful. Return decoded log.\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      return Object.assign(Object.assign({}, log), {\n        event: event.name,\n        args: decodedArgs\n      });\n    }\n    /**\n     * Decodes calldata for a known ABI.\n     * @param calldata hex-encoded calldata.\n     * @param contractName used to disambiguate similar ABI's (optional).\n     * @return Decoded calldata. Includes: function name and signature, along with the decoded arguments.\n     */\n  }, {\n    key: \"decodeCalldataOrThrow\",\n    value: function decodeCalldataOrThrow(calldata, contractName) {\n      var functionSelector = AbiDecoder._getFunctionSelector(calldata);\n      var candidateFunctionInfos = this._selectorToFunctionInfo[functionSelector];\n      if (candidateFunctionInfos === undefined) {\n        throw new Error(\"No functions registered for selector '\".concat(functionSelector, \"'\"));\n      }\n      var functionInfo = _.find(candidateFunctionInfos, function (candidateFunctionInfo) {\n        return contractName === undefined || _.toLower(contractName) === _.toLower(candidateFunctionInfo.contractName);\n      });\n      if (functionInfo === undefined) {\n        throw new Error(\"No function registered with selector \".concat(functionSelector, \" and contract name \").concat(contractName, \".\"));\n      } else if (functionInfo.abiEncoder === undefined) {\n        throw new Error(\"Function ABI Encoder is not defined, for function registered with selector \".concat(functionSelector, \" and contract name \").concat(contractName, \".\"));\n      }\n      var functionName = functionInfo.abiEncoder.getDataItem().name;\n      var functionSignature = functionInfo.abiEncoder.getSignatureType();\n      var functionArguments = functionInfo.abiEncoder.decode(calldata);\n      var decodedCalldata = {\n        functionName: functionName,\n        functionSignature: functionSignature,\n        functionArguments: functionArguments\n      };\n      return decodedCalldata;\n    }\n    /**\n     * Adds a set of ABI definitions, after which calldata and logs targeting these ABI's can be decoded.\n     * Additional properties can be included to disambiguate similar ABI's. For example, if two functions\n     * have the same signature but different parameter names, then their ABI definitions can be disambiguated\n     * by specifying a contract name.\n     * @param abiDefinitions ABI definitions for a given contract.\n     * @param contractName Name of contract that encapsulates the ABI definitions (optional).\n     *                     This can be used when decoding calldata to disambiguate methods with\n     *                     the same signature but different parameter names.\n     */\n  }, {\n    key: \"addABI\",\n    value: function addABI(abiArray, contractName) {\n      var _this2 = this;\n      if (abiArray === undefined) {\n        return;\n      }\n      var ethersInterface = new ethers.utils.Interface(abiArray);\n      _.map(abiArray, function (abi) {\n        switch (abi.type) {\n          case ethereum_types_1.AbiType.Event:\n            // tslint:disable-next-line:no-unnecessary-type-assertion\n            _this2._addEventABI(abi, ethersInterface);\n            break;\n          case ethereum_types_1.AbiType.Function:\n            // tslint:disable-next-line:no-unnecessary-type-assertion\n            _this2._addMethodABI(abi, contractName);\n            break;\n          default:\n            // ignore other types\n            break;\n        }\n      });\n    }\n  }, {\n    key: \"_addEventABI\",\n    value: function _addEventABI(eventAbi, ethersInterface) {\n      var topic = ethersInterface.events[eventAbi.name].topic;\n      var numIndexedArgs = _.reduce(eventAbi.inputs, function (sum, input) {\n        return input.indexed ? sum + 1 : sum;\n      }, 0);\n      this._eventIds[topic] = Object.assign(Object.assign({}, this._eventIds[topic]), _defineProperty({}, numIndexedArgs, eventAbi));\n    }\n  }, {\n    key: \"_addMethodABI\",\n    value: function _addMethodABI(methodAbi, contractName) {\n      var abiEncoder = new _1.AbiEncoder.Method(methodAbi);\n      var functionSelector = abiEncoder.getSelector();\n      if (!(functionSelector in this._selectorToFunctionInfo)) {\n        this._selectorToFunctionInfo[functionSelector] = [];\n      }\n      // Recored a copy of this ABI for each deployment\n      var functionSignature = abiEncoder.getSignature();\n      this._selectorToFunctionInfo[functionSelector].push({\n        functionSignature: functionSignature,\n        abiEncoder: abiEncoder,\n        contractName: contractName\n      });\n    }\n  }], [{\n    key: \"_getFunctionSelector\",\n    value: function _getFunctionSelector(calldata) {\n      var functionSelectorLength = 10;\n      if (!calldata.startsWith('0x') || calldata.length < functionSelectorLength) {\n        throw new Error(\"Malformed calldata. Must include a hex prefix '0x' and 4-byte function selector. Got '\".concat(calldata, \"'\"));\n      }\n      var functionSelector = calldata.substr(0, functionSelectorLength);\n      return functionSelector;\n    }\n  }]);\n  return AbiDecoder;\n}();\nexports.AbiDecoder = AbiDecoder;","map":null,"metadata":{},"sourceType":"script"}