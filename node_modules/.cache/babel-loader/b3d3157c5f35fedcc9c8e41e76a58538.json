{"ast":null,"code":"import _slicedToArray from \"/Users/nicholasschepisi/Desktop/code/bbb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/nicholasschepisi/Desktop/code/bbb/src/components/Form.js\";\nimport React, { useEffect, useState } from 'react';\nfunction Form(props) {\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    nftContractAddress = _useState2[0],\n    setNftContractAddress = _useState2[1];\n  var _useState3 = useState(''),\n    _useState4 = _slicedToArray(_useState3, 2),\n    tokenId = _useState4[0],\n    setTokenId = _useState4[1];\n  var _useState5 = useState(''),\n    _useState6 = _slicedToArray(_useState5, 2),\n    offerAmount = _useState6[0],\n    setOfferAmount = _useState6[1]; // set the states from the form values\n  // const handleNftContractAddressChange = (event) => {\n  //   setNftContractAddress(event.target.value);\n  // };\n  // const handleTokenIdChange = (event) => {\n  //   setTokenId(event.target.value);\n  // };\n  // const handleOfferAmountChange = (event) => {\n  //   setOfferAmount(event.target.value);\n  // };\n  useEffect(function () {\n    console.log(offerAmount);\n  }, [offerAmount]);\n  useEffect(function () {\n    console.log(tokenId);\n  }, [tokenId]);\n  var handleSubmit = function handleSubmit(event) {\n    event.preventDefault();\n    var formData = {\n      nftContractAddress: nftContractAddress,\n      tokenId: tokenId,\n      offerAmount: offerAmount\n    };\n    props.onSubmit(formData);\n  };\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }, \"NFT Contract Address:\", /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: nftContractAddress,\n    onChange: function onChange(e) {\n      return setNftContractAddress(e.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  }, \"Token ID:\", /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: tokenId,\n    onChange: function onChange(e) {\n      return setTokenId(e.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }, \"Offer Amount:\", /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: offerAmount,\n    onChange: function onChange(e) {\n      return setOfferAmount(e.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }, \"Make Offer\"));\n}\nexport default Form;\n\n// import React, { useState } from \"react\";\n// import { ethers } from \"ethers\";\n// import { TextField, Button } from \"@material-ui/core\";\n// import { makeStyles } from \"@material-ui/core/styles\";\n// import Offer from \"./Offer\";\n\n// const useStyles = makeStyles((theme) => ({\n//   root: {\n//     \"& .MuiTextField-root\": {\n//       margin: theme.spacing(1),\n//       width: \"25ch\",\n//     },\n//   },\n//   button: {\n//     margin: theme.spacing(1),\n//   },\n// }));\n\n// const Form = ({ contractAddress, tokenId, contractAbi, network, walletAddress }) => {\n//   const classes = useStyles();\n//   const [offerAmount, setOfferAmount] = useState(\"\");\n//   const [isOfferSubmitted, setIsOfferSubmitted] = useState(false);\n\n//   const handleOffer = async () => {\n//     // Connect to wallet\n//     const provider = new ethers.providers.Web3Provider(window.ethereum);\n//     await provider.send(\"eth_requestAccounts\", []);\n//     const signer = provider.getSigner();\n\n//     // Instantiate contract\n//     const contract = new ethers.Contract(contractAddress, contractAbi, signer);\n\n//     // Calculate offer amount\n//     const offerAmountWei = ethers.utils.parseEther(offerAmount);\n\n//     // Create offer transaction\n//     const offerTx = await contract.createOffer(tokenId, offerAmountWei);\n\n//     // Wait for transaction to be mined\n//     await offerTx.wait();\n\n//     setIsOfferSubmitted(true);\n//   };\n\n//   if (isOfferSubmitted) {\n//     return (\n//       <Offer\n//         contractAddress={contractAddress}\n//         tokenId={tokenId}\n//         offerAmount={offerAmount}\n//         walletAddress={walletAddress}\n//         network={network}\n//         contractAbi={contractAbi}\n//       />\n//     );\n//   }\n\n//   return (\n//     <form className={classes.root} noValidate autoComplete=\"off\">\n//       <div>\n//         <TextField\n//           id=\"offer-amount\"\n//           label=\"Offer Amount (ETH)\"\n//           value={offerAmount}\n//           onChange={(e) => setOfferAmount(e.target.value)}\n//         />\n//       </div>\n//       <Button variant=\"contained\" color=\"primary\" className={classes.button} onClick={handleOffer}>\n//         Submit Offer\n//       </Button>\n//     </form>\n//   );\n// };\n\n// export default Form;","map":{"version":3,"names":["React","useEffect","useState","Form","props","_useState","_useState2","_slicedToArray","nftContractAddress","setNftContractAddress","_useState3","_useState4","tokenId","setTokenId","_useState5","_useState6","offerAmount","setOfferAmount","console","log","handleSubmit","event","preventDefault","formData","onSubmit","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target"],"sources":["/Users/nicholasschepisi/Desktop/code/bbb/src/components/Form.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\n\nfunction Form(props) {\n  const [nftContractAddress, setNftContractAddress] = useState('');\n  const [tokenId, setTokenId] = useState('');\n  const [offerAmount, setOfferAmount] = useState('');\n\n  // set the states from the form values\n  // const handleNftContractAddressChange = (event) => {\n  //   setNftContractAddress(event.target.value);\n  // };\n\n  // const handleTokenIdChange = (event) => {\n  //   setTokenId(event.target.value);\n  // };\n\n  // const handleOfferAmountChange = (event) => {\n  //   setOfferAmount(event.target.value);\n  // };\n\n\n\n  useEffect(() => {\n    console.log(offerAmount);\n  }, [offerAmount]);\n\n  useEffect(() => {\n    console.log(tokenId);\n  }, [tokenId]);\n\n\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    const formData = {\n      nftContractAddress,\n      tokenId,\n      offerAmount\n    };\n    props.onSubmit(formData);\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label>\n        NFT Contract Address:\n        <input type=\"text\" value={nftContractAddress} onChange={(e) => setNftContractAddress(e.target.value)} />\n      </label>\n      <br />\n      <label>\n        Token ID:\n        <input type=\"text\" value={tokenId} onChange={(e) => setTokenId(e.target.value)} />\n      </label>\n      <br />\n      <label>\n        Offer Amount:\n        <input type=\"text\" value={offerAmount} onChange={(e) => setOfferAmount(e.target.value)} /> \n      </label>\n      <br />\n      <button type=\"submit\">Make Offer</button>\n    </form>\n  );\n}\n\nexport default Form;\n\n\n// import React, { useState } from \"react\";\n// import { ethers } from \"ethers\";\n// import { TextField, Button } from \"@material-ui/core\";\n// import { makeStyles } from \"@material-ui/core/styles\";\n// import Offer from \"./Offer\";\n\n// const useStyles = makeStyles((theme) => ({\n//   root: {\n//     \"& .MuiTextField-root\": {\n//       margin: theme.spacing(1),\n//       width: \"25ch\",\n//     },\n//   },\n//   button: {\n//     margin: theme.spacing(1),\n//   },\n// }));\n\n// const Form = ({ contractAddress, tokenId, contractAbi, network, walletAddress }) => {\n//   const classes = useStyles();\n//   const [offerAmount, setOfferAmount] = useState(\"\");\n//   const [isOfferSubmitted, setIsOfferSubmitted] = useState(false);\n\n//   const handleOffer = async () => {\n//     // Connect to wallet\n//     const provider = new ethers.providers.Web3Provider(window.ethereum);\n//     await provider.send(\"eth_requestAccounts\", []);\n//     const signer = provider.getSigner();\n\n//     // Instantiate contract\n//     const contract = new ethers.Contract(contractAddress, contractAbi, signer);\n\n//     // Calculate offer amount\n//     const offerAmountWei = ethers.utils.parseEther(offerAmount);\n\n//     // Create offer transaction\n//     const offerTx = await contract.createOffer(tokenId, offerAmountWei);\n\n//     // Wait for transaction to be mined\n//     await offerTx.wait();\n\n//     setIsOfferSubmitted(true);\n//   };\n\n//   if (isOfferSubmitted) {\n//     return (\n//       <Offer\n//         contractAddress={contractAddress}\n//         tokenId={tokenId}\n//         offerAmount={offerAmount}\n//         walletAddress={walletAddress}\n//         network={network}\n//         contractAbi={contractAbi}\n//       />\n//     );\n//   }\n\n//   return (\n//     <form className={classes.root} noValidate autoComplete=\"off\">\n//       <div>\n//         <TextField\n//           id=\"offer-amount\"\n//           label=\"Offer Amount (ETH)\"\n//           value={offerAmount}\n//           onChange={(e) => setOfferAmount(e.target.value)}\n//         />\n//       </div>\n//       <Button variant=\"contained\" color=\"primary\" className={classes.button} onClick={handleOffer}>\n//         Submit Offer\n//       </Button>\n//     </form>\n//   );\n// };\n\n// export default Form;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}