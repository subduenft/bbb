{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar BN = require(\"bn.js\");\nvar ethereumjs_account_1 = require(\"ethereumjs-account\");\nvar ethereumjs_blockchain_1 = require(\"ethereumjs-blockchain\");\nvar ethereumjs_common_1 = require(\"ethereumjs-common\");\nvar state_1 = require(\"./state\");\nvar runCode_1 = require(\"./runCode\");\nvar runCall_1 = require(\"./runCall\");\nvar runTx_1 = require(\"./runTx\");\nvar runBlock_1 = require(\"./runBlock\");\nvar opcodes_1 = require(\"./evm/opcodes\");\nvar runBlockchain_1 = require(\"./runBlockchain\");\nvar promisified_1 = require(\"./state/promisified\");\nvar promisify = require('util.promisify');\nvar AsyncEventEmitter = require('async-eventemitter');\nvar Trie = require('merkle-patricia-tree/secure.js');\n/**\n * Execution engine which can be used to run a blockchain, individual\n * blocks, individual transactions, or snippets of EVM bytecode.\n *\n * This class is an AsyncEventEmitter, please consult the README to learn how to use it.\n */\nvar VM = /** @class */function (_super) {\n  __extends(VM, _super);\n  /**\n   * Instantiates a new [[VM]] Object.\n   * @param opts - Default values for the options are:\n   *  - `chain`: 'mainnet'\n   *  - `hardfork`: 'petersburg' [supported: 'byzantium', 'constantinople', 'petersburg', 'istanbul' (DRAFT) (will throw on unsupported)]\n   *  - `activatePrecompiles`: false\n   *  - `allowUnlimitedContractSize`: false [ONLY set to `true` during debugging]\n   */\n  function VM(opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    var _this = _super.call(this) || this;\n    _this.opts = opts;\n    if (opts.common) {\n      if (opts.chain || opts.hardfork) {\n        throw new Error('You can only instantiate the VM class with one of: opts.common, or opts.chain and opts.hardfork');\n      }\n      _this._common = opts.common;\n    } else {\n      var chain = opts.chain ? opts.chain : 'mainnet';\n      var hardfork = opts.hardfork ? opts.hardfork : 'petersburg';\n      var supportedHardforks = ['byzantium', 'constantinople', 'petersburg', 'istanbul', 'muirGlacier'];\n      _this._common = new ethereumjs_common_1.default(chain, hardfork, supportedHardforks);\n    }\n    // Set list of opcodes based on HF\n    _this._opcodes = opcodes_1.getOpcodesForHF(_this._common);\n    if (opts.stateManager) {\n      _this.stateManager = opts.stateManager;\n    } else {\n      var trie = opts.state || new Trie();\n      if (opts.activatePrecompiles) {\n        for (var i = 1; i <= 8; i++) {\n          trie.put(new BN(i).toArrayLike(Buffer, 'be', 20), new ethereumjs_account_1.default().serialize());\n        }\n      }\n      _this.stateManager = new state_1.StateManager({\n        trie: trie,\n        common: _this._common\n      });\n    }\n    _this.pStateManager = new promisified_1.default(_this.stateManager);\n    _this.blockchain = opts.blockchain || new ethereumjs_blockchain_1.default({\n      common: _this._common\n    });\n    _this.allowUnlimitedContractSize = opts.allowUnlimitedContractSize === undefined ? false : opts.allowUnlimitedContractSize;\n    // We cache this promisified function as it's called from the main execution loop, and\n    // promisifying each time has a huge performance impact.\n    _this._emit = promisify(_this.emit.bind(_this));\n    return _this;\n  }\n  /**\n   * Processes blocks and adds them to the blockchain.\n   *\n   * This method modifies the state.\n   *\n   * @param blockchain -  A [blockchain](https://github.com/ethereum/ethereumjs-blockchain) object to process\n   */\n  VM.prototype.runBlockchain = function (blockchain) {\n    return runBlockchain_1.default.bind(this)(blockchain);\n  };\n  /**\n   * Processes the `block` running all of the transactions it contains and updating the miner's account\n   *\n   * This method modifies the state. If `generate` is `true`, the state modifications will be\n   * reverted if an exception is raised. If it's `false`, it won't revert if the block's header is\n   * invalid. If an error is thrown from an event handler, the state may or may not be reverted.\n   *\n   * @param opts - Default values for options:\n   *  - `generate`: false\n   */\n  VM.prototype.runBlock = function (opts) {\n    return runBlock_1.default.bind(this)(opts);\n  };\n  /**\n   * Process a transaction. Run the vm. Transfers eth. Checks balances.\n   *\n   * This method modifies the state. If an error is thrown, the modifications are reverted, except\n   * when the error is thrown from an event handler. In the latter case the state may or may not be\n   * reverted.\n   */\n  VM.prototype.runTx = function (opts) {\n    return runTx_1.default.bind(this)(opts);\n  };\n  /**\n   * runs a call (or create) operation.\n   *\n   * This method modifies the state.\n   */\n  VM.prototype.runCall = function (opts) {\n    return runCall_1.default.bind(this)(opts);\n  };\n  /**\n   * Runs EVM code.\n   *\n   * This method modifies the state.\n   */\n  VM.prototype.runCode = function (opts) {\n    return runCode_1.default.bind(this)(opts);\n  };\n  /**\n   * Returns a copy of the [[VM]] instance.\n   */\n  VM.prototype.copy = function () {\n    return new VM({\n      stateManager: this.stateManager.copy(),\n      blockchain: this.blockchain,\n      common: this._common\n    });\n  };\n  return VM;\n}(AsyncEventEmitter);\nexports.default = VM;","map":null,"metadata":{},"sourceType":"script"}