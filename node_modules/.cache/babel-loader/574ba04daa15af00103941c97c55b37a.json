{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.encodeDefaultCall = exports.encodeBuy = exports.encodeAtomicizedBuy = exports.encodeAtomicizedSell = exports.encodeSell = exports.encodeCall = exports.encodeReplacementPattern = void 0;\nvar bignumber_js_1 = require(\"bignumber.js\");\nvar ethABI = require(\"ethereumjs-abi\");\nvar wyvern_js_1 = require(\"wyvern-js\");\nvar types_1 = require(\"./types\");\nvar failWith = function failWith(msg) {\n  throw new Error(msg);\n};\nexports.encodeReplacementPattern = wyvern_js_1.WyvernProtocol.encodeReplacementPattern;\nvar encodeCall = function encodeCall(abi, parameters) {\n  var inputTypes = abi.inputs.map(function (i) {\n    return i.type;\n  });\n  return '0x' + Buffer.concat([ethABI.methodID(abi.name, inputTypes), ethABI.rawEncode(inputTypes, parameters)]).toString('hex');\n};\nexports.encodeCall = encodeCall;\nvar encodeSell = function encodeSell(schema, asset, address) {\n  var transfer = schema.functions.transfer(asset);\n  return {\n    target: transfer.target,\n    calldata: (0, exports.encodeDefaultCall)(transfer, address),\n    replacementPattern: (0, exports.encodeReplacementPattern)(transfer)\n  };\n};\nexports.encodeSell = encodeSell;\nvar encodeAtomicizedSell = function encodeAtomicizedSell(schema, assets, address, atomicizer) {\n  var transactions = assets.map(function (asset) {\n    var _ref = (0, exports.encodeSell)(schema, asset, address),\n      target = _ref.target,\n      calldata = _ref.calldata;\n    return {\n      calldata: calldata,\n      abi: schema.functions.transfer(asset),\n      address: target,\n      value: new bignumber_js_1.BigNumber(0)\n    };\n  });\n  var atomicizedCalldata = atomicizer.atomicize(transactions.map(function (t) {\n    return t.address;\n  }), transactions.map(function (t) {\n    return t.value;\n  }), transactions.map(function (t) {\n    return new bignumber_js_1.BigNumber((t.calldata.length - 2) / 2);\n  }),\n  // subtract 2 for '0x', divide by 2 for hex\n  transactions.map(function (t) {\n    return t.calldata;\n  }).reduce(function (x, y) {\n    return x + y.slice(2);\n  })).getABIEncodedTransactionData();\n  var atomicizedReplacementPattern = wyvern_js_1.WyvernProtocol.encodeAtomicizedReplacementPattern(transactions.map(function (t) {\n    return t.abi;\n  }));\n  return {\n    calldata: atomicizedCalldata,\n    replacementPattern: atomicizedReplacementPattern\n  };\n};\nexports.encodeAtomicizedSell = encodeAtomicizedSell;\nvar encodeAtomicizedBuy = function encodeAtomicizedBuy(schema, assets, address, atomicizer) {\n  var transactions = assets.map(function (asset) {\n    var _ref2 = (0, exports.encodeBuy)(schema, asset, address),\n      target = _ref2.target,\n      calldata = _ref2.calldata;\n    return {\n      calldata: calldata,\n      abi: schema.functions.transfer(asset),\n      address: target,\n      value: new bignumber_js_1.BigNumber(0)\n    };\n  });\n  var atomicizedCalldata = atomicizer.atomicize(transactions.map(function (t) {\n    return t.address;\n  }), transactions.map(function (t) {\n    return t.value;\n  }), transactions.map(function (t) {\n    return new bignumber_js_1.BigNumber((t.calldata.length - 2) / 2);\n  }),\n  // subtract 2 for '0x', divide by 2 for hex\n  transactions.map(function (t) {\n    return t.calldata;\n  }).reduce(function (x, y) {\n    return x + y.slice(2);\n  })).getABIEncodedTransactionData();\n  var atomicizedReplacementPattern = wyvern_js_1.WyvernProtocol.encodeAtomicizedReplacementPattern(transactions.map(function (t) {\n    return t.abi;\n  }), types_1.FunctionInputKind.Owner);\n  return {\n    calldata: atomicizedCalldata,\n    replacementPattern: atomicizedReplacementPattern\n  };\n};\nexports.encodeAtomicizedBuy = encodeAtomicizedBuy;\nvar encodeBuy = function encodeBuy(schema, asset, address) {\n  var transfer = schema.functions.transfer(asset);\n  var replaceables = transfer.inputs.filter(function (i) {\n    return i.kind === types_1.FunctionInputKind.Replaceable;\n  });\n  var ownerInputs = transfer.inputs.filter(function (i) {\n    return i.kind === types_1.FunctionInputKind.Owner;\n  });\n  // Validate\n  if (replaceables.length !== 1) {\n    failWith('Only 1 input can match transfer destination, but instead ' + replaceables.length + ' did');\n  }\n  // Compute calldata\n  var parameters = transfer.inputs.map(function (input) {\n    switch (input.kind) {\n      case types_1.FunctionInputKind.Replaceable:\n        return address;\n      case types_1.FunctionInputKind.Owner:\n        return wyvern_js_1.WyvernProtocol.generateDefaultValue(input.type);\n      default:\n        return input.value.toString();\n    }\n  });\n  var calldata = (0, exports.encodeCall)(transfer, parameters);\n  // Compute replacement pattern\n  var replacementPattern = '0x';\n  if (ownerInputs.length > 0) {\n    replacementPattern = (0, exports.encodeReplacementPattern)(transfer, types_1.FunctionInputKind.Owner);\n  }\n  return {\n    target: transfer.target,\n    calldata: calldata,\n    replacementPattern: replacementPattern\n  };\n};\nexports.encodeBuy = encodeBuy;\nvar encodeDefaultCall = function encodeDefaultCall(abi, address) {\n  var parameters = abi.inputs.map(function (input) {\n    switch (input.kind) {\n      case types_1.FunctionInputKind.Replaceable:\n        return wyvern_js_1.WyvernProtocol.generateDefaultValue(input.type);\n      case types_1.FunctionInputKind.Owner:\n        return address;\n      case types_1.FunctionInputKind.Asset:\n      default:\n        return input.value;\n    }\n  });\n  return (0, exports.encodeCall)(abi, parameters);\n};\nexports.encodeDefaultCall = encodeDefaultCall;","map":null,"metadata":{},"sourceType":"script"}